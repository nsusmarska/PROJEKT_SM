
PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a270  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800a470  0800a470  0001a470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a894  0800a894  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a894  0800a894  0001a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a89c  0800a89c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a0  0800a8a0  0001a8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  200001f8  0800aa9c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  0800aa9c  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da83  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003662  00000000  00000000  0003dca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  00041310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00042a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac39  00000000  00000000  00043fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c11c  00000000  00000000  0006ebe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038ef  00000000  00000000  0008acfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e5ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000723c  00000000  00000000  0018e640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a458 	.word	0x0800a458

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800a458 	.word	0x0800a458

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b9 	b.w	8000684 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000696:	7b3b      	ldrb	r3, [r7, #12]
 8000698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2110      	movs	r1, #16
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <BMP280_Read8+0x4c>)
 80006a6:	f002 f80d 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <BMP280_Read8+0x50>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	f107 020c 	add.w	r2, r7, #12
 80006b2:	f107 010c 	add.w	r1, r7, #12
 80006b6:	230a      	movs	r3, #10
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2302      	movs	r3, #2
 80006bc:	f003 ff11 	bl	80044e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2110      	movs	r1, #16
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <BMP280_Read8+0x4c>)
 80006c6:	f001 fffd 	bl	80026c4 <HAL_GPIO_WritePin>
	return tmp[1];
 80006ca:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40020000 	.word	0x40020000
 80006d8:	2000023c 	.word	0x2000023c

080006dc <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80006ea:	7b3b      	ldrb	r3, [r7, #12]
 80006ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2110      	movs	r1, #16
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <BMP280_Read16+0x5c>)
 80006fa:	f001 ffe3 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <BMP280_Read16+0x60>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 020c 	add.w	r2, r7, #12
 8000706:	f107 010c 	add.w	r1, r7, #12
 800070a:	230a      	movs	r3, #10
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2303      	movs	r3, #3
 8000710:	f003 fee7 	bl	80044e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2110      	movs	r1, #16
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <BMP280_Read16+0x5c>)
 800071a:	f001 ffd3 	bl	80026c4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800071e:	7b7b      	ldrb	r3, [r7, #13]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	b21a      	sxth	r2, r3
 8000724:	7bbb      	ldrb	r3, [r7, #14]
 8000726:	b21b      	sxth	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b21b      	sxth	r3, r3
 800072c:	b29b      	uxth	r3, r3
#endif
}
 800072e:	4618      	mov	r0, r3
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40020000 	.word	0x40020000
 800073c:	2000023c 	.word	0x2000023c

08000740 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffc5 	bl	80006dc <BMP280_Read16>
 8000752:	4603      	mov	r3, r0
 8000754:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000756:	89fb      	ldrh	r3, [r7, #14]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b21a      	sxth	r2, r3
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21b      	sxth	r3, r3
 8000768:	b29b      	uxth	r3, r3
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af02      	add	r7, sp, #8
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8000788:	7b3b      	ldrb	r3, [r7, #12]
 800078a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078e:	b2db      	uxtb	r3, r3
 8000790:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2110      	movs	r1, #16
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <BMP280_Write8+0x54>)
 800079c:	f001 ff92 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <BMP280_Write8+0x58>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	f107 020c 	add.w	r2, r7, #12
 80007a8:	f107 010c 	add.w	r1, r7, #12
 80007ac:	230a      	movs	r3, #10
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2302      	movs	r3, #2
 80007b2:	f003 fe96 	bl	80044e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2110      	movs	r1, #16
 80007ba:	4803      	ldr	r0, [pc, #12]	; (80007c8 <BMP280_Write8+0x54>)
 80007bc:	f001 ff82 	bl	80026c4 <HAL_GPIO_WritePin>
#endif
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020000 	.word	0x40020000
 80007cc:	2000023c 	.word	0x2000023c

080007d0 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80007de:	7b3b      	ldrb	r3, [r7, #12]
 80007e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	480e      	ldr	r0, [pc, #56]	; (8000828 <BMP280_Read24+0x58>)
 80007ee:	f001 ff69 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <BMP280_Read24+0x5c>)
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f107 020c 	add.w	r2, r7, #12
 80007fa:	f107 010c 	add.w	r1, r7, #12
 80007fe:	230a      	movs	r3, #10
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2303      	movs	r3, #3
 8000804:	f003 fe6d 	bl	80044e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	4806      	ldr	r0, [pc, #24]	; (8000828 <BMP280_Read24+0x58>)
 800080e:	f001 ff59 	bl	80026c4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	041a      	lsls	r2, r3, #16
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	4313      	orrs	r3, r2
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	4313      	orrs	r3, r2
#endif
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40020000 	.word	0x40020000
 800082c:	2000023c 	.word	0x2000023c

08000830 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	70fb      	strb	r3, [r7, #3]
 8000842:	460b      	mov	r3, r1
 8000844:	70bb      	strb	r3, [r7, #2]
 8000846:	4613      	mov	r3, r2
 8000848:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800084a:	4a4e      	ldr	r2, [pc, #312]	; (8000984 <BMP280_Init+0x154>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2110      	movs	r1, #16
 8000854:	484c      	ldr	r0, [pc, #304]	; (8000988 <BMP280_Init+0x158>)
 8000856:	f001 ff35 	bl	80026c4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800085a:	2005      	movs	r0, #5
 800085c:	f001 fbbe 	bl	8001fdc <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2110      	movs	r1, #16
 8000864:	4848      	ldr	r0, [pc, #288]	; (8000988 <BMP280_Init+0x158>)
 8000866:	f001 ff2d 	bl	80026c4 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 800086a:	787b      	ldrb	r3, [r7, #1]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d901      	bls.n	8000874 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8000870:	2303      	movs	r3, #3
 8000872:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8000874:	4a45      	ldr	r2, [pc, #276]	; (800098c <BMP280_Init+0x15c>)
 8000876:	787b      	ldrb	r3, [r7, #1]
 8000878:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800087a:	787b      	ldrb	r3, [r7, #1]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d101      	bne.n	8000884 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8000880:	2300      	movs	r3, #0
 8000882:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b05      	cmp	r3, #5
 8000888:	d901      	bls.n	800088e <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800088a:	2305      	movs	r3, #5
 800088c:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800088e:	4a40      	ldr	r2, [pc, #256]	; (8000990 <BMP280_Init+0x160>)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8000894:	78bb      	ldrb	r3, [r7, #2]
 8000896:	2b05      	cmp	r3, #5
 8000898:	d901      	bls.n	800089e <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800089a:	2305      	movs	r3, #5
 800089c:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800089e:	4a3d      	ldr	r2, [pc, #244]	; (8000994 <BMP280_Init+0x164>)
 80008a0:	78bb      	ldrb	r3, [r7, #2]
 80008a2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80008a4:	bf00      	nop
 80008a6:	20d0      	movs	r0, #208	; 0xd0
 80008a8:	f7ff feee 	bl	8000688 <BMP280_Read8>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b58      	cmp	r3, #88	; 0x58
 80008b0:	d1f9      	bne.n	80008a6 <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80008b2:	2088      	movs	r0, #136	; 0x88
 80008b4:	f7ff ff44 	bl	8000740 <BMP280_Read16LE>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <BMP280_Init+0x168>)
 80008be:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80008c0:	208a      	movs	r0, #138	; 0x8a
 80008c2:	f7ff ff3d 	bl	8000740 <BMP280_Read16LE>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <BMP280_Init+0x16c>)
 80008cc:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80008ce:	208c      	movs	r0, #140	; 0x8c
 80008d0:	f7ff ff36 	bl	8000740 <BMP280_Read16LE>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <BMP280_Init+0x170>)
 80008da:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80008dc:	208e      	movs	r0, #142	; 0x8e
 80008de:	f7ff ff2f 	bl	8000740 <BMP280_Read16LE>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <BMP280_Init+0x174>)
 80008e8:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80008ea:	2090      	movs	r0, #144	; 0x90
 80008ec:	f7ff ff28 	bl	8000740 <BMP280_Read16LE>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <BMP280_Init+0x178>)
 80008f6:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80008f8:	2092      	movs	r0, #146	; 0x92
 80008fa:	f7ff ff21 	bl	8000740 <BMP280_Read16LE>
 80008fe:	4603      	mov	r3, r0
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <BMP280_Init+0x17c>)
 8000904:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8000906:	2094      	movs	r0, #148	; 0x94
 8000908:	f7ff ff1a 	bl	8000740 <BMP280_Read16LE>
 800090c:	4603      	mov	r3, r0
 800090e:	b21a      	sxth	r2, r3
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <BMP280_Init+0x180>)
 8000912:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8000914:	2096      	movs	r0, #150	; 0x96
 8000916:	f7ff ff13 	bl	8000740 <BMP280_Read16LE>
 800091a:	4603      	mov	r3, r0
 800091c:	b21a      	sxth	r2, r3
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <BMP280_Init+0x184>)
 8000920:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8000922:	2098      	movs	r0, #152	; 0x98
 8000924:	f7ff ff0c 	bl	8000740 <BMP280_Read16LE>
 8000928:	4603      	mov	r3, r0
 800092a:	b21a      	sxth	r2, r3
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <BMP280_Init+0x188>)
 800092e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8000930:	209a      	movs	r0, #154	; 0x9a
 8000932:	f7ff ff05 	bl	8000740 <BMP280_Read16LE>
 8000936:	4603      	mov	r3, r0
 8000938:	b21a      	sxth	r2, r3
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <BMP280_Init+0x18c>)
 800093c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800093e:	209c      	movs	r0, #156	; 0x9c
 8000940:	f7ff fefe 	bl	8000740 <BMP280_Read16LE>
 8000944:	4603      	mov	r3, r0
 8000946:	b21a      	sxth	r2, r3
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <BMP280_Init+0x190>)
 800094a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800094c:	209e      	movs	r0, #158	; 0x9e
 800094e:	f7ff fef7 	bl	8000740 <BMP280_Read16LE>
 8000952:	4603      	mov	r3, r0
 8000954:	b21a      	sxth	r2, r3
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <BMP280_Init+0x194>)
 8000958:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	015b      	lsls	r3, r3, #5
 800095e:	b25a      	sxtb	r2, r3
 8000960:	78bb      	ldrb	r3, [r7, #2]
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	b25b      	sxtb	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b25a      	sxtb	r2, r3
 800096a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800096e:	4313      	orrs	r3, r2
 8000970:	b25b      	sxtb	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	20f4      	movs	r0, #244	; 0xf4
 8000978:	f7ff fefc 	bl	8000774 <BMP280_Write8>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000023c 	.word	0x2000023c
 8000988:	40020000 	.word	0x40020000
 800098c:	20000243 	.word	0x20000243
 8000990:	20000242 	.word	0x20000242
 8000994:	2000022e 	.word	0x2000022e
 8000998:	20000240 	.word	0x20000240
 800099c:	20000230 	.word	0x20000230
 80009a0:	20000228 	.word	0x20000228
 80009a4:	20000234 	.word	0x20000234
 80009a8:	2000022a 	.word	0x2000022a
 80009ac:	20000244 	.word	0x20000244
 80009b0:	20000248 	.word	0x20000248
 80009b4:	20000232 	.word	0x20000232
 80009b8:	20000238 	.word	0x20000238
 80009bc:	2000022c 	.word	0x2000022c
 80009c0:	20000236 	.word	0x20000236
 80009c4:	20000246 	.word	0x20000246

080009c8 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <BMP280_ReadTemperature+0xfc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d16d      	bne.n	8000ab2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80009d6:	20f4      	movs	r0, #244	; 0xf4
 80009d8:	f7ff fe56 	bl	8000688 <BMP280_Read8>
 80009dc:	4603      	mov	r3, r0
 80009de:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	f023 0303 	bic.w	r3, r3, #3
 80009e6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80009e8:	7dfb      	ldrb	r3, [r7, #23]
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	4619      	mov	r1, r3
 80009f4:	20f4      	movs	r0, #244	; 0xf4
 80009f6:	f7ff febd 	bl	8000774 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80009fa:	20f4      	movs	r0, #244	; 0xf4
 80009fc:	f7ff fe44 	bl	8000688 <BMP280_Read8>
 8000a00:	4603      	mov	r3, r0
 8000a02:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8000a04:	7dbb      	ldrb	r3, [r7, #22]
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8000a0c:	7dbb      	ldrb	r3, [r7, #22]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d14f      	bne.n	8000ab2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8000a12:	20f4      	movs	r0, #244	; 0xf4
 8000a14:	f7ff fe38 	bl	8000688 <BMP280_Read8>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8000a1c:	7dbb      	ldrb	r3, [r7, #22]
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8000a24:	7dbb      	ldrb	r3, [r7, #22]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d000      	beq.n	8000a2c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8000a2a:	e7f2      	b.n	8000a12 <BMP280_ReadTemperature+0x4a>
				  break;
 8000a2c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8000a2e:	20fa      	movs	r0, #250	; 0xfa
 8000a30:	f7ff fece 	bl	80007d0 <BMP280_Read24>
 8000a34:	4603      	mov	r3, r0
 8000a36:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	111b      	asrs	r3, r3, #4
 8000a3c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	10da      	asrs	r2, r3, #3
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <BMP280_ReadTemperature+0x100>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <BMP280_ReadTemperature+0x104>)
 8000a4c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	12db      	asrs	r3, r3, #11
 8000a56:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	111b      	asrs	r3, r3, #4
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <BMP280_ReadTemperature+0x100>)
 8000a5e:	8812      	ldrh	r2, [r2, #0]
 8000a60:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	1112      	asrs	r2, r2, #4
 8000a66:	4918      	ldr	r1, [pc, #96]	; (8000ac8 <BMP280_ReadTemperature+0x100>)
 8000a68:	8809      	ldrh	r1, [r1, #0]
 8000a6a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000a6c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000a70:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <BMP280_ReadTemperature+0x108>)
 8000a74:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8000a7c:	139b      	asrs	r3, r3, #14
 8000a7e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <BMP280_ReadTemperature+0x10c>)
 8000a88:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <BMP280_ReadTemperature+0x10c>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	3380      	adds	r3, #128	; 0x80
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8000aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000ad8 <BMP280_ReadTemperature+0x110>
 8000aac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ab0:	e001      	b.n	8000ab6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8000ab2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000adc <BMP280_ReadTemperature+0x114>
 8000ab6:	eef0 7a47 	vmov.f32	s15, s14
}
 8000aba:	eeb0 0a67 	vmov.f32	s0, s15
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000243 	.word	0x20000243
 8000ac8:	20000240 	.word	0x20000240
 8000acc:	20000230 	.word	0x20000230
 8000ad0:	20000228 	.word	0x20000228
 8000ad4:	2000024c 	.word	0x2000024c
 8000ad8:	42c80000 	.word	0x42c80000
 8000adc:	c2c60000 	.word	0xc2c60000

08000ae0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8000ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ae4:	b09c      	sub	sp, #112	; 0x70
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000aea:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8000aec:	f7ff ff6c 	bl	80009c8 <BMP280_ReadTemperature>
 8000af0:	eef0 7a40 	vmov.f32	s15, s0
 8000af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000af6:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8000afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000afc:	edd3 7a00 	vldr	s15, [r3]
 8000b00:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000cd0 <BMP280_ReadTemperatureAndPressure+0x1f0>
 8000b04:	eef4 7a47 	vcmp.f32	s15, s14
 8000b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0c:	d101      	bne.n	8000b12 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8000b0e:	23ff      	movs	r3, #255	; 0xff
 8000b10:	e1d8      	b.n	8000ec4 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8000b12:	20f7      	movs	r0, #247	; 0xf7
 8000b14:	f7ff fe5c 	bl	80007d0 <BMP280_Read24>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8000b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b1e:	111b      	asrs	r3, r3, #4
 8000b20:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 8000b22:	4b6c      	ldr	r3, [pc, #432]	; (8000cd4 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b2c:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8000b30:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000b34:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 8000b38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b3c:	fb03 f102 	mul.w	r1, r3, r2
 8000b40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b44:	fb03 f302 	mul.w	r3, r3, r2
 8000b48:	18ca      	adds	r2, r1, r3
 8000b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b4c:	fba3 4503 	umull	r4, r5, r3, r3
 8000b50:	1953      	adds	r3, r2, r5
 8000b52:	461d      	mov	r5, r3
 8000b54:	4b60      	ldr	r3, [pc, #384]	; (8000cd8 <BMP280_ReadTemperatureAndPressure+0x1f8>)
 8000b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b60:	fb02 f005 	mul.w	r0, r2, r5
 8000b64:	fb04 f103 	mul.w	r1, r4, r3
 8000b68:	4401      	add	r1, r0
 8000b6a:	fba4 2302 	umull	r2, r3, r4, r2
 8000b6e:	4419      	add	r1, r3
 8000b70:	460b      	mov	r3, r1
 8000b72:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8000b76:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8000b7a:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8000b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b86:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b88:	fb03 f001 	mul.w	r0, r3, r1
 8000b8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000b8e:	fb02 f101 	mul.w	r1, r2, r1
 8000b92:	4408      	add	r0, r1
 8000b94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b96:	fba1 2302 	umull	r2, r3, r1, r2
 8000b9a:	18c1      	adds	r1, r0, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	f04f 0100 	mov.w	r1, #0
 8000ba6:	0459      	lsls	r1, r3, #17
 8000ba8:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8000bac:	0450      	lsls	r0, r2, #17
 8000bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000bb2:	eb12 0800 	adds.w	r8, r2, r0
 8000bb6:	eb43 0901 	adc.w	r9, r3, r1
 8000bba:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 8000bbe:	4b48      	ldr	r3, [pc, #288]	; (8000ce0 <BMP280_ReadTemperatureAndPressure+0x200>)
 8000bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	f04f 0100 	mov.w	r1, #0
 8000bd2:	00d1      	lsls	r1, r2, #3
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000bda:	1814      	adds	r4, r2, r0
 8000bdc:	61bc      	str	r4, [r7, #24]
 8000bde:	414b      	adcs	r3, r1
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000be6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000bea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bee:	fb03 f102 	mul.w	r1, r3, r2
 8000bf2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bf6:	fb03 f302 	mul.w	r3, r3, r2
 8000bfa:	18ca      	adds	r2, r1, r3
 8000bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bfe:	fba3 4503 	umull	r4, r5, r3, r3
 8000c02:	1953      	adds	r3, r2, r5
 8000c04:	461d      	mov	r5, r3
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <BMP280_ReadTemperatureAndPressure+0x204>)
 8000c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000c12:	fb02 f005 	mul.w	r0, r2, r5
 8000c16:	fb04 f103 	mul.w	r1, r4, r3
 8000c1a:	4401      	add	r1, r0
 8000c1c:	fba4 2302 	umull	r2, r3, r4, r2
 8000c20:	4419      	add	r1, r3
 8000c22:	460b      	mov	r3, r1
 8000c24:	f04f 0800 	mov.w	r8, #0
 8000c28:	f04f 0900 	mov.w	r9, #0
 8000c2c:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8000c30:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8000c34:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <BMP280_ReadTemperatureAndPressure+0x208>)
 8000c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000c44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c46:	fb03 f001 	mul.w	r0, r3, r1
 8000c4a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000c4c:	fb02 f101 	mul.w	r1, r2, r1
 8000c50:	1844      	adds	r4, r0, r1
 8000c52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c54:	fba1 0102 	umull	r0, r1, r1, r2
 8000c58:	1863      	adds	r3, r4, r1
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 0200 	mov.w	r2, #0
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	030b      	lsls	r3, r1, #12
 8000c66:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8000c6a:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8000c6c:	eb18 0102 	adds.w	r1, r8, r2
 8000c70:	6139      	str	r1, [r7, #16]
 8000c72:	eb49 0303 	adc.w	r3, r9, r3
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000c7c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8000c80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000c84:	1c11      	adds	r1, r2, #0
 8000c86:	6439      	str	r1, [r7, #64]	; 0x40
 8000c88:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <BMP280_ReadTemperatureAndPressure+0x20c>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	fb02 f001 	mul.w	r0, r2, r1
 8000ca2:	4621      	mov	r1, r4
 8000ca4:	fb01 f103 	mul.w	r1, r1, r3
 8000ca8:	4401      	add	r1, r0
 8000caa:	4620      	mov	r0, r4
 8000cac:	fba0 2302 	umull	r2, r3, r0, r2
 8000cb0:	4419      	add	r1, r3
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	f04f 0000 	mov.w	r0, #0
 8000cb8:	f04f 0100 	mov.w	r1, #0
 8000cbc:	1058      	asrs	r0, r3, #1
 8000cbe:	17d9      	asrs	r1, r3, #31
 8000cc0:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 8000cc4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	d111      	bne.n	8000cf0 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e0f9      	b.n	8000ec4 <BMP280_ReadTemperatureAndPressure+0x3e4>
 8000cd0:	c2c60000 	.word	0xc2c60000
 8000cd4:	2000024c 	.word	0x2000024c
 8000cd8:	20000238 	.word	0x20000238
 8000cdc:	20000232 	.word	0x20000232
 8000ce0:	20000248 	.word	0x20000248
 8000ce4:	20000244 	.word	0x20000244
 8000ce8:	2000022a 	.word	0x2000022a
 8000cec:	20000234 	.word	0x20000234
	  }
	  p = 1048576 - adc_P;
 8000cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cf2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cfc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8000d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d02:	105b      	asrs	r3, r3, #1
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d08:	07db      	lsls	r3, r3, #31
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000d10:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8000d14:	4621      	mov	r1, r4
 8000d16:	ebb1 0a02 	subs.w	sl, r1, r2
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	eb61 0b03 	sbc.w	fp, r1, r3
 8000d20:	4652      	mov	r2, sl
 8000d22:	465b      	mov	r3, fp
 8000d24:	1891      	adds	r1, r2, r2
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	415b      	adcs	r3, r3
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d30:	eb12 020a 	adds.w	r2, r2, sl
 8000d34:	eb43 030b 	adc.w	r3, r3, fp
 8000d38:	f04f 0000 	mov.w	r0, #0
 8000d3c:	f04f 0100 	mov.w	r1, #0
 8000d40:	0199      	lsls	r1, r3, #6
 8000d42:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8000d46:	0190      	lsls	r0, r2, #6
 8000d48:	1812      	adds	r2, r2, r0
 8000d4a:	eb41 0303 	adc.w	r3, r1, r3
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	f04f 0100 	mov.w	r1, #0
 8000d56:	0099      	lsls	r1, r3, #2
 8000d58:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d5c:	0090      	lsls	r0, r2, #2
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	eb12 020a 	adds.w	r2, r2, sl
 8000d66:	eb43 030b 	adc.w	r3, r3, fp
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	f04f 0100 	mov.w	r1, #0
 8000d72:	0099      	lsls	r1, r3, #2
 8000d74:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d78:	0090      	lsls	r0, r2, #2
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	eb12 010a 	adds.w	r1, r2, sl
 8000d82:	6339      	str	r1, [r7, #48]	; 0x30
 8000d84:	eb43 030b 	adc.w	r3, r3, fp
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000d8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000d92:	f7ff faad 	bl	80002f0 <__aeabi_ldivmod>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 8000da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da4:	b218      	sxth	r0, r3
 8000da6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000daa:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	0b62      	lsrs	r2, r4, #13
 8000db8:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8000dbc:	136b      	asrs	r3, r5, #13
 8000dbe:	fb02 f501 	mul.w	r5, r2, r1
 8000dc2:	fb00 f403 	mul.w	r4, r0, r3
 8000dc6:	442c      	add	r4, r5
 8000dc8:	fba0 0102 	umull	r0, r1, r0, r2
 8000dcc:	1863      	adds	r3, r4, r1
 8000dce:	4619      	mov	r1, r3
 8000dd0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	0b62      	lsrs	r2, r4, #13
 8000dde:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8000de2:	136b      	asrs	r3, r5, #13
 8000de4:	fb02 f501 	mul.w	r5, r2, r1
 8000de8:	fb00 f403 	mul.w	r4, r0, r3
 8000dec:	442c      	add	r4, r5
 8000dee:	fba0 0102 	umull	r0, r1, r0, r2
 8000df2:	1863      	adds	r3, r4, r1
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	0e42      	lsrs	r2, r0, #25
 8000e00:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e04:	164b      	asrs	r3, r1, #25
 8000e06:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8000e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000e18:	fb03 f001 	mul.w	r0, r3, r1
 8000e1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000e1e:	fb02 f101 	mul.w	r1, r2, r1
 8000e22:	1844      	adds	r4, r0, r1
 8000e24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000e26:	fba1 0102 	umull	r0, r1, r1, r2
 8000e2a:	1863      	adds	r3, r4, r1
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	0cc2      	lsrs	r2, r0, #19
 8000e38:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e3c:	14cb      	asrs	r3, r1, #19
 8000e3e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8000e42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000e4a:	1884      	adds	r4, r0, r2
 8000e4c:	62bc      	str	r4, [r7, #40]	; 0x28
 8000e4e:	eb41 0303 	adc.w	r3, r1, r3
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e58:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000e5c:	4621      	mov	r1, r4
 8000e5e:	1889      	adds	r1, r1, r2
 8000e60:	6239      	str	r1, [r7, #32]
 8000e62:	4629      	mov	r1, r5
 8000e64:	eb43 0101 	adc.w	r1, r3, r1
 8000e68:	6279      	str	r1, [r7, #36]	; 0x24
 8000e6a:	f04f 0000 	mov.w	r0, #0
 8000e6e:	f04f 0100 	mov.w	r1, #0
 8000e72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e76:	4623      	mov	r3, r4
 8000e78:	0a18      	lsrs	r0, r3, #8
 8000e7a:	462b      	mov	r3, r5
 8000e7c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000e80:	462b      	mov	r3, r5
 8000e82:	1219      	asrs	r1, r3, #8
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <BMP280_ReadTemperatureAndPressure+0x3f8>)
 8000e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8a:	b21c      	sxth	r4, r3
 8000e8c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	012b      	lsls	r3, r5, #4
 8000e9a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000e9e:	0122      	lsls	r2, r4, #4
 8000ea0:	1884      	adds	r4, r0, r2
 8000ea2:	603c      	str	r4, [r7, #0]
 8000ea4:	eb41 0303 	adc.w	r3, r1, r3
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000eae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 8000eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	da00      	bge.n	8000eba <BMP280_ReadTemperatureAndPressure+0x3da>
 8000eb8:	33ff      	adds	r3, #255	; 0xff
 8000eba:	121b      	asrs	r3, r3, #8
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec0:	601a      	str	r2, [r3, #0]

	  return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3770      	adds	r7, #112	; 0x70
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000246 	.word	0x20000246
 8000ed4:	20000236 	.word	0x20000236
 8000ed8:	2000022c 	.word	0x2000022c

08000edc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;

#define SLAVE_ADDRESS_LCD (0x27 << 1)

void lcd_send_cmd(char cmd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0); //nałożenie maski
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f023 030f 	bic.w	r3, r3, #15
 8000eec:	73fb      	strb	r3, [r7, #15]
	data_l = (cmd<<4);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 030c 	orr.w	r3, r3, #12
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	f043 030c 	orr.w	r3, r3, #12
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f1c:	f107 0208 	add.w	r2, r7, #8
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2304      	movs	r3, #4
 8000f26:	214e      	movs	r1, #78	; 0x4e
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <lcd_send_cmd+0x5c>)
 8000f2a:	f001 fc75 	bl	8002818 <HAL_I2C_Master_Transmit>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000254 	.word	0x20000254

08000f3c <lcd_send_data>:

void lcd_send_data(char data)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0); //nałożenie maski
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f023 030f 	bic.w	r3, r3, #15
 8000f4c:	73fb      	strb	r3, [r7, #15]
	data_l = (data<<4); //nałożenie maski
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 030d 	orr.w	r3, r3, #13
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f043 0309 	orr.w	r3, r3, #9
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	f043 030d 	orr.w	r3, r3, #13
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	f043 0309 	orr.w	r3, r3, #9
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f7c:	f107 0208 	add.w	r2, r7, #8
 8000f80:	2364      	movs	r3, #100	; 0x64
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2304      	movs	r3, #4
 8000f86:	214e      	movs	r1, #78	; 0x4e
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <lcd_send_data+0x5c>)
 8000f8a:	f001 fc45 	bl	8002818 <HAL_I2C_Master_Transmit>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000254 	.word	0x20000254

08000f9c <lcd_clear>:

void lcd_clear(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 8000fa2:	2080      	movs	r0, #128	; 0x80
 8000fa4:	f7ff ff9a 	bl	8000edc <lcd_send_cmd>
	for(int i = 0; i<70;i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	e005      	b.n	8000fba <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 8000fae:	2020      	movs	r0, #32
 8000fb0:	f7ff ffc4 	bl	8000f3c <lcd_send_data>
	for(int i = 0; i<70;i++)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b45      	cmp	r3, #69	; 0x45
 8000fbe:	ddf6      	ble.n	8000fae <lcd_clear+0x12>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
	switch(row)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <lcd_put_cur+0x18>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <lcd_put_cur+0x22>
 8000fe0:	e009      	b.n	8000ff6 <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe8:	603b      	str	r3, [r7, #0]
			break;
 8000fea:	e004      	b.n	8000ff6 <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ff2:	603b      	str	r3, [r7, #0]
			break;
 8000ff4:	bf00      	nop
	}
	lcd_send_cmd(col);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff6e 	bl	8000edc <lcd_send_cmd>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001010:	e006      	b.n	8001020 <lcd_send_string+0x18>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff8e 	bl	8000f3c <lcd_send_data>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f4      	bne.n	8001012 <lcd_send_string+0xa>
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <lcd_init>:

void lcd_init (void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
	// Włączenie trybu 4-bitowego
	HAL_Delay(50);  // Odczekanie 40ms
 8001036:	2032      	movs	r0, #50	; 0x32
 8001038:	f000 ffd0 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x30); //Włączenie trybu 8-bitowego
 800103c:	2030      	movs	r0, #48	; 0x30
 800103e:	f7ff ff4d 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(5);  // Odczekanie 4.1ms
 8001042:	2005      	movs	r0, #5
 8001044:	f000 ffca 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x30);//Włączenie trybu 8-bitowego
 8001048:	2030      	movs	r0, #48	; 0x30
 800104a:	f7ff ff47 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(1);  // Odczekanie 100us
 800104e:	2001      	movs	r0, #1
 8001050:	f000 ffc4 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x30);//Włączenie trybu 8-bitowego
 8001054:	2030      	movs	r0, #48	; 0x30
 8001056:	f7ff ff41 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(10);
 800105a:	200a      	movs	r0, #10
 800105c:	f000 ffbe 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x20);  //init 4-bit mode
 8001060:	2020      	movs	r0, #32
 8001062:	f7ff ff3b 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f000 ffb8 	bl	8001fdc <HAL_Delay>

    //Inicjalizacja wyświetlacza
	lcd_send_cmd (0x28); // Ustawienie funkcji --> DL=0 (Tryb 4-bitowy), N = 1 (Włączenie 2 linii) F = 0 (5x8 znaków)
 800106c:	2028      	movs	r0, #40	; 0x28
 800106e:	f7ff ff35 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 ffb2 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x08); //Włączenie/wyłączenie wyświetlacza --> D=0,C=0, B=0  ---> Wyświetlacz wyłączony
 8001078:	2008      	movs	r0, #8
 800107a:	f7ff ff2f 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f000 ffac 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x01);  // Wyczyszczenie wyświetlacza
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ff29 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f000 ffa6 	bl	8001fdc <HAL_Delay>
	HAL_Delay(1);
 8001090:	2001      	movs	r0, #1
 8001092:	f000 ffa3 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x06); //Ustawienie trybu wejściowego --> I/D = 1 (Kursor inkrementujący) & S = 0 (Bez przesunięcia/spacji)
 8001096:	2006      	movs	r0, #6
 8001098:	f7ff ff20 	bl	8000edc <lcd_send_cmd>
	HAL_Delay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f000 ff9d 	bl	8001fdc <HAL_Delay>
	lcd_send_cmd (0x0C); //Włączenie/wyłączenie wyświetlacza --> D = 1, C and B = 0. (Mruganie kursora)
 80010a2:	200c      	movs	r0, #12
 80010a4:	f7ff ff1a 	bl	8000edc <lcd_send_cmd>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <calculate_discrete_pid>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calculate_discrete_pid(pid_tt* pid, float32_t setpoint, float32_t measured){
 80010ac:	b480      	push	{r7}
 80010ae:	b08d      	sub	sp, #52	; 0x34
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80010b8:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint-measured;
 80010c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//proportional part
	P = pid->p.Kp * error;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	ed93 7a05 	vldr	s14, [r3, #20]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 6a04 	vldr	s13, [r3, #16]
 80010f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a3a      	ldr	r2, [r7, #32]
 8001104:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki*integral*(pid->p.dt/2.0);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 7a01 	vldr	s14, [r3, #4]
 800110c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	edd3 7a03 	vldr	s15, [r3, #12]
 800111e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001122:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001126:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800112a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800112e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001132:	edc7 7a07 	vstr	s15, [r7, #28]

	//derivative part
	derivative = (error - pid->previous_error)/pid->p.dt;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	edd3 7a04 	vldr	s15, [r3, #16]
 800113c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001140:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	ed93 7a03 	vldr	s14, [r3, #12]
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001156:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd*derivative;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	edd3 7a02 	vldr	s15, [r3, #8]
 800115e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D;
 800116a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800116e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001176:	ed97 7a05 	vldr	s14, [r7, #20]
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	return u;
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	ee07 3a90 	vmov	s15, r3
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	3734      	adds	r7, #52	; 0x34
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b598      	push	{r3, r4, r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fec1 	bl	8001f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f8ce 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 fab4 	bl	8001710 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011a8:	f000 fa54 	bl	8001654 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011ac:	f000 fa82 	bl	80016b4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80011b0:	f000 f99a 	bl	80014e8 <MX_SPI1_Init>
  MX_TIM3_Init();
 80011b4:	f000 f9d6 	bl	8001564 <MX_TIM3_Init>
  MX_I2C4_Init();
 80011b8:	f000 f956 	bl	8001468 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011bc:	2108      	movs	r1, #8
 80011be:	4851      	ldr	r0, [pc, #324]	; (8001304 <main+0x16c>)
 80011c0:	f003 fde2 	bl	8004d88 <HAL_TIM_PWM_Start>
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80011c4:	2301      	movs	r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	2101      	movs	r1, #1
 80011ca:	484f      	ldr	r0, [pc, #316]	; (8001308 <main+0x170>)
 80011cc:	f7ff fb30 	bl	8000830 <BMP280_Init>
  lcd_init();
 80011d0:	f7ff ff2f 	bl	8001032 <lcd_init>
  HAL_UART_Receive_IT(&huart3, key,1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	494d      	ldr	r1, [pc, #308]	; (800130c <main+0x174>)
 80011d8:	484d      	ldr	r0, [pc, #308]	; (8001310 <main+0x178>)
 80011da:	f004 fdda 	bl	8005d92 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_ReadTemperatureAndPressure(&temp, &pres);
 80011de:	494d      	ldr	r1, [pc, #308]	; (8001314 <main+0x17c>)
 80011e0:	484d      	ldr	r0, [pc, #308]	; (8001318 <main+0x180>)
 80011e2:	f7ff fc7d 	bl	8000ae0 <BMP280_ReadTemperatureAndPressure>

	  	pwm_duty_f=(1000*calculate_discrete_pid(&pid1,temp_zad,temp));
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <main+0x184>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <main+0x180>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	eef0 0a47 	vmov.f32	s1, s14
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	4847      	ldr	r0, [pc, #284]	; (8001320 <main+0x188>)
 8001202:	f7ff ff53 	bl	80010ac <calculate_discrete_pid>
 8001206:	eef0 7a40 	vmov.f32	s15, s0
 800120a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001324 <main+0x18c>
 800120e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001212:	4b45      	ldr	r3, [pc, #276]	; (8001328 <main+0x190>)
 8001214:	edc3 7a00 	vstr	s15, [r3]

	  	if(pwm_duty_f<0)pwm_duty=0;
 8001218:	4b43      	ldr	r3, [pc, #268]	; (8001328 <main+0x190>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	d503      	bpl.n	8001230 <main+0x98>
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <main+0x194>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
 800122e:	e018      	b.n	8001262 <main+0xca>

	  	else if(pwm_duty_f>1000)pwm_duty=1000;
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <main+0x190>)
 8001232:	edd3 7a00 	vldr	s15, [r3]
 8001236:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001324 <main+0x18c>
 800123a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	dd04      	ble.n	800124e <main+0xb6>
 8001244:	4b39      	ldr	r3, [pc, #228]	; (800132c <main+0x194>)
 8001246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800124a:	801a      	strh	r2, [r3, #0]
 800124c:	e009      	b.n	8001262 <main+0xca>

	  	else pwm_duty = (uint16_t)pwm_duty_f;
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <main+0x190>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001258:	ee17 3a90 	vmov	r3, s15
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <main+0x194>)
 8001260:	801a      	strh	r2, [r3, #0]

	  	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <main+0x194>)
 8001264:	881a      	ldrh	r2, [r3, #0]
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <main+0x16c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
	  	HAL_Delay(1000);
 800126c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001270:	f000 feb4 	bl	8001fdc <HAL_Delay>

	  	sprintf((char*)text, "%.2f, ", temp);
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <main+0x198>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <main+0x180>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001284:	ec53 2b17 	vmov	r2, r3, d7
 8001288:	492a      	ldr	r1, [pc, #168]	; (8001334 <main+0x19c>)
 800128a:	f006 ff23 	bl	80080d4 <siprintf>
	  	HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <main+0x198>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461c      	mov	r4, r3
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <main+0x198>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ffd1 	bl	8000240 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	4621      	mov	r1, r4
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <main+0x178>)
 80012aa:	f004 fcdf 	bl	8005c6c <HAL_UART_Transmit>
	  	lcd_clear ();
 80012ae:	f7ff fe75 	bl	8000f9c <lcd_clear>
	  	lcd_put_cur(0, 0);
 80012b2:	2100      	movs	r1, #0
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fe88 	bl	8000fca <lcd_put_cur>
	  	sprintf((char*)text, "Temp. %.2f C", temp);
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <main+0x198>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <main+0x180>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ca:	ec53 2b17 	vmov	r2, r3, d7
 80012ce:	491a      	ldr	r1, [pc, #104]	; (8001338 <main+0x1a0>)
 80012d0:	f006 ff00 	bl	80080d4 <siprintf>
	  	lcd_send_string(text);
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <main+0x198>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe95 	bl	8001008 <lcd_send_string>
	  	lcd_put_cur(1, 0);
 80012de:	2100      	movs	r1, #0
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff fe72 	bl	8000fca <lcd_put_cur>
	  	sprintf((char*)text, "Zadana %ld C", temp_zad);
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <main+0x198>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <main+0x184>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4912      	ldr	r1, [pc, #72]	; (800133c <main+0x1a4>)
 80012f4:	f006 feee 	bl	80080d4 <siprintf>
	  	lcd_send_string(text);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <main+0x198>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe83 	bl	8001008 <lcd_send_string>
  {
 8001302:	e76c      	b.n	80011de <main+0x46>
 8001304:	2000072c 	.word	0x2000072c
 8001308:	20000780 	.word	0x20000780
 800130c:	2000077c 	.word	0x2000077c
 8001310:	200002a0 	.word	0x200002a0
 8001314:	20000250 	.word	0x20000250
 8001318:	20000728 	.word	0x20000728
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004
 8001324:	447a0000 	.word	0x447a0000
 8001328:	20000214 	.word	0x20000214
 800132c:	20000218 	.word	0x20000218
 8001330:	20000778 	.word	0x20000778
 8001334:	0800a470 	.word	0x0800a470
 8001338:	0800a478 	.word	0x0800a478
 800133c:	0800a488 	.word	0x0800a488

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0b8      	sub	sp, #224	; 0xe0
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800134a:	2234      	movs	r2, #52	; 0x34
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f006 fa76 	bl	8007840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2290      	movs	r2, #144	; 0x90
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f006 fa67 	bl	8007840 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001372:	f001 ff23 	bl	80031bc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b39      	ldr	r3, [pc, #228]	; (800145c <SystemClock_Config+0x11c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a38      	ldr	r2, [pc, #224]	; (800145c <SystemClock_Config+0x11c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <SystemClock_Config+0x11c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <SystemClock_Config+0x120>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001396:	4a32      	ldr	r2, [pc, #200]	; (8001460 <SystemClock_Config+0x120>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <SystemClock_Config+0x120>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c6:	2304      	movs	r3, #4
 80013c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80013cc:	2390      	movs	r3, #144	; 0x90
 80013ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80013d8:	2306      	movs	r3, #6
 80013da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fef7 	bl	80031dc <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80013f4:	f000 fa90 	bl	8001918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001418:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800141c:	2102      	movs	r1, #2
 800141e:	4618      	mov	r0, r3
 8001420:	f002 f98a 	bl	8003738 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800142a:	f000 fa75 	bl	8001918 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C4
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <SystemClock_Config+0x124>)
 8001430:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001432:	2300      	movs	r3, #0
 8001434:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001436:	2300      	movs	r3, #0
 8001438:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fb79 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001450:	f000 fa62 	bl	8001918 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	37e0      	adds	r7, #224	; 0xe0
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000
 8001464:	00220100 	.word	0x00220100

08001468 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_I2C4_Init+0x74>)
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <MX_I2C4_Init+0x78>)
 8001470:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_I2C4_Init+0x74>)
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <MX_I2C4_Init+0x7c>)
 8001476:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_I2C4_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_I2C4_Init+0x74>)
 8001480:	2201      	movs	r2, #1
 8001482:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_I2C4_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_I2C4_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C4_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C4_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C4_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <MX_I2C4_Init+0x74>)
 80014a4:	f001 f928 	bl	80026f8 <HAL_I2C_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80014ae:	f000 fa33 	bl	8001918 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <MX_I2C4_Init+0x74>)
 80014b6:	f001 fca1 	bl	8002dfc <HAL_I2CEx_ConfigAnalogFilter>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80014c0:	f000 fa2a 	bl	8001918 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_I2C4_Init+0x74>)
 80014c8:	f001 fce3 	bl	8002e92 <HAL_I2CEx_ConfigDigitalFilter>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80014d2:	f000 fa21 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000254 	.word	0x20000254
 80014e0:	40006000 	.word	0x40006000
 80014e4:	00808cd2 	.word	0x00808cd2

080014e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_SPI1_Init+0x74>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <MX_SPI1_Init+0x78>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_SPI1_Init+0x74>)
 80014f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_SPI1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_SPI1_Init+0x74>)
 8001502:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001506:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_SPI1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_SPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_SPI1_Init+0x74>)
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_SPI1_Init+0x74>)
 800151e:	2218      	movs	r2, #24
 8001520:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_SPI1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_SPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_SPI1_Init+0x74>)
 8001536:	2207      	movs	r2, #7
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_SPI1_Init+0x74>)
 8001542:	2208      	movs	r2, #8
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_SPI1_Init+0x74>)
 8001548:	f002 ff20 	bl	800438c <HAL_SPI_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 f9e1 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000780 	.word	0x20000780
 8001560:	40013000 	.word	0x40013000

08001564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_TIM3_Init+0xe8>)
 8001598:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <MX_TIM3_Init+0xec>)
 800159a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <MX_TIM3_Init+0xe8>)
 800159e:	2247      	movs	r2, #71	; 0x47
 80015a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_TIM3_Init+0xe8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <MX_TIM3_Init+0xe8>)
 80015aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_TIM3_Init+0xe8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <MX_TIM3_Init+0xe8>)
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015bc:	4823      	ldr	r0, [pc, #140]	; (800164c <MX_TIM3_Init+0xe8>)
 80015be:	f003 fb2b 	bl	8004c18 <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015c8:	f000 f9a6 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	4619      	mov	r1, r3
 80015d8:	481c      	ldr	r0, [pc, #112]	; (800164c <MX_TIM3_Init+0xe8>)
 80015da:	f003 fde3 	bl	80051a4 <HAL_TIM_ConfigClockSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015e4:	f000 f998 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e8:	4818      	ldr	r0, [pc, #96]	; (800164c <MX_TIM3_Init+0xe8>)
 80015ea:	f003 fb6c 	bl	8004cc6 <HAL_TIM_PWM_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015f4:	f000 f990 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4811      	ldr	r0, [pc, #68]	; (800164c <MX_TIM3_Init+0xe8>)
 8001608:	f004 fa54 	bl	8005ab4 <HAL_TIMEx_MasterConfigSynchronization>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001612:	f000 f981 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001616:	2360      	movs	r3, #96	; 0x60
 8001618:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	2208      	movs	r2, #8
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM3_Init+0xe8>)
 800162e:	f003 fca5 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001638:	f000 f96e 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM3_Init+0xe8>)
 800163e:	f000 fa5b 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 8001642:	bf00      	nop
 8001644:	3738      	adds	r7, #56	; 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000072c 	.word	0x2000072c
 8001650:	40000400 	.word	0x40000400

08001654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800165a:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <MX_USART3_UART_Init+0x5c>)
 800165c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001698:	f004 fa9a 	bl	8005bd0 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 f939 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002a0 	.word	0x200002a0
 80016b0:	40004800 	.word	0x40004800

080016b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c2:	2206      	movs	r2, #6
 80016c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016da:	2201      	movs	r2, #1
 80016dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f8:	f001 fc17 	bl	8002f2a <HAL_PCD_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 f909 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000324 	.word	0x20000324

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b77      	ldr	r3, [pc, #476]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a76      	ldr	r2, [pc, #472]	; (8001904 <MX_GPIO_Init+0x1f4>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b74      	ldr	r3, [pc, #464]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	4b71      	ldr	r3, [pc, #452]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a70      	ldr	r2, [pc, #448]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b6e      	ldr	r3, [pc, #440]	; (8001904 <MX_GPIO_Init+0x1f4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b6b      	ldr	r3, [pc, #428]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a6a      	ldr	r2, [pc, #424]	; (8001904 <MX_GPIO_Init+0x1f4>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b68      	ldr	r3, [pc, #416]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a64      	ldr	r2, [pc, #400]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b62      	ldr	r3, [pc, #392]	; (8001904 <MX_GPIO_Init+0x1f4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <MX_GPIO_Init+0x1f4>)
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <MX_GPIO_Init+0x1f4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b59      	ldr	r3, [pc, #356]	; (8001904 <MX_GPIO_Init+0x1f4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a58      	ldr	r2, [pc, #352]	; (8001904 <MX_GPIO_Init+0x1f4>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b56      	ldr	r3, [pc, #344]	; (8001904 <MX_GPIO_Init+0x1f4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b6:	4b53      	ldr	r3, [pc, #332]	; (8001904 <MX_GPIO_Init+0x1f4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a52      	ldr	r2, [pc, #328]	; (8001904 <MX_GPIO_Init+0x1f4>)
 80017bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b50      	ldr	r3, [pc, #320]	; (8001904 <MX_GPIO_Init+0x1f4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	484d      	ldr	r0, [pc, #308]	; (8001908 <MX_GPIO_Init+0x1f8>)
 80017d4:	f000 ff76 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f244 0181 	movw	r1, #16513	; 0x4081
 80017de:	484b      	ldr	r0, [pc, #300]	; (800190c <MX_GPIO_Init+0x1fc>)
 80017e0:	f000 ff70 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	4849      	ldr	r0, [pc, #292]	; (8001910 <MX_GPIO_Init+0x200>)
 80017ea:	f000 ff6b 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80017ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4843      	ldr	r0, [pc, #268]	; (8001914 <MX_GPIO_Init+0x204>)
 8001806:	f000 fdb1 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800180a:	2332      	movs	r3, #50	; 0x32
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800181a:	230b      	movs	r3, #11
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	483b      	ldr	r0, [pc, #236]	; (8001914 <MX_GPIO_Init+0x204>)
 8001826:	f000 fda1 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800182a:	2386      	movs	r3, #134	; 0x86
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800183a:	230b      	movs	r3, #11
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4830      	ldr	r0, [pc, #192]	; (8001908 <MX_GPIO_Init+0x1f8>)
 8001846:	f000 fd91 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184a:	2310      	movs	r3, #16
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4829      	ldr	r0, [pc, #164]	; (8001908 <MX_GPIO_Init+0x1f8>)
 8001862:	f000 fd83 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001866:	f244 0381 	movw	r3, #16513	; 0x4081
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	4823      	ldr	r0, [pc, #140]	; (800190c <MX_GPIO_Init+0x1fc>)
 8001880:	f000 fd74 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001896:	230b      	movs	r3, #11
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	481a      	ldr	r0, [pc, #104]	; (800190c <MX_GPIO_Init+0x1fc>)
 80018a2:	f000 fd63 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018a6:	2340      	movs	r3, #64	; 0x40
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4814      	ldr	r0, [pc, #80]	; (8001910 <MX_GPIO_Init+0x200>)
 80018be:	f000 fd55 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	480e      	ldr	r0, [pc, #56]	; (8001910 <MX_GPIO_Init+0x200>)
 80018d6:	f000 fd49 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ec:	230b      	movs	r3, #11
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_GPIO_Init+0x200>)
 80018f8:	f000 fd38 	bl	800236c <HAL_GPIO_Init>

}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40021800 	.word	0x40021800
 8001914:	40020800 	.word	0x40020800

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x44>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_MspInit+0x44>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x44>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x44>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_MspInit+0x44>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_MspInit+0x44>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_I2C_MspInit+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d128      	bne.n	80019e0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_I2C_MspInit+0x80>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <HAL_I2C_MspInit+0x80>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_I2C_MspInit+0x80>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80019b8:	2304      	movs	r3, #4
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <HAL_I2C_MspInit+0x84>)
 80019c4:	f000 fcd2 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_I2C_MspInit+0x80>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_I2C_MspInit+0x80>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_I2C_MspInit+0x80>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40006000 	.word	0x40006000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40021400 	.word	0x40021400

080019f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <HAL_SPI_MspInit+0xb4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d143      	bne.n	8001a9e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_SPI_MspInit+0xb8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a5e:	2360      	movs	r3, #96	; 0x60
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <HAL_SPI_MspInit+0xbc>)
 8001a7a:	f000 fc77 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <HAL_SPI_MspInit+0xc0>)
 8001a9a:	f000 fc67 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40013000 	.word	0x40013000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020c00 	.word	0x40020c00

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_TIM_Base_MspInit+0x38>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_TIM_Base_MspInit+0x3c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40000400 	.word	0x40000400
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d11c      	bne.n	8001b54 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_TIM_MspPostInit+0x6c>)
 8001b50:	f000 fc0c 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020800 	.word	0x40020800

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0x8c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d130      	bne.n	8001bec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_UART_MspInit+0x90>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4809      	ldr	r0, [pc, #36]	; (8001bfc <HAL_UART_MspInit+0x94>)
 8001bd8:	f000 fbc8 	bl	800236c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	2027      	movs	r0, #39	; 0x27
 8001be2:	f000 fafa 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001be6:	2027      	movs	r0, #39	; 0x27
 8001be8:	f000 fb13 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40004800 	.word	0x40004800
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020c00 	.word	0x40020c00

08001c00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c20:	d141      	bne.n	8001ca6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4817      	ldr	r0, [pc, #92]	; (8001cb4 <HAL_PCD_MspInit+0xb4>)
 8001c58:	f000 fb88 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4810      	ldr	r0, [pc, #64]	; (8001cb4 <HAL_PCD_MspInit+0xb4>)
 8001c72:	f000 fb7b 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c80:	6353      	str	r3, [r2, #52]	; 0x34
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_PCD_MspInit+0xb0>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <NMI_Handler+0x4>

08001cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler+0x4>

08001cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d04:	f000 f94a 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART3_IRQHandler+0x10>)
 8001d12:	f004 f88d 	bl	8005e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200002a0 	.word	0x200002a0

08001d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_kill>:

int _kill(int pid, int sig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d3a:	f005 fd57 	bl	80077ec <__errno>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2216      	movs	r2, #22
 8001d42:	601a      	str	r2, [r3, #0]
	return -1;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_exit>:

void _exit (int status)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffe7 	bl	8001d30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d62:	e7fe      	b.n	8001d62 <_exit+0x12>

08001d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e00a      	b.n	8001d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d76:	f3af 8000 	nop.w
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	b2ca      	uxtb	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dbf0      	blt.n	8001d76 <_read+0x12>
	}

return len;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e009      	b.n	8001dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf1      	blt.n	8001db0 <_write+0x12>
	}
	return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_close>:

int _close(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f005 fcbc 	bl	80077ec <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20080000 	.word	0x20080000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	2000021c 	.word	0x2000021c
 8001ea8:	200007f8 	.word	0x200007f8

08001eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001efa:	f7ff ffd7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f005 fc7b 	bl	80077f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff f949 	bl	8001198 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001f14:	0800a8a4 	.word	0x0800a8a4
  ldr r2, =_sbss
 8001f18:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001f1c:	200007f8 	.word	0x200007f8

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>

08001f22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f94c 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 f805 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f32:	f7ff fcf7 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f967 	bl	800222e <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f92f 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000001c 	.word	0x2000001c
 8001f94:	20000024 	.word	0x20000024
 8001f98:	20000020 	.word	0x20000020

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000024 	.word	0x20000024
 8001fc0:	200007e4 	.word	0x200007e4

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200007e4 	.word	0x200007e4

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff ffee 	bl	8001fc4 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000024 	.word	0x20000024

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <__NVIC_SetPriorityGrouping+0x40>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	4313      	orrs	r3, r2
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x40>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00
 8002068:	05fa0000 	.word	0x05fa0000

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff3e 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff31 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff feb6 	bl	8001fc4 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d008      	beq.n	8002278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e052      	b.n	800231e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0216 	bic.w	r2, r2, #22
 8002286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_DMA_Abort+0x62>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0208 	bic.w	r2, r2, #8
 80022b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	e013      	b.n	80022f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ca:	f7ff fe7b 	bl	8001fc4 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d90c      	bls.n	80022f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e015      	b.n	800231e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e4      	bne.n	80022ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	223f      	movs	r2, #63	; 0x3f
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e00c      	b.n	800235e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2205      	movs	r2, #5
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e175      	b.n	8002678 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	f040 8164 	bne.w	8002672 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d005      	beq.n	80023c2 <HAL_GPIO_Init+0x56>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d130      	bne.n	8002424 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f8:	2201      	movs	r2, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 0201 	and.w	r2, r3, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b03      	cmp	r3, #3
 800242e:	d017      	beq.n	8002460 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d123      	bne.n	80024b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	69b9      	ldr	r1, [r7, #24]
 80024b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0203 	and.w	r2, r3, #3
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80be 	beq.w	8002672 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	4b66      	ldr	r3, [pc, #408]	; (8002690 <HAL_GPIO_Init+0x324>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_GPIO_Init+0x324>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b63      	ldr	r3, [pc, #396]	; (8002690 <HAL_GPIO_Init+0x324>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800250e:	4a61      	ldr	r2, [pc, #388]	; (8002694 <HAL_GPIO_Init+0x328>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_GPIO_Init+0x32c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d037      	beq.n	80025aa <HAL_GPIO_Init+0x23e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a57      	ldr	r2, [pc, #348]	; (800269c <HAL_GPIO_Init+0x330>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d031      	beq.n	80025a6 <HAL_GPIO_Init+0x23a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_GPIO_Init+0x334>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02b      	beq.n	80025a2 <HAL_GPIO_Init+0x236>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_GPIO_Init+0x338>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d025      	beq.n	800259e <HAL_GPIO_Init+0x232>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <HAL_GPIO_Init+0x33c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01f      	beq.n	800259a <HAL_GPIO_Init+0x22e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a53      	ldr	r2, [pc, #332]	; (80026ac <HAL_GPIO_Init+0x340>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x22a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a52      	ldr	r2, [pc, #328]	; (80026b0 <HAL_GPIO_Init+0x344>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x226>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a51      	ldr	r2, [pc, #324]	; (80026b4 <HAL_GPIO_Init+0x348>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x222>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a50      	ldr	r2, [pc, #320]	; (80026b8 <HAL_GPIO_Init+0x34c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x21e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4f      	ldr	r2, [pc, #316]	; (80026bc <HAL_GPIO_Init+0x350>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x21a>
 8002582:	2309      	movs	r3, #9
 8002584:	e012      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002586:	230a      	movs	r3, #10
 8002588:	e010      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800258a:	2308      	movs	r3, #8
 800258c:	e00e      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800258e:	2307      	movs	r3, #7
 8002590:	e00c      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002592:	2306      	movs	r3, #6
 8002594:	e00a      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002596:	2305      	movs	r3, #5
 8002598:	e008      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800259a:	2304      	movs	r3, #4
 800259c:	e006      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800259e:	2303      	movs	r3, #3
 80025a0:	e004      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025aa:	2300      	movs	r3, #0
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f002 0203 	and.w	r2, r2, #3
 80025b2:	0092      	lsls	r2, r2, #2
 80025b4:	4093      	lsls	r3, r2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025bc:	4935      	ldr	r1, [pc, #212]	; (8002694 <HAL_GPIO_Init+0x328>)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_GPIO_Init+0x354>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ee:	4a34      	ldr	r2, [pc, #208]	; (80026c0 <HAL_GPIO_Init+0x354>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_GPIO_Init+0x354>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002618:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <HAL_GPIO_Init+0x354>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800261e:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_GPIO_Init+0x354>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <HAL_GPIO_Init+0x354>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_GPIO_Init+0x354>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800266c:	4a14      	ldr	r2, [pc, #80]	; (80026c0 <HAL_GPIO_Init+0x354>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b0f      	cmp	r3, #15
 800267c:	f67f ae86 	bls.w	800238c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40021400 	.word	0x40021400
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40021c00 	.word	0x40021c00
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40022400 	.word	0x40022400
 80026c0:	40013c00 	.word	0x40013c00

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff f924 	bl	800196c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	e006      	b.n	8002780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800277e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d104      	bne.n	8002792 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_I2C_Init+0x11c>)
 800279e:	430b      	orrs	r3, r1
 80027a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69d9      	ldr	r1, [r3, #28]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	02008000 	.word	0x02008000

08002818 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	460b      	mov	r3, r1
 8002826:	817b      	strh	r3, [r7, #10]
 8002828:	4613      	mov	r3, r2
 800282a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	f040 80da 	bne.w	80029ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_I2C_Master_Transmit+0x30>
 8002844:	2302      	movs	r3, #2
 8002846:	e0d3      	b.n	80029f0 <HAL_I2C_Master_Transmit+0x1d8>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002850:	f7ff fbb8 	bl	8001fc4 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2319      	movs	r3, #25
 800285c:	2201      	movs	r2, #1
 800285e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f8f0 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0be      	b.n	80029f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2221      	movs	r2, #33	; 0x21
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2210      	movs	r2, #16
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2bff      	cmp	r3, #255	; 0xff
 80028a2:	d90e      	bls.n	80028c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	8979      	ldrh	r1, [r7, #10]
 80028b2:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fa6c 	bl	8002d98 <I2C_TransferConfig>
 80028c0:	e06c      	b.n	800299c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	4b48      	ldr	r3, [pc, #288]	; (80029f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa5b 	bl	8002d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028e2:	e05b      	b.n	800299c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6a39      	ldr	r1, [r7, #32]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f8ed 	bl	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e07b      	b.n	80029f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d034      	beq.n	800299c <HAL_I2C_Master_Transmit+0x184>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d130      	bne.n	800299c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f87f 	bl	8002a48 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e04d      	b.n	80029f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2bff      	cmp	r3, #255	; 0xff
 800295c:	d90e      	bls.n	800297c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	22ff      	movs	r2, #255	; 0xff
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fa0f 	bl	8002d98 <I2C_TransferConfig>
 800297a:	e00f      	b.n	800299c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	b2da      	uxtb	r2, r3
 800298c:	8979      	ldrh	r1, [r7, #10]
 800298e:	2300      	movs	r3, #0
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f9fe 	bl	8002d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d19e      	bne.n	80028e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	6a39      	ldr	r1, [r7, #32]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8cc 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e01a      	b.n	80029f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2220      	movs	r2, #32
 80029c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_I2C_Master_Transmit+0x1e4>)
 80029ce:	400b      	ands	r3, r1
 80029d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	80002000 	.word	0x80002000
 80029fc:	fe00e800 	.word	0xfe00e800

08002a00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d103      	bne.n	8002a1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	619a      	str	r2, [r3, #24]
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a58:	e022      	b.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d01e      	beq.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7ff faaf 	bl	8001fc4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d113      	bne.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0220 	orr.w	r2, r3, #32
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e00f      	b.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d0cd      	beq.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ad4:	e02c      	b.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f870 	bl	8002bc0 <I2C_IsErrorOccurred>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e02a      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d01e      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7ff fa67 	bl	8001fc4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d113      	bne.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d1cb      	bne.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b54:	e028      	b.n	8002ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f830 	bl	8002bc0 <I2C_IsErrorOccurred>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e026      	b.n	8002bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7ff fa2b 	bl	8001fc4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d113      	bne.n	8002ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d1cf      	bne.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d075      	beq.n	8002cd8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bf4:	e056      	b.n	8002ca4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d052      	beq.n	8002ca4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7ff f9e1 	bl	8001fc4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_IsErrorOccurred+0x54>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d147      	bne.n	8002ca4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c36:	d12e      	bne.n	8002c96 <I2C_IsErrorOccurred+0xd6>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3e:	d02a      	beq.n	8002c96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d027      	beq.n	8002c96 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c54:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c56:	f7ff f9b5 	bl	8001fc4 <HAL_GetTick>
 8002c5a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c5c:	e01b      	b.n	8002c96 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c5e:	f7ff f9b1 	bl	8001fc4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b19      	cmp	r3, #25
 8002c6a:	d914      	bls.n	8002c96 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d1dc      	bne.n	8002c5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d003      	beq.n	8002cba <I2C_IsErrorOccurred+0xfa>
 8002cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d09d      	beq.n	8002bf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff fe56 	bl	8002a00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <I2C_IsErrorOccurred+0x1d4>)
 8002d60:	400b      	ands	r3, r1
 8002d62:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	fe00e800 	.word	0xfe00e800

08002d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	4613      	mov	r3, r2
 8002da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002db0:	7a7b      	ldrb	r3, [r7, #9]
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	0d5b      	lsrs	r3, r3, #21
 8002dd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <I2C_TransferConfig+0x60>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	ea02 0103 	and.w	r1, r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	03ff63ff 	.word	0x03ff63ff

08002dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d138      	bne.n	8002e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e032      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d139      	bne.n	8002f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e033      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2224      	movs	r2, #36	; 0x24
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2c:	b08f      	sub	sp, #60	; 0x3c
 8002f2e:	af0a      	add	r7, sp, #40	; 0x28
 8002f30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e116      	b.n	800316a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fe52 	bl	8001c00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 f9a0 	bl	80072c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	687e      	ldr	r6, [r7, #4]
 8002f88:	466d      	mov	r5, sp
 8002f8a:	f106 0410 	add.w	r4, r6, #16
 8002f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f9e:	1d33      	adds	r3, r6, #4
 8002fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa2:	6838      	ldr	r0, [r7, #0]
 8002fa4:	f004 f934 	bl	8007210 <USB_CoreInit>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0d7      	b.n	800316a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 f98e 	bl	80072e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e04a      	b.n	8003062 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	333d      	adds	r3, #61	; 0x3d
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	333c      	adds	r3, #60	; 0x3c
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	b298      	uxth	r0, r3
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3342      	adds	r3, #66	; 0x42
 8003008:	4602      	mov	r2, r0
 800300a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	333f      	adds	r3, #63	; 0x3f
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	3344      	adds	r3, #68	; 0x44
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	3348      	adds	r3, #72	; 0x48
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3350      	adds	r3, #80	; 0x50
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	3301      	adds	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	d3af      	bcc.n	8002fcc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e044      	b.n	80030fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	3301      	adds	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3b5      	bcc.n	8003072 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	687e      	ldr	r6, [r7, #4]
 800310e:	466d      	mov	r5, sp
 8003110:	f106 0410 	add.w	r4, r6, #16
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003120:	e885 0003 	stmia.w	r5, {r0, r1}
 8003124:	1d33      	adds	r3, r6, #4
 8003126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003128:	6838      	ldr	r0, [r7, #0]
 800312a:	f004 f927 	bl	800737c <USB_DevInit>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e014      	b.n	800316a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f80b 	bl	8003174 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f004 fae1 	bl	800772a <USB_DevDisconnect>

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003174 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	10000003 	.word	0x10000003

080031bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40007000 	.word	0x40007000

080031dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e29b      	b.n	800372a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8087 	beq.w	800330e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003200:	4b96      	ldr	r3, [pc, #600]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b04      	cmp	r3, #4
 800320a:	d00c      	beq.n	8003226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320c:	4b93      	ldr	r3, [pc, #588]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d112      	bne.n	800323e <HAL_RCC_OscConfig+0x62>
 8003218:	4b90      	ldr	r3, [pc, #576]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003224:	d10b      	bne.n	800323e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003226:	4b8d      	ldr	r3, [pc, #564]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d06c      	beq.n	800330c <HAL_RCC_OscConfig+0x130>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d168      	bne.n	800330c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e275      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x7a>
 8003248:	4b84      	ldr	r3, [pc, #528]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a83      	ldr	r2, [pc, #524]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e02e      	b.n	80032b4 <HAL_RCC_OscConfig+0xd8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x9c>
 800325e:	4b7f      	ldr	r3, [pc, #508]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7e      	ldr	r2, [pc, #504]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b7c      	ldr	r3, [pc, #496]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7b      	ldr	r2, [pc, #492]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xd8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0xc0>
 8003282:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a75      	ldr	r2, [pc, #468]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b73      	ldr	r3, [pc, #460]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a72      	ldr	r2, [pc, #456]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xd8>
 800329c:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6e      	ldr	r2, [pc, #440]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b6c      	ldr	r3, [pc, #432]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6b      	ldr	r2, [pc, #428]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fe82 	bl	8001fc4 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fe7e 	bl	8001fc4 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e229      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b61      	ldr	r3, [pc, #388]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xe8>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fe6e 	bl	8001fc4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fe6a 	bl	8001fc4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e215      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b57      	ldr	r3, [pc, #348]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x110>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d069      	beq.n	80033ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331a:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b4d      	ldr	r3, [pc, #308]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x190>
 8003332:	4b4a      	ldr	r3, [pc, #296]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x17a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1e9      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	493d      	ldr	r1, [pc, #244]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e040      	b.n	80033ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d023      	beq.n	80033bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a38      	ldr	r2, [pc, #224]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe fe20 	bl	8001fc4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003388:	f7fe fe1c 	bl	8001fc4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1c7      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4929      	ldr	r1, [pc, #164]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
 80033ba:	e018      	b.n	80033ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fdfc 	bl	8001fc4 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe fdf8 	bl	8001fc4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1a3      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d038      	beq.n	800346c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d019      	beq.n	8003436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fe fdd9 	bl	8001fc4 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003416:	f7fe fdd5 	bl	8001fc4 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e180      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800342a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x23a>
 8003434:	e01a      	b.n	800346c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_OscConfig+0x280>)
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_RCC_OscConfig+0x280>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7fe fdbf 	bl	8001fc4 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	e00a      	b.n	8003460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344a:	f7fe fdbb 	bl	8001fc4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d903      	bls.n	8003460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e166      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
 800345c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b92      	ldr	r3, [pc, #584]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ee      	bne.n	800344a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a4 	beq.w	80035c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347a:	4b8c      	ldr	r3, [pc, #560]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	4b89      	ldr	r3, [pc, #548]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a88      	ldr	r2, [pc, #544]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b86      	ldr	r3, [pc, #536]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a2:	4b83      	ldr	r3, [pc, #524]	; (80036b0 <HAL_RCC_OscConfig+0x4d4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d118      	bne.n	80034e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034ae:	4b80      	ldr	r3, [pc, #512]	; (80036b0 <HAL_RCC_OscConfig+0x4d4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7f      	ldr	r2, [pc, #508]	; (80036b0 <HAL_RCC_OscConfig+0x4d4>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fd83 	bl	8001fc4 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7fe fd7f 	bl	8001fc4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b64      	cmp	r3, #100	; 0x64
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e12a      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d4:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCC_OscConfig+0x4d4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x31a>
 80034e8:	4b70      	ldr	r3, [pc, #448]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a6f      	ldr	r2, [pc, #444]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	e02d      	b.n	8003552 <HAL_RCC_OscConfig+0x376>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x33c>
 80034fe:	4b6b      	ldr	r3, [pc, #428]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a6a      	ldr	r2, [pc, #424]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
 800350a:	4b68      	ldr	r3, [pc, #416]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a67      	ldr	r2, [pc, #412]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
 8003516:	e01c      	b.n	8003552 <HAL_RCC_OscConfig+0x376>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b05      	cmp	r3, #5
 800351e:	d10c      	bne.n	800353a <HAL_RCC_OscConfig+0x35e>
 8003520:	4b62      	ldr	r3, [pc, #392]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a61      	ldr	r2, [pc, #388]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003526:	f043 0304 	orr.w	r3, r3, #4
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a5e      	ldr	r2, [pc, #376]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	e00b      	b.n	8003552 <HAL_RCC_OscConfig+0x376>
 800353a:	4b5c      	ldr	r3, [pc, #368]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4a5b      	ldr	r2, [pc, #364]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
 8003546:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d015      	beq.n	8003586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7fe fd33 	bl	8001fc4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe fd2f 	bl	8001fc4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0d8      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ee      	beq.n	8003562 <HAL_RCC_OscConfig+0x386>
 8003584:	e014      	b.n	80035b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fe fd1d 	bl	8001fc4 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe fd19 	bl	8001fc4 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0c2      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a4:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1ee      	bne.n	800358e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b6:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a3c      	ldr	r2, [pc, #240]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80035bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80ae 	beq.w	8003728 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035cc:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d06d      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d14b      	bne.n	8003678 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e0:	4b32      	ldr	r3, [pc, #200]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a31      	ldr	r2, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fe fcea 	bl	8001fc4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe fce6 	bl	8001fc4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e091      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	3b01      	subs	r3, #1
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	071b      	lsls	r3, r3, #28
 800363e:	491b      	ldr	r1, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe fcb8 	bl	8001fc4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe fcb4 	bl	8001fc4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e05f      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x47c>
 8003676:	e057      	b.n	8003728 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 800367e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe fc9e 	bl	8001fc4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fe fc9a 	bl	8001fc4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e045      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x4b0>
 80036aa:	e03d      	b.n	8003728 <HAL_RCC_OscConfig+0x54c>
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036b4:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <HAL_RCC_OscConfig+0x558>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d030      	beq.n	8003724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d129      	bne.n	8003724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d122      	bne.n	8003724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d119      	bne.n	8003724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	3b01      	subs	r3, #1
 80036fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d10f      	bne.n	8003724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d107      	bne.n	8003724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0d0      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003750:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d910      	bls.n	8003780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b67      	ldr	r3, [pc, #412]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 020f 	bic.w	r2, r3, #15
 8003766:	4965      	ldr	r1, [pc, #404]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b63      	ldr	r3, [pc, #396]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0b8      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a58      	ldr	r2, [pc, #352]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a52      	ldr	r2, [pc, #328]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80037b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037bc:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	494d      	ldr	r1, [pc, #308]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d040      	beq.n	800385c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d115      	bne.n	800381a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fa:	4b41      	ldr	r3, [pc, #260]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e073      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06b      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 0203 	bic.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4936      	ldr	r1, [pc, #216]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382c:	f7fe fbca 	bl	8001fc4 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	e00a      	b.n	800384a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7fe fbc6 	bl	8001fc4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e053      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 020c 	and.w	r2, r3, #12
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	429a      	cmp	r2, r3
 800385a:	d1eb      	bne.n	8003834 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d210      	bcs.n	800388c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 020f 	bic.w	r2, r3, #15
 8003872:	4922      	ldr	r1, [pc, #136]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e032      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4916      	ldr	r1, [pc, #88]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	490e      	ldr	r1, [pc, #56]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ca:	f000 f821 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	490a      	ldr	r1, [pc, #40]	; (8003904 <HAL_RCC_ClockConfig+0x1cc>)
 80038dc:	5ccb      	ldrb	r3, [r1, r3]
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d0>)
 80038e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1d4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fb26 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023c00 	.word	0x40023c00
 8003900:	40023800 	.word	0x40023800
 8003904:	0800a498 	.word	0x0800a498
 8003908:	2000001c 	.word	0x2000001c
 800390c:	20000020 	.word	0x20000020

08003910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	2300      	movs	r3, #0
 8003922:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003928:	4b67      	ldr	r3, [pc, #412]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d00d      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x40>
 8003934:	2b08      	cmp	r3, #8
 8003936:	f200 80bd 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x34>
 800393e:	2b04      	cmp	r3, #4
 8003940:	d003      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x3a>
 8003942:	e0b7      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b61      	ldr	r3, [pc, #388]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003946:	60bb      	str	r3, [r7, #8]
      break;
 8003948:	e0b7      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394a:	4b61      	ldr	r3, [pc, #388]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800394c:	60bb      	str	r3, [r7, #8]
      break;
 800394e:	e0b4      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003950:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003958:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04d      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003966:	4b58      	ldr	r3, [pc, #352]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	099b      	lsrs	r3, r3, #6
 800396c:	461a      	mov	r2, r3
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003976:	f04f 0100 	mov.w	r1, #0
 800397a:	ea02 0800 	and.w	r8, r2, r0
 800397e:	ea03 0901 	and.w	r9, r3, r1
 8003982:	4640      	mov	r0, r8
 8003984:	4649      	mov	r1, r9
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	014b      	lsls	r3, r1, #5
 8003990:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003994:	0142      	lsls	r2, r0, #5
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	ebb0 0008 	subs.w	r0, r0, r8
 800399e:	eb61 0109 	sbc.w	r1, r1, r9
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	018b      	lsls	r3, r1, #6
 80039ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039b0:	0182      	lsls	r2, r0, #6
 80039b2:	1a12      	subs	r2, r2, r0
 80039b4:	eb63 0301 	sbc.w	r3, r3, r1
 80039b8:	f04f 0000 	mov.w	r0, #0
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	00d9      	lsls	r1, r3, #3
 80039c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039c6:	00d0      	lsls	r0, r2, #3
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	eb12 0208 	adds.w	r2, r2, r8
 80039d0:	eb43 0309 	adc.w	r3, r3, r9
 80039d4:	f04f 0000 	mov.w	r0, #0
 80039d8:	f04f 0100 	mov.w	r1, #0
 80039dc:	0259      	lsls	r1, r3, #9
 80039de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039e2:	0250      	lsls	r0, r2, #9
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	f7fc fccc 	bl	8000390 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e04a      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a02:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	ea02 0400 	and.w	r4, r2, r0
 8003a1a:	ea03 0501 	and.w	r5, r3, r1
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4629      	mov	r1, r5
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	014b      	lsls	r3, r1, #5
 8003a2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a30:	0142      	lsls	r2, r0, #5
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	1b00      	subs	r0, r0, r4
 8003a38:	eb61 0105 	sbc.w	r1, r1, r5
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	018b      	lsls	r3, r1, #6
 8003a46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a4a:	0182      	lsls	r2, r0, #6
 8003a4c:	1a12      	subs	r2, r2, r0
 8003a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	00d9      	lsls	r1, r3, #3
 8003a5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a60:	00d0      	lsls	r0, r2, #3
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	1912      	adds	r2, r2, r4
 8003a68:	eb45 0303 	adc.w	r3, r5, r3
 8003a6c:	f04f 0000 	mov.w	r0, #0
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	0299      	lsls	r1, r3, #10
 8003a76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a7a:	0290      	lsls	r0, r2, #10
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	f7fc fc80 	bl	8000390 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	60bb      	str	r3, [r7, #8]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ab6:	60bb      	str	r3, [r7, #8]
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	68bb      	ldr	r3, [r7, #8]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200

08003ad4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2000001c 	.word	0x2000001c

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	0800a4a8 	.word	0x0800a4a8

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b18:	f7ff ffdc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	0800a4a8 	.word	0x0800a4a8

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b64:	4b69      	ldr	r3, [pc, #420]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b6e:	6093      	str	r3, [r2, #8]
 8003b70:	4b66      	ldr	r3, [pc, #408]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	4964      	ldr	r1, [pc, #400]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d017      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	4959      	ldr	r1, [pc, #356]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bd2:	4b4e      	ldr	r3, [pc, #312]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	494a      	ldr	r1, [pc, #296]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 808b 	beq.w	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b3a      	ldr	r3, [pc, #232]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	4a39      	ldr	r2, [pc, #228]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2c:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a34      	ldr	r2, [pc, #208]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c44:	f7fe f9be 	bl	8001fc4 <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4c:	f7fe f9ba 	bl	8001fc4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e38f      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c6a:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d035      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d02e      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003caa:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d114      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe f982 	bl	8001fc4 <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fe f97e 	bl	8001fc4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e351      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ee      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf2:	d111      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d02:	400b      	ands	r3, r1
 8003d04:	4901      	ldr	r1, [pc, #4]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40007000 	.word	0x40007000
 8003d14:	0ffffcff 	.word	0x0ffffcff
 8003d18:	4bb3      	ldr	r3, [pc, #716]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4ab2      	ldr	r2, [pc, #712]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d22:	6093      	str	r3, [r2, #8]
 8003d24:	4bb0      	ldr	r3, [pc, #704]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	49ad      	ldr	r1, [pc, #692]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d010      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d42:	4ba9      	ldr	r3, [pc, #676]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d48:	4aa7      	ldr	r2, [pc, #668]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d52:	4ba5      	ldr	r3, [pc, #660]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	49a2      	ldr	r1, [pc, #648]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d70:	4b9d      	ldr	r3, [pc, #628]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7e:	499a      	ldr	r1, [pc, #616]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d92:	4b95      	ldr	r3, [pc, #596]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da0:	4991      	ldr	r1, [pc, #580]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db4:	4b8c      	ldr	r3, [pc, #560]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	4989      	ldr	r1, [pc, #548]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dd6:	4b84      	ldr	r3, [pc, #528]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4980      	ldr	r1, [pc, #512]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df8:	4b7b      	ldr	r3, [pc, #492]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f023 0203 	bic.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	4978      	ldr	r1, [pc, #480]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e1a:	4b73      	ldr	r3, [pc, #460]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f023 020c 	bic.w	r2, r3, #12
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e28:	496f      	ldr	r1, [pc, #444]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	4967      	ldr	r1, [pc, #412]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e5e:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6c:	495e      	ldr	r1, [pc, #376]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e80:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	4956      	ldr	r1, [pc, #344]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ea2:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	494d      	ldr	r1, [pc, #308]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ec4:	4b48      	ldr	r3, [pc, #288]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	4945      	ldr	r1, [pc, #276]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ee6:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef4:	493c      	ldr	r1, [pc, #240]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f08:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f16:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d011      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f38:	492b      	ldr	r1, [pc, #172]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f48:	d101      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	491b      	ldr	r1, [pc, #108]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9c:	4912      	ldr	r1, [pc, #72]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc0:	4909      	ldr	r1, [pc, #36]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	4986      	ldr	r1, [pc, #536]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004000:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004006:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004010:	497d      	ldr	r1, [pc, #500]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d006      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80d6 	beq.w	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800402c:	4b76      	ldr	r3, [pc, #472]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a75      	ldr	r2, [pc, #468]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004032:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fd ffc4 	bl	8001fc4 <HAL_GetTick>
 800403c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004040:	f7fd ffc0 	bl	8001fc4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e195      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004052:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d021      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	2b00      	cmp	r3, #0
 8004070:	d11d      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004072:	4b65      	ldr	r3, [pc, #404]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004080:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004086:	0e1b      	lsrs	r3, r3, #24
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	019a      	lsls	r2, r3, #6
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	431a      	orrs	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	071b      	lsls	r3, r3, #28
 80040a6:	4958      	ldr	r1, [pc, #352]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d02e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d8:	d129      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040da:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e8:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ee:	0f1b      	lsrs	r3, r3, #28
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	019a      	lsls	r2, r3, #6
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	071b      	lsls	r3, r3, #28
 800410e:	493e      	ldr	r1, [pc, #248]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004116:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411c:	f023 021f 	bic.w	r2, r3, #31
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	3b01      	subs	r3, #1
 8004126:	4938      	ldr	r1, [pc, #224]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01d      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800413a:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	0e1b      	lsrs	r3, r3, #24
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004148:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	0f1b      	lsrs	r3, r3, #28
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	019a      	lsls	r2, r3, #6
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	431a      	orrs	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	4926      	ldr	r1, [pc, #152]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d011      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	019a      	lsls	r2, r3, #6
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	491a      	ldr	r1, [pc, #104]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041a6:	4b18      	ldr	r3, [pc, #96]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b2:	f7fd ff07 	bl	8001fc4 <HAL_GetTick>
 80041b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041ba:	f7fd ff03 	bl	8001fc4 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0d8      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	f040 80ce 	bne.w	800437c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ec:	f7fd feea 	bl	8001fc4 <HAL_GetTick>
 80041f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041f2:	e00b      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041f4:	f7fd fee6 	bl	8001fc4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d904      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e0bb      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800420c:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004218:	d0ec      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004236:	2b00      	cmp	r3, #0
 8004238:	d02e      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d12a      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004242:	4b51      	ldr	r3, [pc, #324]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004250:	4b4d      	ldr	r3, [pc, #308]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	0f1b      	lsrs	r3, r3, #28
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	019a      	lsls	r2, r3, #6
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	4944      	ldr	r1, [pc, #272]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800427e:	4b42      	ldr	r3, [pc, #264]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004284:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	493d      	ldr	r1, [pc, #244]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d022      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ac:	d11d      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042bc:	4b32      	ldr	r3, [pc, #200]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	0f1b      	lsrs	r3, r3, #28
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	019a      	lsls	r2, r3, #6
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	431a      	orrs	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	071b      	lsls	r3, r3, #28
 80042e2:	4929      	ldr	r1, [pc, #164]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d028      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042f6:	4b24      	ldr	r3, [pc, #144]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	0e1b      	lsrs	r3, r3, #24
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	019a      	lsls	r2, r3, #6
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	071b      	lsls	r3, r3, #28
 800432a:	4917      	ldr	r1, [pc, #92]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4911      	ldr	r1, [pc, #68]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004354:	f7fd fe36 	bl	8001fc4 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800435c:	f7fd fe32 	bl	8001fc4 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e007      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437a:	d1ef      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800

0800438c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e09d      	b.n	80044da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ae:	d009      	beq.n	80043c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
 80043b6:	e005      	b.n	80043c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd fb08 	bl	80019f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004404:	d902      	bls.n	800440c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e002      	b.n	8004412 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800440c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004410:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800441a:	d007      	beq.n	800442c <HAL_SPI_Init+0xa0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004424:	d002      	beq.n	800442c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	ea42 0103 	orr.w	r1, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	f003 0204 	and.w	r2, r3, #4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08a      	sub	sp, #40	; 0x28
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x26>
 8004504:	2302      	movs	r3, #2
 8004506:	e1fb      	b.n	8004900 <HAL_SPI_TransmitReceive+0x41e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004510:	f7fd fd58 	bl	8001fc4 <HAL_GetTick>
 8004514:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800451c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004528:	887b      	ldrh	r3, [r7, #2]
 800452a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452c:	7efb      	ldrb	r3, [r7, #27]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d00e      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x6e>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004538:	d106      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x66>
 8004542:	7efb      	ldrb	r3, [r7, #27]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d003      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800454e:	e1cd      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x80>
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004568:	e1c0      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b04      	cmp	r3, #4
 8004574:	d003      	beq.n	800457e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2205      	movs	r2, #5
 800457a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c0:	d802      	bhi.n	80045c8 <HAL_SPI_TransmitReceive+0xe6>
 80045c2:	8a3b      	ldrh	r3, [r7, #16]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d908      	bls.n	80045da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e007      	b.n	80045ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d007      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004610:	d97c      	bls.n	800470c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_SPI_TransmitReceive+0x13e>
 800461a:	8a7b      	ldrh	r3, [r7, #18]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d169      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	881a      	ldrh	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	1c9a      	adds	r2, r3, #2
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004644:	e056      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b02      	cmp	r3, #2
 8004652:	d11b      	bne.n	800468c <HAL_SPI_TransmitReceive+0x1aa>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_SPI_TransmitReceive+0x1aa>
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	2b01      	cmp	r3, #1
 8004662:	d113      	bne.n	800468c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d11c      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x1f2>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	b292      	uxth	r2, r2
 80046b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046d4:	f7fd fc76 	bl	8001fc4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d807      	bhi.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d003      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046f2:	e0fb      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1a3      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x164>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d19d      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x164>
 800470a:	e0df      	b.n	80048cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_SPI_TransmitReceive+0x23a>
 8004714:	8a7b      	ldrh	r3, [r7, #18]
 8004716:	2b01      	cmp	r3, #1
 8004718:	f040 80cb 	bne.w	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d912      	bls.n	800474c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b02      	subs	r3, #2
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800474a:	e0b2      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004772:	e09e      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d134      	bne.n	80047ec <HAL_SPI_TransmitReceive+0x30a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d02f      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x30a>
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	2b01      	cmp	r3, #1
 8004790:	d12c      	bne.n	80047ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d912      	bls.n	80047c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b02      	subs	r3, #2
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c0:	e012      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d148      	bne.n	800488c <HAL_SPI_TransmitReceive+0x3aa>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d042      	beq.n	800488c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d923      	bls.n	800485a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	b292      	uxth	r2, r2
 800481e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b02      	subs	r3, #2
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d81f      	bhi.n	8004888 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	e016      	b.n	8004888 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f103 020c 	add.w	r2, r3, #12
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800488c:	f7fd fb9a 	bl	8001fc4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004898:	429a      	cmp	r2, r3
 800489a:	d803      	bhi.n	80048a4 <HAL_SPI_TransmitReceive+0x3c2>
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d102      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x3c8>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048b0:	e01c      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f af5b 	bne.w	8004774 <HAL_SPI_TransmitReceive+0x292>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f47f af54 	bne.w	8004774 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f937 	bl	8004b44 <SPI_EndRxTxTransaction>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60
 80048e8:	e000      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	; 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004918:	f7fd fb54 	bl	8001fc4 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	4413      	add	r3, r2
 8004926:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004928:	f7fd fb4c 	bl	8001fc4 <HAL_GetTick>
 800492c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	015b      	lsls	r3, r3, #5
 8004934:	0d1b      	lsrs	r3, r3, #20
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	fb02 f303 	mul.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800493e:	e054      	b.n	80049ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d050      	beq.n	80049ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004948:	f7fd fb3c 	bl	8001fc4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	d902      	bls.n	800495e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d13d      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800496c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d111      	bne.n	800499c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004980:	d004      	beq.n	800498c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498a:	d107      	bne.n	800499c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a4:	d10f      	bne.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e017      	b.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	bf0c      	ite	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	2300      	movne	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d19b      	bne.n	8004940 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	2000001c 	.word	0x2000001c

08004a18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a2a:	f7fd facb 	bl	8001fc4 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a3a:	f7fd fac3 	bl	8001fc4 <HAL_GetTick>
 8004a3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a48:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	00da      	lsls	r2, r3, #3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	0d1b      	lsrs	r3, r3, #20
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a60:	e060      	b.n	8004b24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a68:	d107      	bne.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d050      	beq.n	8004b24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a82:	f7fd fa9f 	bl	8001fc4 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d902      	bls.n	8004a98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d13d      	bne.n	8004b14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab0:	d111      	bne.n	8004ad6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d004      	beq.n	8004ac6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d107      	bne.n	8004ad6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ade:	d10f      	bne.n	8004b00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004afe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e010      	b.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d196      	bne.n	8004a62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	; 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000001c 	.word	0x2000001c

08004b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff ff5b 	bl	8004a18 <SPI_WaitFifoStateUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e046      	b.n	8004c06 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b78:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <SPI_EndRxTxTransaction+0xcc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <SPI_EndRxTxTransaction+0xd0>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	0d5b      	lsrs	r3, r3, #21
 8004b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b96:	d112      	bne.n	8004bbe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2180      	movs	r1, #128	; 0x80
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff feb0 	bl	8004908 <SPI_WaitFlagStateUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e023      	b.n	8004c06 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d0f2      	beq.n	8004bbe <SPI_EndRxTxTransaction+0x7a>
 8004bd8:	e000      	b.n	8004bdc <SPI_EndRxTxTransaction+0x98>
        break;
 8004bda:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff ff15 	bl	8004a18 <SPI_WaitFifoStateUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e000      	b.n	8004c06 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000001c 	.word	0x2000001c
 8004c14:	165e9f81 	.word	0x165e9f81

08004c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e049      	b.n	8004cbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc ff3a 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f000 fb6e 	bl	8005338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e049      	b.n	8004d6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f841 	bl	8004d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f000 fb17 	bl	8005338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_TIM_PWM_Start+0x24>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e03c      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d109      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0x3e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e02f      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d109      	bne.n	8004de0 <HAL_TIM_PWM_Start+0x58>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e022      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d109      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x72>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	bf14      	ite	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	2300      	moveq	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	e015      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d109      	bne.n	8004e14 <HAL_TIM_PWM_Start+0x8c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e008      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e092      	b.n	8004f54 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Start+0xb6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	e023      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0xc6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4c:	e01b      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0xd6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	e013      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xe6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e6c:	e00b      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_PWM_Start+0xf6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7c:	e003      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fdea 	bl	8005a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a30      	ldr	r2, [pc, #192]	; (8004f5c <HAL_TIM_PWM_Start+0x1d4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_PWM_Start+0x120>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <HAL_TIM_PWM_Start+0x1d8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_PWM_Start+0x124>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_TIM_PWM_Start+0x126>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_TIM_PWM_Start+0x1d4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d01d      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_TIM_PWM_Start+0x1dc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <HAL_TIM_PWM_Start+0x1e0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <HAL_TIM_PWM_Start+0x1e4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_TIM_PWM_Start+0x1d8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_TIM_PWM_Start+0x1e8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <HAL_TIM_PWM_Start+0x1ec>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d115      	bne.n	8004f3e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_TIM_PWM_Start+0x1f0>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b06      	cmp	r3, #6
 8004f22:	d015      	beq.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2a:	d011      	beq.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	e008      	b.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e000      	b.n	8004f52 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800
 8004f6c:	40000c00 	.word	0x40000c00
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40001800 	.word	0x40001800
 8004f78:	00010007 	.word	0x00010007

08004f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e0ff      	b.n	800519a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b14      	cmp	r3, #20
 8004fa6:	f200 80f0 	bhi.w	800518a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	0800518b 	.word	0x0800518b
 8004fb8:	0800518b 	.word	0x0800518b
 8004fbc:	0800518b 	.word	0x0800518b
 8004fc0:	08005045 	.word	0x08005045
 8004fc4:	0800518b 	.word	0x0800518b
 8004fc8:	0800518b 	.word	0x0800518b
 8004fcc:	0800518b 	.word	0x0800518b
 8004fd0:	08005087 	.word	0x08005087
 8004fd4:	0800518b 	.word	0x0800518b
 8004fd8:	0800518b 	.word	0x0800518b
 8004fdc:	0800518b 	.word	0x0800518b
 8004fe0:	080050c7 	.word	0x080050c7
 8004fe4:	0800518b 	.word	0x0800518b
 8004fe8:	0800518b 	.word	0x0800518b
 8004fec:	0800518b 	.word	0x0800518b
 8004ff0:	08005109 	.word	0x08005109
 8004ff4:	0800518b 	.word	0x0800518b
 8004ff8:	0800518b 	.word	0x0800518b
 8004ffc:	0800518b 	.word	0x0800518b
 8005000:	08005149 	.word	0x08005149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fa34 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	619a      	str	r2, [r3, #24]
      break;
 8005042:	e0a5      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fa86 	bl	800555c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	619a      	str	r2, [r3, #24]
      break;
 8005084:	e084      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fadd 	bl	800564c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0208 	orr.w	r2, r2, #8
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0204 	bic.w	r2, r2, #4
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	61da      	str	r2, [r3, #28]
      break;
 80050c4:	e064      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fb33 	bl	8005738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	021a      	lsls	r2, r3, #8
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	61da      	str	r2, [r3, #28]
      break;
 8005106:	e043      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fb6a 	bl	80057e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005146:	e023      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fb9c 	bl	800588c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005188:	e002      	b.n	8005190 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	75fb      	strb	r3, [r7, #23]
      break;
 800518e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop

080051a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIM_ConfigClockSource+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e0b4      	b.n	800532a <HAL_TIM_ConfigClockSource+0x186>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	4b56      	ldr	r3, [pc, #344]	; (8005334 <HAL_TIM_ConfigClockSource+0x190>)
 80051dc:	4013      	ands	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d03e      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0xd4>
 80051fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fe:	f200 8087 	bhi.w	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	f000 8086 	beq.w	8005316 <HAL_TIM_ConfigClockSource+0x172>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	d87f      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005210:	2b70      	cmp	r3, #112	; 0x70
 8005212:	d01a      	beq.n	800524a <HAL_TIM_ConfigClockSource+0xa6>
 8005214:	2b70      	cmp	r3, #112	; 0x70
 8005216:	d87b      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b60      	cmp	r3, #96	; 0x60
 800521a:	d050      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x11a>
 800521c:	2b60      	cmp	r3, #96	; 0x60
 800521e:	d877      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b50      	cmp	r3, #80	; 0x50
 8005222:	d03c      	beq.n	800529e <HAL_TIM_ConfigClockSource+0xfa>
 8005224:	2b50      	cmp	r3, #80	; 0x50
 8005226:	d873      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d058      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x13a>
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d86f      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b30      	cmp	r3, #48	; 0x30
 8005232:	d064      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d86b      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b20      	cmp	r3, #32
 800523a:	d060      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	2b20      	cmp	r3, #32
 800523e:	d867      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d05c      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b10      	cmp	r3, #16
 8005246:	d05a      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x15a>
 8005248:	e062      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6899      	ldr	r1, [r3, #8]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f000 fbe5 	bl	8005a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800526c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	609a      	str	r2, [r3, #8]
      break;
 8005276:	e04f      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6899      	ldr	r1, [r3, #8]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f000 fbce 	bl	8005a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800529a:	609a      	str	r2, [r3, #8]
      break;
 800529c:	e03c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 fb42 	bl	8005934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2150      	movs	r1, #80	; 0x50
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb9b 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e02c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 fb61 	bl	8005992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2160      	movs	r1, #96	; 0x60
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb8b 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 80052dc:	e01c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 fb22 	bl	8005934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2140      	movs	r1, #64	; 0x40
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fb7b 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 80052fc:	e00c      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f000 fb72 	bl	80059f2 <TIM_ITRx_SetConfig>
      break;
 800530e:	e003      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
      break;
 8005314:	e000      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	fffeff88 	.word	0xfffeff88

08005338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a40      	ldr	r2, [pc, #256]	; (800544c <TIM_Base_SetConfig+0x114>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005356:	d00f      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <TIM_Base_SetConfig+0x118>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <TIM_Base_SetConfig+0x11c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <TIM_Base_SetConfig+0x120>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3a      	ldr	r2, [pc, #232]	; (800545c <TIM_Base_SetConfig+0x124>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2f      	ldr	r2, [pc, #188]	; (800544c <TIM_Base_SetConfig+0x114>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d02b      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d027      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2c      	ldr	r2, [pc, #176]	; (8005450 <TIM_Base_SetConfig+0x118>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d023      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2b      	ldr	r2, [pc, #172]	; (8005454 <TIM_Base_SetConfig+0x11c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d01f      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2a      	ldr	r2, [pc, #168]	; (8005458 <TIM_Base_SetConfig+0x120>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01b      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a29      	ldr	r2, [pc, #164]	; (800545c <TIM_Base_SetConfig+0x124>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d017      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a28      	ldr	r2, [pc, #160]	; (8005460 <TIM_Base_SetConfig+0x128>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <TIM_Base_SetConfig+0x12c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00f      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a26      	ldr	r2, [pc, #152]	; (8005468 <TIM_Base_SetConfig+0x130>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00b      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a25      	ldr	r2, [pc, #148]	; (800546c <TIM_Base_SetConfig+0x134>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d007      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a24      	ldr	r2, [pc, #144]	; (8005470 <TIM_Base_SetConfig+0x138>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d003      	beq.n	80053ea <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a23      	ldr	r2, [pc, #140]	; (8005474 <TIM_Base_SetConfig+0x13c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d108      	bne.n	80053fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <TIM_Base_SetConfig+0x114>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d003      	beq.n	8005430 <TIM_Base_SetConfig+0xf8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <TIM_Base_SetConfig+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d103      	bne.n	8005438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	615a      	str	r2, [r3, #20]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800
 800546c:	40001800 	.word	0x40001800
 8005470:	40001c00 	.word	0x40001c00
 8005474:	40002000 	.word	0x40002000

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <TIM_OC1_SetConfig+0xd8>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 0302 	bic.w	r3, r3, #2
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a21      	ldr	r2, [pc, #132]	; (8005554 <TIM_OC1_SetConfig+0xdc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC1_SetConfig+0x64>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a20      	ldr	r2, [pc, #128]	; (8005558 <TIM_OC1_SetConfig+0xe0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d10c      	bne.n	80054f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0308 	bic.w	r3, r3, #8
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 0304 	bic.w	r3, r3, #4
 80054f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a16      	ldr	r2, [pc, #88]	; (8005554 <TIM_OC1_SetConfig+0xdc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_OC1_SetConfig+0x8e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <TIM_OC1_SetConfig+0xe0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d111      	bne.n	800552a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800550c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	621a      	str	r2, [r3, #32]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	fffeff8f 	.word	0xfffeff8f
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400

0800555c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0210 	bic.w	r2, r3, #16
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4b2e      	ldr	r3, [pc, #184]	; (8005640 <TIM_OC2_SetConfig+0xe4>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f023 0320 	bic.w	r3, r3, #32
 80055a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a23      	ldr	r2, [pc, #140]	; (8005644 <TIM_OC2_SetConfig+0xe8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_OC2_SetConfig+0x68>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a22      	ldr	r2, [pc, #136]	; (8005648 <TIM_OC2_SetConfig+0xec>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10d      	bne.n	80055e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <TIM_OC2_SetConfig+0xe8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC2_SetConfig+0x94>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a17      	ldr	r2, [pc, #92]	; (8005648 <TIM_OC2_SetConfig+0xec>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d113      	bne.n	8005618 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	feff8fff 	.word	0xfeff8fff
 8005644:	40010000 	.word	0x40010000
 8005648:	40010400 	.word	0x40010400

0800564c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4b2d      	ldr	r3, [pc, #180]	; (800572c <TIM_OC3_SetConfig+0xe0>)
 8005678:	4013      	ands	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a22      	ldr	r2, [pc, #136]	; (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC3_SetConfig+0x66>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <TIM_OC3_SetConfig+0xe8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10d      	bne.n	80056ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC3_SetConfig+0x92>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <TIM_OC3_SetConfig+0xe8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d113      	bne.n	8005706 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	621a      	str	r2, [r3, #32]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	fffeff8f 	.word	0xfffeff8f
 8005730:	40010000 	.word	0x40010000
 8005734:	40010400 	.word	0x40010400

08005738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <TIM_OC4_SetConfig+0xa4>)
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	031b      	lsls	r3, r3, #12
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <TIM_OC4_SetConfig+0xa8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_OC4_SetConfig+0x68>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a12      	ldr	r2, [pc, #72]	; (80057e4 <TIM_OC4_SetConfig+0xac>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d109      	bne.n	80057b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	019b      	lsls	r3, r3, #6
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	feff8fff 	.word	0xfeff8fff
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40010400 	.word	0x40010400

080057e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <TIM_OC5_SetConfig+0x98>)
 8005814:	4013      	ands	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a12      	ldr	r2, [pc, #72]	; (8005884 <TIM_OC5_SetConfig+0x9c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_OC5_SetConfig+0x5e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a11      	ldr	r2, [pc, #68]	; (8005888 <TIM_OC5_SetConfig+0xa0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d109      	bne.n	800585a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	fffeff8f 	.word	0xfffeff8f
 8005884:	40010000 	.word	0x40010000
 8005888:	40010400 	.word	0x40010400

0800588c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <TIM_OC6_SetConfig+0x9c>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	051b      	lsls	r3, r3, #20
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a13      	ldr	r2, [pc, #76]	; (800592c <TIM_OC6_SetConfig+0xa0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC6_SetConfig+0x60>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a12      	ldr	r2, [pc, #72]	; (8005930 <TIM_OC6_SetConfig+0xa4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d109      	bne.n	8005900 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	feff8fff 	.word	0xfeff8fff
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400

08005934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800595e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 030a 	bic.w	r3, r3, #10
 8005970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005992:	b480      	push	{r7}
 8005994:	b087      	sub	sp, #28
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0210 	bic.w	r2, r3, #16
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	031b      	lsls	r3, r3, #12
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f043 0307 	orr.w	r3, r3, #7
 8005a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	609a      	str	r2, [r3, #8]
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	021a      	lsls	r2, r3, #8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	609a      	str	r2, [r3, #8]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a1a      	ldr	r2, [r3, #32]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e06d      	b.n	8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a30      	ldr	r2, [pc, #192]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2f      	ldr	r2, [pc, #188]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d108      	bne.n	8005b12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d022      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d01d      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1a      	ldr	r2, [pc, #104]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10c      	bne.n	8005b96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40010400 	.word	0x40010400
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40001800 	.word	0x40001800

08005bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e040      	b.n	8005c64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fb ffb8 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fc22 	bl	8006458 <UART_SetConfig>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e022      	b.n	8005c64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fe78 	bl	800691c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 feff 	bl	8006a60 <UART_CheckIdleState>
 8005c62:	4603      	mov	r3, r0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08a      	sub	sp, #40	; 0x28
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	f040 8081 	bne.w	8005d88 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_UART_Transmit+0x26>
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e079      	b.n	8005d8a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UART_Transmit+0x38>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e072      	b.n	8005d8a <HAL_UART_Transmit+0x11e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2221      	movs	r2, #33	; 0x21
 8005cb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cba:	f7fc f983 	bl	8001fc4 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd8:	d108      	bne.n	8005cec <HAL_UART_Transmit+0x80>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e003      	b.n	8005cf4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005cfc:	e02c      	b.n	8005d58 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	2180      	movs	r1, #128	; 0x80
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fef2 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e038      	b.n	8005d8a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	3302      	adds	r3, #2
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e007      	b.n	8005d46 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1cc      	bne.n	8005cfe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2140      	movs	r1, #64	; 0x40
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 febf 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e005      	b.n	8005d8a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b08a      	sub	sp, #40	; 0x28
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d13d      	bne.n	8005e24 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_UART_Receive_IT+0x22>
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e036      	b.n	8005e26 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Receive_IT+0x34>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e02f      	b.n	8005e26 <HAL_UART_Receive_IT+0x94>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e6      	bne.n	8005de2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	461a      	mov	r2, r3
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 ff2e 	bl	8006c7c <UART_Start_Receive_IT>
 8005e20:	4603      	mov	r3, r0
 8005e22:	e000      	b.n	8005e26 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e24:	2302      	movs	r3, #2
  }
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3728      	adds	r7, #40	; 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b0ba      	sub	sp, #232	; 0xe8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e5e:	4013      	ands	r3, r2
 8005e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d115      	bne.n	8005e98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00f      	beq.n	8005e98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 82a4 	beq.w	80063d6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
      }
      return;
 8005e96:	e29e      	b.n	80063d6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 8117 	beq.w	80060d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005eae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005eb2:	4b85      	ldr	r3, [pc, #532]	; (80060c8 <HAL_UART_IRQHandler+0x298>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 810a 	beq.w	80060d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d011      	beq.n	8005eec <HAL_UART_IRQHandler+0xbc>
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee2:	f043 0201 	orr.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_UART_IRQHandler+0xec>
 8005ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	f043 0204 	orr.w	r2, r3, #4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d011      	beq.n	8005f4c <HAL_UART_IRQHandler+0x11c>
 8005f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f42:	f043 0202 	orr.w	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d017      	beq.n	8005f88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d105      	bne.n	8005f70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2208      	movs	r2, #8
 8005f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7e:	f043 0208 	orr.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d012      	beq.n	8005fba <HAL_UART_IRQHandler+0x18a>
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb0:	f043 0220 	orr.w	r2, r3, #32
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 820a 	beq.w	80063da <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d005      	beq.n	8006012 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04f      	beq.n	80060b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fefc 	bl	8006e10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d141      	bne.n	80060aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800603c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800605e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800606a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1d9      	bne.n	8006026 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	2b00      	cmp	r3, #0
 8006078:	d013      	beq.n	80060a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <HAL_UART_IRQHandler+0x29c>)
 8006080:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	4618      	mov	r0, r3
 8006088:	f7fc f94d 	bl	8002326 <HAL_DMA_Abort_IT>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d017      	beq.n	80060c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800609c:	4610      	mov	r0, r2
 800609e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	e00f      	b.n	80060c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9b8 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a8:	e00b      	b.n	80060c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f9b4 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	e007      	b.n	80060c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9b0 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80060c0:	e18b      	b.n	80063da <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c2:	bf00      	nop
    return;
 80060c4:	e189      	b.n	80063da <HAL_UART_IRQHandler+0x5aa>
 80060c6:	bf00      	nop
 80060c8:	04000120 	.word	0x04000120
 80060cc:	08006ed7 	.word	0x08006ed7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	f040 8144 	bne.w	8006362 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 813d 	beq.w	8006362 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8136 	beq.w	8006362 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2210      	movs	r2, #16
 80060fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	f040 80b2 	bne.w	8006272 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800611a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 815d 	beq.w	80063de <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800612a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800612e:	429a      	cmp	r2, r3
 8006130:	f080 8155 	bcs.w	80063de <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800613a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006148:	f000 8085 	beq.w	8006256 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800617a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800618e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1da      	bne.n	800614c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3308      	adds	r3, #8
 800619c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3308      	adds	r3, #8
 80061b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e1      	bne.n	8006196 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e3      	bne.n	80061d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006226:	f023 0310 	bic.w	r3, r3, #16
 800622a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006238:	65bb      	str	r3, [r7, #88]	; 0x58
 800623a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800623e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e4      	bne.n	8006216 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4618      	mov	r0, r3
 8006252:	f7fb fff8 	bl	8002246 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006262:	b29b      	uxth	r3, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	b29b      	uxth	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8de 	bl	800642c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006270:	e0b5      	b.n	80063de <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800627e:	b29b      	uxth	r3, r3
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80a7 	beq.w	80063e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80a2 	beq.w	80063e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
 80062c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e4      	bne.n	800629e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3308      	adds	r3, #8
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	623b      	str	r3, [r7, #32]
   return(result);
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062f8:	633a      	str	r2, [r7, #48]	; 0x30
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e3      	bne.n	80062d4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2220      	movs	r2, #32
 8006310:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	60fb      	str	r3, [r7, #12]
   return(result);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	69b9      	ldr	r1, [r7, #24]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	617b      	str	r3, [r7, #20]
   return(result);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e4      	bne.n	800631e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f866 	bl	800642c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006360:	e03f      	b.n	80063e2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <HAL_UART_IRQHandler+0x55c>
 800636e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f85d 	bl	8006444 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800638a:	e02d      	b.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01c      	beq.n	80063e6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	4798      	blx	r3
    }
    return;
 80063b4:	e017      	b.n	80063e6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d012      	beq.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00c      	beq.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fd97 	bl	8006f02 <UART_EndTransmit_IT>
    return;
 80063d4:	e008      	b.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80063d6:	bf00      	nop
 80063d8:	e006      	b.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
    return;
 80063da:	bf00      	nop
 80063dc:	e004      	b.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_UART_IRQHandler+0x5b8>
    return;
 80063e6:	bf00      	nop
  }

}
 80063e8:	37e8      	adds	r7, #232	; 0xe8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop

080063f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4ba7      	ldr	r3, [pc, #668]	; (8006720 <UART_SetConfig+0x2c8>)
 8006484:	4013      	ands	r3, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	6979      	ldr	r1, [r7, #20]
 800648c:	430b      	orrs	r3, r1
 800648e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a95      	ldr	r2, [pc, #596]	; (8006724 <UART_SetConfig+0x2cc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d120      	bne.n	8006516 <UART_SetConfig+0xbe>
 80064d4:	4b94      	ldr	r3, [pc, #592]	; (8006728 <UART_SetConfig+0x2d0>)
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d816      	bhi.n	8006510 <UART_SetConfig+0xb8>
 80064e2:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <UART_SetConfig+0x90>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	08006505 	.word	0x08006505
 80064f0:	080064ff 	.word	0x080064ff
 80064f4:	0800650b 	.word	0x0800650b
 80064f8:	2301      	movs	r3, #1
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e14f      	b.n	800679e <UART_SetConfig+0x346>
 80064fe:	2302      	movs	r3, #2
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e14c      	b.n	800679e <UART_SetConfig+0x346>
 8006504:	2304      	movs	r3, #4
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e149      	b.n	800679e <UART_SetConfig+0x346>
 800650a:	2308      	movs	r3, #8
 800650c:	77fb      	strb	r3, [r7, #31]
 800650e:	e146      	b.n	800679e <UART_SetConfig+0x346>
 8006510:	2310      	movs	r3, #16
 8006512:	77fb      	strb	r3, [r7, #31]
 8006514:	e143      	b.n	800679e <UART_SetConfig+0x346>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a84      	ldr	r2, [pc, #528]	; (800672c <UART_SetConfig+0x2d4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d132      	bne.n	8006586 <UART_SetConfig+0x12e>
 8006520:	4b81      	ldr	r3, [pc, #516]	; (8006728 <UART_SetConfig+0x2d0>)
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b0c      	cmp	r3, #12
 800652c:	d828      	bhi.n	8006580 <UART_SetConfig+0x128>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <UART_SetConfig+0xdc>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006569 	.word	0x08006569
 8006538:	08006581 	.word	0x08006581
 800653c:	08006581 	.word	0x08006581
 8006540:	08006581 	.word	0x08006581
 8006544:	08006575 	.word	0x08006575
 8006548:	08006581 	.word	0x08006581
 800654c:	08006581 	.word	0x08006581
 8006550:	08006581 	.word	0x08006581
 8006554:	0800656f 	.word	0x0800656f
 8006558:	08006581 	.word	0x08006581
 800655c:	08006581 	.word	0x08006581
 8006560:	08006581 	.word	0x08006581
 8006564:	0800657b 	.word	0x0800657b
 8006568:	2300      	movs	r3, #0
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e117      	b.n	800679e <UART_SetConfig+0x346>
 800656e:	2302      	movs	r3, #2
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e114      	b.n	800679e <UART_SetConfig+0x346>
 8006574:	2304      	movs	r3, #4
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e111      	b.n	800679e <UART_SetConfig+0x346>
 800657a:	2308      	movs	r3, #8
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e10e      	b.n	800679e <UART_SetConfig+0x346>
 8006580:	2310      	movs	r3, #16
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e10b      	b.n	800679e <UART_SetConfig+0x346>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a69      	ldr	r2, [pc, #420]	; (8006730 <UART_SetConfig+0x2d8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d120      	bne.n	80065d2 <UART_SetConfig+0x17a>
 8006590:	4b65      	ldr	r3, [pc, #404]	; (8006728 <UART_SetConfig+0x2d0>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800659a:	2b30      	cmp	r3, #48	; 0x30
 800659c:	d013      	beq.n	80065c6 <UART_SetConfig+0x16e>
 800659e:	2b30      	cmp	r3, #48	; 0x30
 80065a0:	d814      	bhi.n	80065cc <UART_SetConfig+0x174>
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d009      	beq.n	80065ba <UART_SetConfig+0x162>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d810      	bhi.n	80065cc <UART_SetConfig+0x174>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <UART_SetConfig+0x15c>
 80065ae:	2b10      	cmp	r3, #16
 80065b0:	d006      	beq.n	80065c0 <UART_SetConfig+0x168>
 80065b2:	e00b      	b.n	80065cc <UART_SetConfig+0x174>
 80065b4:	2300      	movs	r3, #0
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e0f1      	b.n	800679e <UART_SetConfig+0x346>
 80065ba:	2302      	movs	r3, #2
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e0ee      	b.n	800679e <UART_SetConfig+0x346>
 80065c0:	2304      	movs	r3, #4
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e0eb      	b.n	800679e <UART_SetConfig+0x346>
 80065c6:	2308      	movs	r3, #8
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e0e8      	b.n	800679e <UART_SetConfig+0x346>
 80065cc:	2310      	movs	r3, #16
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e0e5      	b.n	800679e <UART_SetConfig+0x346>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a57      	ldr	r2, [pc, #348]	; (8006734 <UART_SetConfig+0x2dc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d120      	bne.n	800661e <UART_SetConfig+0x1c6>
 80065dc:	4b52      	ldr	r3, [pc, #328]	; (8006728 <UART_SetConfig+0x2d0>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065e6:	2bc0      	cmp	r3, #192	; 0xc0
 80065e8:	d013      	beq.n	8006612 <UART_SetConfig+0x1ba>
 80065ea:	2bc0      	cmp	r3, #192	; 0xc0
 80065ec:	d814      	bhi.n	8006618 <UART_SetConfig+0x1c0>
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d009      	beq.n	8006606 <UART_SetConfig+0x1ae>
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d810      	bhi.n	8006618 <UART_SetConfig+0x1c0>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <UART_SetConfig+0x1a8>
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d006      	beq.n	800660c <UART_SetConfig+0x1b4>
 80065fe:	e00b      	b.n	8006618 <UART_SetConfig+0x1c0>
 8006600:	2300      	movs	r3, #0
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e0cb      	b.n	800679e <UART_SetConfig+0x346>
 8006606:	2302      	movs	r3, #2
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e0c8      	b.n	800679e <UART_SetConfig+0x346>
 800660c:	2304      	movs	r3, #4
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e0c5      	b.n	800679e <UART_SetConfig+0x346>
 8006612:	2308      	movs	r3, #8
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e0c2      	b.n	800679e <UART_SetConfig+0x346>
 8006618:	2310      	movs	r3, #16
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e0bf      	b.n	800679e <UART_SetConfig+0x346>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a45      	ldr	r2, [pc, #276]	; (8006738 <UART_SetConfig+0x2e0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d125      	bne.n	8006674 <UART_SetConfig+0x21c>
 8006628:	4b3f      	ldr	r3, [pc, #252]	; (8006728 <UART_SetConfig+0x2d0>)
 800662a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006636:	d017      	beq.n	8006668 <UART_SetConfig+0x210>
 8006638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800663c:	d817      	bhi.n	800666e <UART_SetConfig+0x216>
 800663e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006642:	d00b      	beq.n	800665c <UART_SetConfig+0x204>
 8006644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006648:	d811      	bhi.n	800666e <UART_SetConfig+0x216>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <UART_SetConfig+0x1fe>
 800664e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006652:	d006      	beq.n	8006662 <UART_SetConfig+0x20a>
 8006654:	e00b      	b.n	800666e <UART_SetConfig+0x216>
 8006656:	2300      	movs	r3, #0
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e0a0      	b.n	800679e <UART_SetConfig+0x346>
 800665c:	2302      	movs	r3, #2
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e09d      	b.n	800679e <UART_SetConfig+0x346>
 8006662:	2304      	movs	r3, #4
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e09a      	b.n	800679e <UART_SetConfig+0x346>
 8006668:	2308      	movs	r3, #8
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e097      	b.n	800679e <UART_SetConfig+0x346>
 800666e:	2310      	movs	r3, #16
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e094      	b.n	800679e <UART_SetConfig+0x346>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a30      	ldr	r2, [pc, #192]	; (800673c <UART_SetConfig+0x2e4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d125      	bne.n	80066ca <UART_SetConfig+0x272>
 800667e:	4b2a      	ldr	r3, [pc, #168]	; (8006728 <UART_SetConfig+0x2d0>)
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800668c:	d017      	beq.n	80066be <UART_SetConfig+0x266>
 800668e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006692:	d817      	bhi.n	80066c4 <UART_SetConfig+0x26c>
 8006694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006698:	d00b      	beq.n	80066b2 <UART_SetConfig+0x25a>
 800669a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800669e:	d811      	bhi.n	80066c4 <UART_SetConfig+0x26c>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <UART_SetConfig+0x254>
 80066a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a8:	d006      	beq.n	80066b8 <UART_SetConfig+0x260>
 80066aa:	e00b      	b.n	80066c4 <UART_SetConfig+0x26c>
 80066ac:	2301      	movs	r3, #1
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e075      	b.n	800679e <UART_SetConfig+0x346>
 80066b2:	2302      	movs	r3, #2
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	e072      	b.n	800679e <UART_SetConfig+0x346>
 80066b8:	2304      	movs	r3, #4
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e06f      	b.n	800679e <UART_SetConfig+0x346>
 80066be:	2308      	movs	r3, #8
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e06c      	b.n	800679e <UART_SetConfig+0x346>
 80066c4:	2310      	movs	r3, #16
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e069      	b.n	800679e <UART_SetConfig+0x346>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <UART_SetConfig+0x2e8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d137      	bne.n	8006744 <UART_SetConfig+0x2ec>
 80066d4:	4b14      	ldr	r3, [pc, #80]	; (8006728 <UART_SetConfig+0x2d0>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066e2:	d017      	beq.n	8006714 <UART_SetConfig+0x2bc>
 80066e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066e8:	d817      	bhi.n	800671a <UART_SetConfig+0x2c2>
 80066ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ee:	d00b      	beq.n	8006708 <UART_SetConfig+0x2b0>
 80066f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f4:	d811      	bhi.n	800671a <UART_SetConfig+0x2c2>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <UART_SetConfig+0x2aa>
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fe:	d006      	beq.n	800670e <UART_SetConfig+0x2b6>
 8006700:	e00b      	b.n	800671a <UART_SetConfig+0x2c2>
 8006702:	2300      	movs	r3, #0
 8006704:	77fb      	strb	r3, [r7, #31]
 8006706:	e04a      	b.n	800679e <UART_SetConfig+0x346>
 8006708:	2302      	movs	r3, #2
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	e047      	b.n	800679e <UART_SetConfig+0x346>
 800670e:	2304      	movs	r3, #4
 8006710:	77fb      	strb	r3, [r7, #31]
 8006712:	e044      	b.n	800679e <UART_SetConfig+0x346>
 8006714:	2308      	movs	r3, #8
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e041      	b.n	800679e <UART_SetConfig+0x346>
 800671a:	2310      	movs	r3, #16
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e03e      	b.n	800679e <UART_SetConfig+0x346>
 8006720:	efff69f3 	.word	0xefff69f3
 8006724:	40011000 	.word	0x40011000
 8006728:	40023800 	.word	0x40023800
 800672c:	40004400 	.word	0x40004400
 8006730:	40004800 	.word	0x40004800
 8006734:	40004c00 	.word	0x40004c00
 8006738:	40005000 	.word	0x40005000
 800673c:	40011400 	.word	0x40011400
 8006740:	40007800 	.word	0x40007800
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a71      	ldr	r2, [pc, #452]	; (8006910 <UART_SetConfig+0x4b8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d125      	bne.n	800679a <UART_SetConfig+0x342>
 800674e:	4b71      	ldr	r3, [pc, #452]	; (8006914 <UART_SetConfig+0x4bc>)
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006758:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800675c:	d017      	beq.n	800678e <UART_SetConfig+0x336>
 800675e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006762:	d817      	bhi.n	8006794 <UART_SetConfig+0x33c>
 8006764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006768:	d00b      	beq.n	8006782 <UART_SetConfig+0x32a>
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676e:	d811      	bhi.n	8006794 <UART_SetConfig+0x33c>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <UART_SetConfig+0x324>
 8006774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006778:	d006      	beq.n	8006788 <UART_SetConfig+0x330>
 800677a:	e00b      	b.n	8006794 <UART_SetConfig+0x33c>
 800677c:	2300      	movs	r3, #0
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e00d      	b.n	800679e <UART_SetConfig+0x346>
 8006782:	2302      	movs	r3, #2
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e00a      	b.n	800679e <UART_SetConfig+0x346>
 8006788:	2304      	movs	r3, #4
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e007      	b.n	800679e <UART_SetConfig+0x346>
 800678e:	2308      	movs	r3, #8
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e004      	b.n	800679e <UART_SetConfig+0x346>
 8006794:	2310      	movs	r3, #16
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e001      	b.n	800679e <UART_SetConfig+0x346>
 800679a:	2310      	movs	r3, #16
 800679c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a6:	d15a      	bne.n	800685e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80067a8:	7ffb      	ldrb	r3, [r7, #31]
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d827      	bhi.n	80067fe <UART_SetConfig+0x3a6>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <UART_SetConfig+0x35c>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067e9 	.word	0x080067e9
 80067c0:	080067ff 	.word	0x080067ff
 80067c4:	080067ef 	.word	0x080067ef
 80067c8:	080067ff 	.word	0x080067ff
 80067cc:	080067ff 	.word	0x080067ff
 80067d0:	080067ff 	.word	0x080067ff
 80067d4:	080067f7 	.word	0x080067f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d8:	f7fd f988 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 80067dc:	61b8      	str	r0, [r7, #24]
        break;
 80067de:	e013      	b.n	8006808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067e0:	f7fd f998 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 80067e4:	61b8      	str	r0, [r7, #24]
        break;
 80067e6:	e00f      	b.n	8006808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e8:	4b4b      	ldr	r3, [pc, #300]	; (8006918 <UART_SetConfig+0x4c0>)
 80067ea:	61bb      	str	r3, [r7, #24]
        break;
 80067ec:	e00c      	b.n	8006808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ee:	f7fd f88f 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80067f2:	61b8      	str	r0, [r7, #24]
        break;
 80067f4:	e008      	b.n	8006808 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fa:	61bb      	str	r3, [r7, #24]
        break;
 80067fc:	e004      	b.n	8006808 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	77bb      	strb	r3, [r7, #30]
        break;
 8006806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d074      	beq.n	80068f8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	005a      	lsls	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	441a      	add	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006822:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d916      	bls.n	8006858 <UART_SetConfig+0x400>
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006830:	d212      	bcs.n	8006858 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f023 030f 	bic.w	r3, r3, #15
 800683a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	b29b      	uxth	r3, r3
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	b29a      	uxth	r2, r3
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	4313      	orrs	r3, r2
 800684c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	89fa      	ldrh	r2, [r7, #14]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	e04f      	b.n	80068f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	77bb      	strb	r3, [r7, #30]
 800685c:	e04c      	b.n	80068f8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800685e:	7ffb      	ldrb	r3, [r7, #31]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d828      	bhi.n	80068b6 <UART_SetConfig+0x45e>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x414>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006891 	.word	0x08006891
 8006870:	08006899 	.word	0x08006899
 8006874:	080068a1 	.word	0x080068a1
 8006878:	080068b7 	.word	0x080068b7
 800687c:	080068a7 	.word	0x080068a7
 8006880:	080068b7 	.word	0x080068b7
 8006884:	080068b7 	.word	0x080068b7
 8006888:	080068b7 	.word	0x080068b7
 800688c:	080068af 	.word	0x080068af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006890:	f7fd f92c 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8006894:	61b8      	str	r0, [r7, #24]
        break;
 8006896:	e013      	b.n	80068c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006898:	f7fd f93c 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 800689c:	61b8      	str	r0, [r7, #24]
        break;
 800689e:	e00f      	b.n	80068c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a0:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <UART_SetConfig+0x4c0>)
 80068a2:	61bb      	str	r3, [r7, #24]
        break;
 80068a4:	e00c      	b.n	80068c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a6:	f7fd f833 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80068aa:	61b8      	str	r0, [r7, #24]
        break;
 80068ac:	e008      	b.n	80068c0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b2:	61bb      	str	r3, [r7, #24]
        break;
 80068b4:	e004      	b.n	80068c0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	77bb      	strb	r3, [r7, #30]
        break;
 80068be:	bf00      	nop
    }

    if (pclk != 0U)
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d018      	beq.n	80068f8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	085a      	lsrs	r2, r3, #1
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	441a      	add	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b0f      	cmp	r3, #15
 80068de:	d909      	bls.n	80068f4 <UART_SetConfig+0x49c>
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e6:	d205      	bcs.n	80068f4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60da      	str	r2, [r3, #12]
 80068f2:	e001      	b.n	80068f8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006904:	7fbb      	ldrb	r3, [r7, #30]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40007c00 	.word	0x40007c00
 8006914:	40023800 	.word	0x40023800
 8006918:	00f42400 	.word	0x00f42400

0800691c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1a:	d10a      	bne.n	8006a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a70:	f7fb faa8 	bl	8001fc4 <HAL_GetTick>
 8006a74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d10e      	bne.n	8006aa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f82d 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e023      	b.n	8006aea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d10e      	bne.n	8006ace <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f817 	bl	8006af2 <UART_WaitOnFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e00d      	b.n	8006aea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b09c      	sub	sp, #112	; 0x70
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	4613      	mov	r3, r2
 8006b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b02:	e0a5      	b.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	f000 80a1 	beq.w	8006c50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fb fa59 	bl	8001fc4 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d13e      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b38:	667b      	str	r3, [r7, #100]	; 0x64
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e6      	bne.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b76:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e067      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d04f      	beq.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bbe:	d147      	bne.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e6      	bne.n	8006bca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3308      	adds	r3, #8
 8006c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f023 0301 	bic.w	r3, r3, #1
 8006c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c1c:	623a      	str	r2, [r7, #32]
 8006c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	69f9      	ldr	r1, [r7, #28]
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e5      	bne.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e010      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69da      	ldr	r2, [r3, #28]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	bf0c      	ite	eq
 8006c60:	2301      	moveq	r3, #1
 8006c62:	2300      	movne	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	f43f af4a 	beq.w	8006b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3770      	adds	r7, #112	; 0x70
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b097      	sub	sp, #92	; 0x5c
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	88fa      	ldrh	r2, [r7, #6]
 8006c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cae:	d10e      	bne.n	8006cce <UART_Start_Receive_IT+0x52>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <UART_Start_Receive_IT+0x48>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cc2:	e02d      	b.n	8006d20 <UART_Start_Receive_IT+0xa4>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	22ff      	movs	r2, #255	; 0xff
 8006cc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ccc:	e028      	b.n	8006d20 <UART_Start_Receive_IT+0xa4>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10d      	bne.n	8006cf2 <UART_Start_Receive_IT+0x76>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <UART_Start_Receive_IT+0x6c>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	22ff      	movs	r2, #255	; 0xff
 8006ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ce6:	e01b      	b.n	8006d20 <UART_Start_Receive_IT+0xa4>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	227f      	movs	r2, #127	; 0x7f
 8006cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cf0:	e016      	b.n	8006d20 <UART_Start_Receive_IT+0xa4>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfa:	d10d      	bne.n	8006d18 <UART_Start_Receive_IT+0x9c>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <UART_Start_Receive_IT+0x92>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	227f      	movs	r2, #127	; 0x7f
 8006d08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d0c:	e008      	b.n	8006d20 <UART_Start_Receive_IT+0xa4>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	223f      	movs	r2, #63	; 0x3f
 8006d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d16:	e003      	b.n	8006d20 <UART_Start_Receive_IT+0xa4>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2222      	movs	r2, #34	; 0x22
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	f043 0301 	orr.w	r3, r3, #1
 8006d44:	657b      	str	r3, [r7, #84]	; 0x54
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6a:	d107      	bne.n	8006d7c <UART_Start_Receive_IT+0x100>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a24      	ldr	r2, [pc, #144]	; (8006e08 <UART_Start_Receive_IT+0x18c>)
 8006d78:	665a      	str	r2, [r3, #100]	; 0x64
 8006d7a:	e002      	b.n	8006d82 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a23      	ldr	r2, [pc, #140]	; (8006e0c <UART_Start_Receive_IT+0x190>)
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d019      	beq.n	8006dc6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
 8006db2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e6      	bne.n	8006d92 <UART_Start_Receive_IT+0x116>
 8006dc4:	e018      	b.n	8006df8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f043 0320 	orr.w	r3, r3, #32
 8006dda:	653b      	str	r3, [r7, #80]	; 0x50
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	69f9      	ldr	r1, [r7, #28]
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	375c      	adds	r7, #92	; 0x5c
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	080070b3 	.word	0x080070b3
 8006e0c:	08006f57 	.word	0x08006f57

08006e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b095      	sub	sp, #84	; 0x54
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e36:	643b      	str	r3, [r7, #64]	; 0x40
 8006e38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e6      	bne.n	8006e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d118      	bne.n	8006eb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f023 0310 	bic.w	r3, r3, #16
 8006e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6979      	ldr	r1, [r7, #20]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006eca:	bf00      	nop
 8006ecc:	3754      	adds	r7, #84	; 0x54
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff fa8f 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b088      	sub	sp, #32
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6979      	ldr	r1, [r7, #20]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	613b      	str	r3, [r7, #16]
   return(result);
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e6      	bne.n	8006f0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fa51 	bl	80063f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4e:	bf00      	nop
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b096      	sub	sp, #88	; 0x58
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6c:	2b22      	cmp	r3, #34	; 0x22
 8006f6e:	f040 8094 	bne.w	800709a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006f80:	b2d9      	uxtb	r1, r3
 8006f82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8c:	400a      	ands	r2, r1
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d177      	bne.n	80070aa <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fce:	653b      	str	r3, [r7, #80]	; 0x50
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e6      	bne.n	8006fba <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800700c:	633a      	str	r2, [r7, #48]	; 0x30
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007030:	2b01      	cmp	r3, #1
 8007032:	d12e      	bne.n	8007092 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	60fb      	str	r3, [r7, #12]
   return(result);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0310 	bic.w	r3, r3, #16
 800704e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007058:	61fb      	str	r3, [r7, #28]
 800705a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	69b9      	ldr	r1, [r7, #24]
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	617b      	str	r3, [r7, #20]
   return(result);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e6      	bne.n	800703a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b10      	cmp	r3, #16
 8007078:	d103      	bne.n	8007082 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2210      	movs	r2, #16
 8007080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff f9ce 	bl	800642c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007090:	e00b      	b.n	80070aa <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff f9b6 	bl	8006404 <HAL_UART_RxCpltCallback>
}
 8007098:	e007      	b.n	80070aa <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0208 	orr.w	r2, r2, #8
 80070a8:	619a      	str	r2, [r3, #24]
}
 80070aa:	bf00      	nop
 80070ac:	3758      	adds	r7, #88	; 0x58
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b096      	sub	sp, #88	; 0x58
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070c8:	2b22      	cmp	r3, #34	; 0x22
 80070ca:	f040 8094 	bne.w	80071f6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80070de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80070e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80070e6:	4013      	ands	r3, r2
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	1c9a      	adds	r2, r3, #2
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d177      	bne.n	8007206 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
 8007136:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800713a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	61fb      	str	r3, [r7, #28]
   return(result);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007168:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800718c:	2b01      	cmp	r3, #1
 800718e:	d12e      	bne.n	80071ee <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f023 0310 	bic.w	r3, r3, #16
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6979      	ldr	r1, [r7, #20]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	613b      	str	r3, [r7, #16]
   return(result);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	2b10      	cmp	r3, #16
 80071d4:	d103      	bne.n	80071de <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2210      	movs	r2, #16
 80071dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f920 	bl	800642c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071ec:	e00b      	b.n	8007206 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff f908 	bl	8006404 <HAL_UART_RxCpltCallback>
}
 80071f4:	e007      	b.n	8007206 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0208 	orr.w	r2, r2, #8
 8007204:	619a      	str	r2, [r3, #24]
}
 8007206:	bf00      	nop
 8007208:	3758      	adds	r7, #88	; 0x58
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007210:	b084      	sub	sp, #16
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	f107 001c 	add.w	r0, r7, #28
 800721e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	2b01      	cmp	r3, #1
 8007226:	d120      	bne.n	800726a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	4b20      	ldr	r3, [pc, #128]	; (80072bc <USB_CoreInit+0xac>)
 800723a:	4013      	ands	r3, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800724c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724e:	2b01      	cmp	r3, #1
 8007250:	d105      	bne.n	800725e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa92 	bl	8007788 <USB_CoreReset>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	e010      	b.n	800728c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa86 	bl	8007788 <USB_CoreReset>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10b      	bne.n	80072aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f043 0206 	orr.w	r2, r3, #6
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f043 0220 	orr.w	r2, r3, #32
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072b6:	b004      	add	sp, #16
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	ffbdffbf 	.word	0xffbdffbf

080072c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f023 0201 	bic.w	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	460b      	mov	r3, r1
 80072ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d115      	bne.n	8007330 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007310:	2001      	movs	r0, #1
 8007312:	f7fa fe63 	bl	8001fdc <HAL_Delay>
      ms++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fa25 	bl	800776c <USB_GetMode>
 8007322:	4603      	mov	r3, r0
 8007324:	2b01      	cmp	r3, #1
 8007326:	d01e      	beq.n	8007366 <USB_SetCurrentMode+0x84>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b31      	cmp	r3, #49	; 0x31
 800732c:	d9f0      	bls.n	8007310 <USB_SetCurrentMode+0x2e>
 800732e:	e01a      	b.n	8007366 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d115      	bne.n	8007362 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007342:	2001      	movs	r0, #1
 8007344:	f7fa fe4a 	bl	8001fdc <HAL_Delay>
      ms++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa0c 	bl	800776c <USB_GetMode>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <USB_SetCurrentMode+0x84>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b31      	cmp	r3, #49	; 0x31
 800735e:	d9f0      	bls.n	8007342 <USB_SetCurrentMode+0x60>
 8007360:	e001      	b.n	8007366 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e005      	b.n	8007372 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b32      	cmp	r3, #50	; 0x32
 800736a:	d101      	bne.n	8007370 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800737c:	b084      	sub	sp, #16
 800737e:	b580      	push	{r7, lr}
 8007380:	b086      	sub	sp, #24
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800738a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	e009      	b.n	80073b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	3340      	adds	r3, #64	; 0x40
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	3301      	adds	r3, #1
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b0e      	cmp	r3, #14
 80073b4:	d9f2      	bls.n	800739c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d11c      	bne.n	80073f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ca:	f043 0302 	orr.w	r3, r3, #2
 80073ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e005      	b.n	8007402 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007408:	461a      	mov	r2, r3
 800740a:	2300      	movs	r3, #0
 800740c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007414:	4619      	mov	r1, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741c:	461a      	mov	r2, r3
 800741e:	680b      	ldr	r3, [r1, #0]
 8007420:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	2b01      	cmp	r3, #1
 8007426:	d10c      	bne.n	8007442 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800742e:	2100      	movs	r1, #0
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f961 	bl	80076f8 <USB_SetDevSpeed>
 8007436:	e008      	b.n	800744a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007438:	2101      	movs	r1, #1
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f95c 	bl	80076f8 <USB_SetDevSpeed>
 8007440:	e003      	b.n	800744a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007442:	2103      	movs	r1, #3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f957 	bl	80076f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800744a:	2110      	movs	r1, #16
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8f3 	bl	8007638 <USB_FlushTxFifo>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f91d 	bl	800769c <USB_FlushRxFifo>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007472:	461a      	mov	r2, r3
 8007474:	2300      	movs	r3, #0
 8007476:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	461a      	mov	r2, r3
 8007480:	2300      	movs	r3, #0
 8007482:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748a:	461a      	mov	r2, r3
 800748c:	2300      	movs	r3, #0
 800748e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007490:	2300      	movs	r3, #0
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	e043      	b.n	800751e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ac:	d118      	bne.n	80074e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	461a      	mov	r2, r3
 80074c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	e013      	b.n	80074f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d6:	461a      	mov	r2, r3
 80074d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e008      	b.n	80074f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	461a      	mov	r2, r3
 80074ee:	2300      	movs	r3, #0
 80074f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fe:	461a      	mov	r2, r3
 8007500:	2300      	movs	r3, #0
 8007502:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	461a      	mov	r2, r3
 8007512:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007516:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3301      	adds	r3, #1
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	429a      	cmp	r2, r3
 8007524:	d3b7      	bcc.n	8007496 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	e043      	b.n	80075b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800753e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007542:	d118      	bne.n	8007576 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007556:	461a      	mov	r2, r3
 8007558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e013      	b.n	8007588 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756c:	461a      	mov	r2, r3
 800756e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	e008      	b.n	8007588 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	461a      	mov	r2, r3
 8007584:	2300      	movs	r3, #0
 8007586:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007594:	461a      	mov	r2, r3
 8007596:	2300      	movs	r3, #0
 8007598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a6:	461a      	mov	r2, r3
 80075a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3301      	adds	r3, #1
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d3b7      	bcc.n	800752c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	f043 0210 	orr.w	r2, r3, #16
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699a      	ldr	r2, [r3, #24]
 80075f4:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <USB_DevInit+0x2b4>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f043 0208 	orr.w	r2, r3, #8
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800760e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007610:	2b01      	cmp	r3, #1
 8007612:	d105      	bne.n	8007620 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <USB_DevInit+0x2b8>)
 800761a:	4313      	orrs	r3, r2
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800762c:	b004      	add	sp, #16
 800762e:	4770      	bx	lr
 8007630:	803c3800 	.word	0x803c3800
 8007634:	40000004 	.word	0x40000004

08007638 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	4a12      	ldr	r2, [pc, #72]	; (8007698 <USB_FlushTxFifo+0x60>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e01a      	b.n	800768c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	daf3      	bge.n	8007646 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	019b      	lsls	r3, r3, #6
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	4a08      	ldr	r2, [pc, #32]	; (8007698 <USB_FlushTxFifo+0x60>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d901      	bls.n	800767e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e006      	b.n	800768c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b20      	cmp	r3, #32
 8007688:	d0f1      	beq.n	800766e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	00030d40 	.word	0x00030d40

0800769c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	4a11      	ldr	r2, [pc, #68]	; (80076f4 <USB_FlushRxFifo+0x58>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d901      	bls.n	80076b8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e017      	b.n	80076e8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	daf3      	bge.n	80076a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2210      	movs	r2, #16
 80076c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3301      	adds	r3, #1
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <USB_FlushRxFifo+0x58>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d901      	bls.n	80076da <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e006      	b.n	80076e8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d0f1      	beq.n	80076ca <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	00030d40 	.word	0x00030d40

080076f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007718:	4313      	orrs	r3, r2
 800771a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007744:	f023 0303 	bic.w	r3, r3, #3
 8007748:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007758:	f043 0302 	orr.w	r3, r3, #2
 800775c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0301 	and.w	r3, r3, #1
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <USB_CoreReset+0x60>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e01a      	b.n	80077da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	daf3      	bge.n	8007794 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f043 0201 	orr.w	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <USB_CoreReset+0x60>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e006      	b.n	80077da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d0f1      	beq.n	80077bc <USB_CoreReset+0x34>

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	00030d40 	.word	0x00030d40

080077ec <__errno>:
 80077ec:	4b01      	ldr	r3, [pc, #4]	; (80077f4 <__errno+0x8>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000028 	.word	0x20000028

080077f8 <__libc_init_array>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4d0d      	ldr	r5, [pc, #52]	; (8007830 <__libc_init_array+0x38>)
 80077fc:	4c0d      	ldr	r4, [pc, #52]	; (8007834 <__libc_init_array+0x3c>)
 80077fe:	1b64      	subs	r4, r4, r5
 8007800:	10a4      	asrs	r4, r4, #2
 8007802:	2600      	movs	r6, #0
 8007804:	42a6      	cmp	r6, r4
 8007806:	d109      	bne.n	800781c <__libc_init_array+0x24>
 8007808:	4d0b      	ldr	r5, [pc, #44]	; (8007838 <__libc_init_array+0x40>)
 800780a:	4c0c      	ldr	r4, [pc, #48]	; (800783c <__libc_init_array+0x44>)
 800780c:	f002 fe24 	bl	800a458 <_init>
 8007810:	1b64      	subs	r4, r4, r5
 8007812:	10a4      	asrs	r4, r4, #2
 8007814:	2600      	movs	r6, #0
 8007816:	42a6      	cmp	r6, r4
 8007818:	d105      	bne.n	8007826 <__libc_init_array+0x2e>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007820:	4798      	blx	r3
 8007822:	3601      	adds	r6, #1
 8007824:	e7ee      	b.n	8007804 <__libc_init_array+0xc>
 8007826:	f855 3b04 	ldr.w	r3, [r5], #4
 800782a:	4798      	blx	r3
 800782c:	3601      	adds	r6, #1
 800782e:	e7f2      	b.n	8007816 <__libc_init_array+0x1e>
 8007830:	0800a89c 	.word	0x0800a89c
 8007834:	0800a89c 	.word	0x0800a89c
 8007838:	0800a89c 	.word	0x0800a89c
 800783c:	0800a8a0 	.word	0x0800a8a0

08007840 <memset>:
 8007840:	4402      	add	r2, r0
 8007842:	4603      	mov	r3, r0
 8007844:	4293      	cmp	r3, r2
 8007846:	d100      	bne.n	800784a <memset+0xa>
 8007848:	4770      	bx	lr
 800784a:	f803 1b01 	strb.w	r1, [r3], #1
 800784e:	e7f9      	b.n	8007844 <memset+0x4>

08007850 <__cvt>:
 8007850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007852:	ed2d 8b02 	vpush	{d8}
 8007856:	eeb0 8b40 	vmov.f64	d8, d0
 800785a:	b085      	sub	sp, #20
 800785c:	4617      	mov	r7, r2
 800785e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007860:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007862:	ee18 2a90 	vmov	r2, s17
 8007866:	f025 0520 	bic.w	r5, r5, #32
 800786a:	2a00      	cmp	r2, #0
 800786c:	bfb6      	itet	lt
 800786e:	222d      	movlt	r2, #45	; 0x2d
 8007870:	2200      	movge	r2, #0
 8007872:	eeb1 8b40 	vneglt.f64	d8, d0
 8007876:	2d46      	cmp	r5, #70	; 0x46
 8007878:	460c      	mov	r4, r1
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	d004      	beq.n	8007888 <__cvt+0x38>
 800787e:	2d45      	cmp	r5, #69	; 0x45
 8007880:	d100      	bne.n	8007884 <__cvt+0x34>
 8007882:	3401      	adds	r4, #1
 8007884:	2102      	movs	r1, #2
 8007886:	e000      	b.n	800788a <__cvt+0x3a>
 8007888:	2103      	movs	r1, #3
 800788a:	ab03      	add	r3, sp, #12
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	ab02      	add	r3, sp, #8
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4622      	mov	r2, r4
 8007894:	4633      	mov	r3, r6
 8007896:	eeb0 0b48 	vmov.f64	d0, d8
 800789a:	f000 fcc9 	bl	8008230 <_dtoa_r>
 800789e:	2d47      	cmp	r5, #71	; 0x47
 80078a0:	d109      	bne.n	80078b6 <__cvt+0x66>
 80078a2:	07fb      	lsls	r3, r7, #31
 80078a4:	d407      	bmi.n	80078b6 <__cvt+0x66>
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078aa:	1a1b      	subs	r3, r3, r0
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	b005      	add	sp, #20
 80078b0:	ecbd 8b02 	vpop	{d8}
 80078b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078b6:	2d46      	cmp	r5, #70	; 0x46
 80078b8:	eb00 0204 	add.w	r2, r0, r4
 80078bc:	d10c      	bne.n	80078d8 <__cvt+0x88>
 80078be:	7803      	ldrb	r3, [r0, #0]
 80078c0:	2b30      	cmp	r3, #48	; 0x30
 80078c2:	d107      	bne.n	80078d4 <__cvt+0x84>
 80078c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078cc:	bf1c      	itt	ne
 80078ce:	f1c4 0401 	rsbne	r4, r4, #1
 80078d2:	6034      	strne	r4, [r6, #0]
 80078d4:	6833      	ldr	r3, [r6, #0]
 80078d6:	441a      	add	r2, r3
 80078d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e0:	bf08      	it	eq
 80078e2:	9203      	streq	r2, [sp, #12]
 80078e4:	2130      	movs	r1, #48	; 0x30
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d2dc      	bcs.n	80078a6 <__cvt+0x56>
 80078ec:	1c5c      	adds	r4, r3, #1
 80078ee:	9403      	str	r4, [sp, #12]
 80078f0:	7019      	strb	r1, [r3, #0]
 80078f2:	e7f8      	b.n	80078e6 <__cvt+0x96>

080078f4 <__exponent>:
 80078f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078f6:	4603      	mov	r3, r0
 80078f8:	2900      	cmp	r1, #0
 80078fa:	bfb8      	it	lt
 80078fc:	4249      	neglt	r1, r1
 80078fe:	f803 2b02 	strb.w	r2, [r3], #2
 8007902:	bfb4      	ite	lt
 8007904:	222d      	movlt	r2, #45	; 0x2d
 8007906:	222b      	movge	r2, #43	; 0x2b
 8007908:	2909      	cmp	r1, #9
 800790a:	7042      	strb	r2, [r0, #1]
 800790c:	dd2a      	ble.n	8007964 <__exponent+0x70>
 800790e:	f10d 0407 	add.w	r4, sp, #7
 8007912:	46a4      	mov	ip, r4
 8007914:	270a      	movs	r7, #10
 8007916:	46a6      	mov	lr, r4
 8007918:	460a      	mov	r2, r1
 800791a:	fb91 f6f7 	sdiv	r6, r1, r7
 800791e:	fb07 1516 	mls	r5, r7, r6, r1
 8007922:	3530      	adds	r5, #48	; 0x30
 8007924:	2a63      	cmp	r2, #99	; 0x63
 8007926:	f104 34ff 	add.w	r4, r4, #4294967295
 800792a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800792e:	4631      	mov	r1, r6
 8007930:	dcf1      	bgt.n	8007916 <__exponent+0x22>
 8007932:	3130      	adds	r1, #48	; 0x30
 8007934:	f1ae 0502 	sub.w	r5, lr, #2
 8007938:	f804 1c01 	strb.w	r1, [r4, #-1]
 800793c:	1c44      	adds	r4, r0, #1
 800793e:	4629      	mov	r1, r5
 8007940:	4561      	cmp	r1, ip
 8007942:	d30a      	bcc.n	800795a <__exponent+0x66>
 8007944:	f10d 0209 	add.w	r2, sp, #9
 8007948:	eba2 020e 	sub.w	r2, r2, lr
 800794c:	4565      	cmp	r5, ip
 800794e:	bf88      	it	hi
 8007950:	2200      	movhi	r2, #0
 8007952:	4413      	add	r3, r2
 8007954:	1a18      	subs	r0, r3, r0
 8007956:	b003      	add	sp, #12
 8007958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800795e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007962:	e7ed      	b.n	8007940 <__exponent+0x4c>
 8007964:	2330      	movs	r3, #48	; 0x30
 8007966:	3130      	adds	r1, #48	; 0x30
 8007968:	7083      	strb	r3, [r0, #2]
 800796a:	70c1      	strb	r1, [r0, #3]
 800796c:	1d03      	adds	r3, r0, #4
 800796e:	e7f1      	b.n	8007954 <__exponent+0x60>

08007970 <_printf_float>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	b08b      	sub	sp, #44	; 0x2c
 8007976:	460c      	mov	r4, r1
 8007978:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800797c:	4616      	mov	r6, r2
 800797e:	461f      	mov	r7, r3
 8007980:	4605      	mov	r5, r0
 8007982:	f001 f9d7 	bl	8008d34 <_localeconv_r>
 8007986:	f8d0 b000 	ldr.w	fp, [r0]
 800798a:	4658      	mov	r0, fp
 800798c:	f7f8 fc58 	bl	8000240 <strlen>
 8007990:	2300      	movs	r3, #0
 8007992:	9308      	str	r3, [sp, #32]
 8007994:	f8d8 3000 	ldr.w	r3, [r8]
 8007998:	f894 9018 	ldrb.w	r9, [r4, #24]
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	3307      	adds	r3, #7
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	f103 0108 	add.w	r1, r3, #8
 80079a8:	f8c8 1000 	str.w	r1, [r8]
 80079ac:	4682      	mov	sl, r0
 80079ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80079b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007c18 <_printf_float+0x2a8>
 80079ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80079be:	eeb0 6bc0 	vabs.f64	d6, d0
 80079c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80079c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ca:	dd24      	ble.n	8007a16 <_printf_float+0xa6>
 80079cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80079d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d4:	d502      	bpl.n	80079dc <_printf_float+0x6c>
 80079d6:	232d      	movs	r3, #45	; 0x2d
 80079d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079dc:	4b90      	ldr	r3, [pc, #576]	; (8007c20 <_printf_float+0x2b0>)
 80079de:	4891      	ldr	r0, [pc, #580]	; (8007c24 <_printf_float+0x2b4>)
 80079e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80079e4:	bf94      	ite	ls
 80079e6:	4698      	movls	r8, r3
 80079e8:	4680      	movhi	r8, r0
 80079ea:	2303      	movs	r3, #3
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	f022 0204 	bic.w	r2, r2, #4
 80079f2:	2300      	movs	r3, #0
 80079f4:	6022      	str	r2, [r4, #0]
 80079f6:	9304      	str	r3, [sp, #16]
 80079f8:	9700      	str	r7, [sp, #0]
 80079fa:	4633      	mov	r3, r6
 80079fc:	aa09      	add	r2, sp, #36	; 0x24
 80079fe:	4621      	mov	r1, r4
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 f9d3 	bl	8007dac <_printf_common>
 8007a06:	3001      	adds	r0, #1
 8007a08:	f040 808a 	bne.w	8007b20 <_printf_float+0x1b0>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	b00b      	add	sp, #44	; 0x2c
 8007a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a16:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1e:	d709      	bvc.n	8007a34 <_printf_float+0xc4>
 8007a20:	ee10 3a90 	vmov	r3, s1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bfbc      	itt	lt
 8007a28:	232d      	movlt	r3, #45	; 0x2d
 8007a2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a2e:	487e      	ldr	r0, [pc, #504]	; (8007c28 <_printf_float+0x2b8>)
 8007a30:	4b7e      	ldr	r3, [pc, #504]	; (8007c2c <_printf_float+0x2bc>)
 8007a32:	e7d5      	b.n	80079e0 <_printf_float+0x70>
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007a3a:	9104      	str	r1, [sp, #16]
 8007a3c:	1c59      	adds	r1, r3, #1
 8007a3e:	d13c      	bne.n	8007aba <_printf_float+0x14a>
 8007a40:	2306      	movs	r3, #6
 8007a42:	6063      	str	r3, [r4, #4]
 8007a44:	2300      	movs	r3, #0
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	ab08      	add	r3, sp, #32
 8007a4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007a4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a52:	ab07      	add	r3, sp, #28
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	f10d 031b 	add.w	r3, sp, #27
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f7ff fef6 	bl	8007850 <__cvt>
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	9907      	ldr	r1, [sp, #28]
 8007a68:	2b47      	cmp	r3, #71	; 0x47
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	d108      	bne.n	8007a80 <_printf_float+0x110>
 8007a6e:	1cc8      	adds	r0, r1, #3
 8007a70:	db02      	blt.n	8007a78 <_printf_float+0x108>
 8007a72:	6863      	ldr	r3, [r4, #4]
 8007a74:	4299      	cmp	r1, r3
 8007a76:	dd41      	ble.n	8007afc <_printf_float+0x18c>
 8007a78:	f1a9 0902 	sub.w	r9, r9, #2
 8007a7c:	fa5f f989 	uxtb.w	r9, r9
 8007a80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a84:	d820      	bhi.n	8007ac8 <_printf_float+0x158>
 8007a86:	3901      	subs	r1, #1
 8007a88:	464a      	mov	r2, r9
 8007a8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a8e:	9107      	str	r1, [sp, #28]
 8007a90:	f7ff ff30 	bl	80078f4 <__exponent>
 8007a94:	9a08      	ldr	r2, [sp, #32]
 8007a96:	9004      	str	r0, [sp, #16]
 8007a98:	1813      	adds	r3, r2, r0
 8007a9a:	2a01      	cmp	r2, #1
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	dc02      	bgt.n	8007aa6 <_printf_float+0x136>
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	07d2      	lsls	r2, r2, #31
 8007aa4:	d501      	bpl.n	8007aaa <_printf_float+0x13a>
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0a2      	beq.n	80079f8 <_printf_float+0x88>
 8007ab2:	232d      	movs	r3, #45	; 0x2d
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab8:	e79e      	b.n	80079f8 <_printf_float+0x88>
 8007aba:	9904      	ldr	r1, [sp, #16]
 8007abc:	2947      	cmp	r1, #71	; 0x47
 8007abe:	d1c1      	bne.n	8007a44 <_printf_float+0xd4>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1bf      	bne.n	8007a44 <_printf_float+0xd4>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e7bc      	b.n	8007a42 <_printf_float+0xd2>
 8007ac8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007acc:	d118      	bne.n	8007b00 <_printf_float+0x190>
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	6863      	ldr	r3, [r4, #4]
 8007ad2:	dd0b      	ble.n	8007aec <_printf_float+0x17c>
 8007ad4:	6121      	str	r1, [r4, #16]
 8007ad6:	b913      	cbnz	r3, 8007ade <_printf_float+0x16e>
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	07d0      	lsls	r0, r2, #31
 8007adc:	d502      	bpl.n	8007ae4 <_printf_float+0x174>
 8007ade:	3301      	adds	r3, #1
 8007ae0:	440b      	add	r3, r1
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	e7de      	b.n	8007aaa <_printf_float+0x13a>
 8007aec:	b913      	cbnz	r3, 8007af4 <_printf_float+0x184>
 8007aee:	6822      	ldr	r2, [r4, #0]
 8007af0:	07d2      	lsls	r2, r2, #31
 8007af2:	d501      	bpl.n	8007af8 <_printf_float+0x188>
 8007af4:	3302      	adds	r3, #2
 8007af6:	e7f4      	b.n	8007ae2 <_printf_float+0x172>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e7f2      	b.n	8007ae2 <_printf_float+0x172>
 8007afc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b00:	9b08      	ldr	r3, [sp, #32]
 8007b02:	4299      	cmp	r1, r3
 8007b04:	db05      	blt.n	8007b12 <_printf_float+0x1a2>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	6121      	str	r1, [r4, #16]
 8007b0a:	07d8      	lsls	r0, r3, #31
 8007b0c:	d5ea      	bpl.n	8007ae4 <_printf_float+0x174>
 8007b0e:	1c4b      	adds	r3, r1, #1
 8007b10:	e7e7      	b.n	8007ae2 <_printf_float+0x172>
 8007b12:	2900      	cmp	r1, #0
 8007b14:	bfd4      	ite	le
 8007b16:	f1c1 0202 	rsble	r2, r1, #2
 8007b1a:	2201      	movgt	r2, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	e7e0      	b.n	8007ae2 <_printf_float+0x172>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	055a      	lsls	r2, r3, #21
 8007b24:	d407      	bmi.n	8007b36 <_printf_float+0x1c6>
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	4642      	mov	r2, r8
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b8      	blx	r7
 8007b30:	3001      	adds	r0, #1
 8007b32:	d12a      	bne.n	8007b8a <_printf_float+0x21a>
 8007b34:	e76a      	b.n	8007a0c <_printf_float+0x9c>
 8007b36:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b3a:	f240 80e2 	bls.w	8007d02 <_printf_float+0x392>
 8007b3e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007b42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4a:	d133      	bne.n	8007bb4 <_printf_float+0x244>
 8007b4c:	4a38      	ldr	r2, [pc, #224]	; (8007c30 <_printf_float+0x2c0>)
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af58 	beq.w	8007a0c <_printf_float+0x9c>
 8007b5c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	db02      	blt.n	8007b6a <_printf_float+0x1fa>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07d8      	lsls	r0, r3, #31
 8007b68:	d50f      	bpl.n	8007b8a <_printf_float+0x21a>
 8007b6a:	4653      	mov	r3, sl
 8007b6c:	465a      	mov	r2, fp
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	f43f af49 	beq.w	8007a0c <_printf_float+0x9c>
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	f104 091a 	add.w	r9, r4, #26
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	4543      	cmp	r3, r8
 8007b88:	dc09      	bgt.n	8007b9e <_printf_float+0x22e>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	079b      	lsls	r3, r3, #30
 8007b8e:	f100 8108 	bmi.w	8007da2 <_printf_float+0x432>
 8007b92:	68e0      	ldr	r0, [r4, #12]
 8007b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b96:	4298      	cmp	r0, r3
 8007b98:	bfb8      	it	lt
 8007b9a:	4618      	movlt	r0, r3
 8007b9c:	e738      	b.n	8007a10 <_printf_float+0xa0>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	464a      	mov	r2, r9
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f43f af2f 	beq.w	8007a0c <_printf_float+0x9c>
 8007bae:	f108 0801 	add.w	r8, r8, #1
 8007bb2:	e7e6      	b.n	8007b82 <_printf_float+0x212>
 8007bb4:	9b07      	ldr	r3, [sp, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dc3c      	bgt.n	8007c34 <_printf_float+0x2c4>
 8007bba:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <_printf_float+0x2c0>)
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f43f af21 	beq.w	8007a0c <_printf_float+0x9c>
 8007bca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	d102      	bne.n	8007bd8 <_printf_float+0x268>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	07d9      	lsls	r1, r3, #31
 8007bd6:	d5d8      	bpl.n	8007b8a <_printf_float+0x21a>
 8007bd8:	4653      	mov	r3, sl
 8007bda:	465a      	mov	r2, fp
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	f43f af12 	beq.w	8007a0c <_printf_float+0x9c>
 8007be8:	f04f 0900 	mov.w	r9, #0
 8007bec:	f104 0a1a 	add.w	sl, r4, #26
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	425b      	negs	r3, r3
 8007bf4:	454b      	cmp	r3, r9
 8007bf6:	dc01      	bgt.n	8007bfc <_printf_float+0x28c>
 8007bf8:	9b08      	ldr	r3, [sp, #32]
 8007bfa:	e795      	b.n	8007b28 <_printf_float+0x1b8>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4652      	mov	r2, sl
 8007c00:	4631      	mov	r1, r6
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	f43f af00 	beq.w	8007a0c <_printf_float+0x9c>
 8007c0c:	f109 0901 	add.w	r9, r9, #1
 8007c10:	e7ee      	b.n	8007bf0 <_printf_float+0x280>
 8007c12:	bf00      	nop
 8007c14:	f3af 8000 	nop.w
 8007c18:	ffffffff 	.word	0xffffffff
 8007c1c:	7fefffff 	.word	0x7fefffff
 8007c20:	0800a4b4 	.word	0x0800a4b4
 8007c24:	0800a4b8 	.word	0x0800a4b8
 8007c28:	0800a4c0 	.word	0x0800a4c0
 8007c2c:	0800a4bc 	.word	0x0800a4bc
 8007c30:	0800a4c4 	.word	0x0800a4c4
 8007c34:	9a08      	ldr	r2, [sp, #32]
 8007c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	bfa8      	it	ge
 8007c3c:	461a      	movge	r2, r3
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	4691      	mov	r9, r2
 8007c42:	dc38      	bgt.n	8007cb6 <_printf_float+0x346>
 8007c44:	2300      	movs	r3, #0
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c4c:	f104 021a 	add.w	r2, r4, #26
 8007c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c52:	9905      	ldr	r1, [sp, #20]
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	eba3 0309 	sub.w	r3, r3, r9
 8007c5a:	428b      	cmp	r3, r1
 8007c5c:	dc33      	bgt.n	8007cc6 <_printf_float+0x356>
 8007c5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	db3c      	blt.n	8007ce0 <_printf_float+0x370>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	07da      	lsls	r2, r3, #31
 8007c6a:	d439      	bmi.n	8007ce0 <_printf_float+0x370>
 8007c6c:	9a08      	ldr	r2, [sp, #32]
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	9907      	ldr	r1, [sp, #28]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	eba2 0901 	sub.w	r9, r2, r1
 8007c78:	4599      	cmp	r9, r3
 8007c7a:	bfa8      	it	ge
 8007c7c:	4699      	movge	r9, r3
 8007c7e:	f1b9 0f00 	cmp.w	r9, #0
 8007c82:	dc35      	bgt.n	8007cf0 <_printf_float+0x380>
 8007c84:	f04f 0800 	mov.w	r8, #0
 8007c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c8c:	f104 0a1a 	add.w	sl, r4, #26
 8007c90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	eba3 0309 	sub.w	r3, r3, r9
 8007c9a:	4543      	cmp	r3, r8
 8007c9c:	f77f af75 	ble.w	8007b8a <_printf_float+0x21a>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f aeae 	beq.w	8007a0c <_printf_float+0x9c>
 8007cb0:	f108 0801 	add.w	r8, r8, #1
 8007cb4:	e7ec      	b.n	8007c90 <_printf_float+0x320>
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4642      	mov	r2, r8
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d1bf      	bne.n	8007c44 <_printf_float+0x2d4>
 8007cc4:	e6a2      	b.n	8007a0c <_printf_float+0x9c>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	9204      	str	r2, [sp, #16]
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	f43f ae9b 	beq.w	8007a0c <_printf_float+0x9c>
 8007cd6:	9b05      	ldr	r3, [sp, #20]
 8007cd8:	9a04      	ldr	r2, [sp, #16]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	e7b7      	b.n	8007c50 <_printf_float+0x2e0>
 8007ce0:	4653      	mov	r3, sl
 8007ce2:	465a      	mov	r2, fp
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	d1be      	bne.n	8007c6c <_printf_float+0x2fc>
 8007cee:	e68d      	b.n	8007a0c <_printf_float+0x9c>
 8007cf0:	9a04      	ldr	r2, [sp, #16]
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	4442      	add	r2, r8
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b8      	blx	r7
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d1c1      	bne.n	8007c84 <_printf_float+0x314>
 8007d00:	e684      	b.n	8007a0c <_printf_float+0x9c>
 8007d02:	9a08      	ldr	r2, [sp, #32]
 8007d04:	2a01      	cmp	r2, #1
 8007d06:	dc01      	bgt.n	8007d0c <_printf_float+0x39c>
 8007d08:	07db      	lsls	r3, r3, #31
 8007d0a:	d537      	bpl.n	8007d7c <_printf_float+0x40c>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4642      	mov	r2, r8
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f ae78 	beq.w	8007a0c <_printf_float+0x9c>
 8007d1c:	4653      	mov	r3, sl
 8007d1e:	465a      	mov	r2, fp
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f ae70 	beq.w	8007a0c <_printf_float+0x9c>
 8007d2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007d30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d38:	d01b      	beq.n	8007d72 <_printf_float+0x402>
 8007d3a:	9b08      	ldr	r3, [sp, #32]
 8007d3c:	f108 0201 	add.w	r2, r8, #1
 8007d40:	3b01      	subs	r3, #1
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d10e      	bne.n	8007d6a <_printf_float+0x3fa>
 8007d4c:	e65e      	b.n	8007a0c <_printf_float+0x9c>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	464a      	mov	r2, r9
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	f43f ae57 	beq.w	8007a0c <_printf_float+0x9c>
 8007d5e:	f108 0801 	add.w	r8, r8, #1
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	4543      	cmp	r3, r8
 8007d68:	dcf1      	bgt.n	8007d4e <_printf_float+0x3de>
 8007d6a:	9b04      	ldr	r3, [sp, #16]
 8007d6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d70:	e6db      	b.n	8007b2a <_printf_float+0x1ba>
 8007d72:	f04f 0800 	mov.w	r8, #0
 8007d76:	f104 091a 	add.w	r9, r4, #26
 8007d7a:	e7f2      	b.n	8007d62 <_printf_float+0x3f2>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4642      	mov	r2, r8
 8007d80:	e7df      	b.n	8007d42 <_printf_float+0x3d2>
 8007d82:	2301      	movs	r3, #1
 8007d84:	464a      	mov	r2, r9
 8007d86:	4631      	mov	r1, r6
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f43f ae3d 	beq.w	8007a0c <_printf_float+0x9c>
 8007d92:	f108 0801 	add.w	r8, r8, #1
 8007d96:	68e3      	ldr	r3, [r4, #12]
 8007d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d9a:	1a5b      	subs	r3, r3, r1
 8007d9c:	4543      	cmp	r3, r8
 8007d9e:	dcf0      	bgt.n	8007d82 <_printf_float+0x412>
 8007da0:	e6f7      	b.n	8007b92 <_printf_float+0x222>
 8007da2:	f04f 0800 	mov.w	r8, #0
 8007da6:	f104 0919 	add.w	r9, r4, #25
 8007daa:	e7f4      	b.n	8007d96 <_printf_float+0x426>

08007dac <_printf_common>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	4616      	mov	r6, r2
 8007db2:	4699      	mov	r9, r3
 8007db4:	688a      	ldr	r2, [r1, #8]
 8007db6:	690b      	ldr	r3, [r1, #16]
 8007db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	bfb8      	it	lt
 8007dc0:	4613      	movlt	r3, r2
 8007dc2:	6033      	str	r3, [r6, #0]
 8007dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dc8:	4607      	mov	r7, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	b10a      	cbz	r2, 8007dd2 <_printf_common+0x26>
 8007dce:	3301      	adds	r3, #1
 8007dd0:	6033      	str	r3, [r6, #0]
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	0699      	lsls	r1, r3, #26
 8007dd6:	bf42      	ittt	mi
 8007dd8:	6833      	ldrmi	r3, [r6, #0]
 8007dda:	3302      	addmi	r3, #2
 8007ddc:	6033      	strmi	r3, [r6, #0]
 8007dde:	6825      	ldr	r5, [r4, #0]
 8007de0:	f015 0506 	ands.w	r5, r5, #6
 8007de4:	d106      	bne.n	8007df4 <_printf_common+0x48>
 8007de6:	f104 0a19 	add.w	sl, r4, #25
 8007dea:	68e3      	ldr	r3, [r4, #12]
 8007dec:	6832      	ldr	r2, [r6, #0]
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	42ab      	cmp	r3, r5
 8007df2:	dc26      	bgt.n	8007e42 <_printf_common+0x96>
 8007df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007df8:	1e13      	subs	r3, r2, #0
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	bf18      	it	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	0692      	lsls	r2, r2, #26
 8007e02:	d42b      	bmi.n	8007e5c <_printf_common+0xb0>
 8007e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e08:	4649      	mov	r1, r9
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	47c0      	blx	r8
 8007e0e:	3001      	adds	r0, #1
 8007e10:	d01e      	beq.n	8007e50 <_printf_common+0xa4>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	68e5      	ldr	r5, [r4, #12]
 8007e16:	6832      	ldr	r2, [r6, #0]
 8007e18:	f003 0306 	and.w	r3, r3, #6
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	bf08      	it	eq
 8007e20:	1aad      	subeq	r5, r5, r2
 8007e22:	68a3      	ldr	r3, [r4, #8]
 8007e24:	6922      	ldr	r2, [r4, #16]
 8007e26:	bf0c      	ite	eq
 8007e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e2c:	2500      	movne	r5, #0
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	bfc4      	itt	gt
 8007e32:	1a9b      	subgt	r3, r3, r2
 8007e34:	18ed      	addgt	r5, r5, r3
 8007e36:	2600      	movs	r6, #0
 8007e38:	341a      	adds	r4, #26
 8007e3a:	42b5      	cmp	r5, r6
 8007e3c:	d11a      	bne.n	8007e74 <_printf_common+0xc8>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e008      	b.n	8007e54 <_printf_common+0xa8>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4652      	mov	r2, sl
 8007e46:	4649      	mov	r1, r9
 8007e48:	4638      	mov	r0, r7
 8007e4a:	47c0      	blx	r8
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d103      	bne.n	8007e58 <_printf_common+0xac>
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e58:	3501      	adds	r5, #1
 8007e5a:	e7c6      	b.n	8007dea <_printf_common+0x3e>
 8007e5c:	18e1      	adds	r1, r4, r3
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	2030      	movs	r0, #48	; 0x30
 8007e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e66:	4422      	add	r2, r4
 8007e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e70:	3302      	adds	r3, #2
 8007e72:	e7c7      	b.n	8007e04 <_printf_common+0x58>
 8007e74:	2301      	movs	r3, #1
 8007e76:	4622      	mov	r2, r4
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d0e6      	beq.n	8007e50 <_printf_common+0xa4>
 8007e82:	3601      	adds	r6, #1
 8007e84:	e7d9      	b.n	8007e3a <_printf_common+0x8e>
	...

08007e88 <_printf_i>:
 8007e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	4691      	mov	r9, r2
 8007e90:	7e27      	ldrb	r7, [r4, #24]
 8007e92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e94:	2f78      	cmp	r7, #120	; 0x78
 8007e96:	4680      	mov	r8, r0
 8007e98:	469a      	mov	sl, r3
 8007e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e9e:	d807      	bhi.n	8007eb0 <_printf_i+0x28>
 8007ea0:	2f62      	cmp	r7, #98	; 0x62
 8007ea2:	d80a      	bhi.n	8007eba <_printf_i+0x32>
 8007ea4:	2f00      	cmp	r7, #0
 8007ea6:	f000 80d8 	beq.w	800805a <_printf_i+0x1d2>
 8007eaa:	2f58      	cmp	r7, #88	; 0x58
 8007eac:	f000 80a3 	beq.w	8007ff6 <_printf_i+0x16e>
 8007eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007eb8:	e03a      	b.n	8007f30 <_printf_i+0xa8>
 8007eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ebe:	2b15      	cmp	r3, #21
 8007ec0:	d8f6      	bhi.n	8007eb0 <_printf_i+0x28>
 8007ec2:	a001      	add	r0, pc, #4	; (adr r0, 8007ec8 <_printf_i+0x40>)
 8007ec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ec8:	08007f21 	.word	0x08007f21
 8007ecc:	08007f35 	.word	0x08007f35
 8007ed0:	08007eb1 	.word	0x08007eb1
 8007ed4:	08007eb1 	.word	0x08007eb1
 8007ed8:	08007eb1 	.word	0x08007eb1
 8007edc:	08007eb1 	.word	0x08007eb1
 8007ee0:	08007f35 	.word	0x08007f35
 8007ee4:	08007eb1 	.word	0x08007eb1
 8007ee8:	08007eb1 	.word	0x08007eb1
 8007eec:	08007eb1 	.word	0x08007eb1
 8007ef0:	08007eb1 	.word	0x08007eb1
 8007ef4:	08008041 	.word	0x08008041
 8007ef8:	08007f65 	.word	0x08007f65
 8007efc:	08008023 	.word	0x08008023
 8007f00:	08007eb1 	.word	0x08007eb1
 8007f04:	08007eb1 	.word	0x08007eb1
 8007f08:	08008063 	.word	0x08008063
 8007f0c:	08007eb1 	.word	0x08007eb1
 8007f10:	08007f65 	.word	0x08007f65
 8007f14:	08007eb1 	.word	0x08007eb1
 8007f18:	08007eb1 	.word	0x08007eb1
 8007f1c:	0800802b 	.word	0x0800802b
 8007f20:	680b      	ldr	r3, [r1, #0]
 8007f22:	1d1a      	adds	r2, r3, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	600a      	str	r2, [r1, #0]
 8007f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0a3      	b.n	800807c <_printf_i+0x1f4>
 8007f34:	6825      	ldr	r5, [r4, #0]
 8007f36:	6808      	ldr	r0, [r1, #0]
 8007f38:	062e      	lsls	r6, r5, #24
 8007f3a:	f100 0304 	add.w	r3, r0, #4
 8007f3e:	d50a      	bpl.n	8007f56 <_printf_i+0xce>
 8007f40:	6805      	ldr	r5, [r0, #0]
 8007f42:	600b      	str	r3, [r1, #0]
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	da03      	bge.n	8007f50 <_printf_i+0xc8>
 8007f48:	232d      	movs	r3, #45	; 0x2d
 8007f4a:	426d      	negs	r5, r5
 8007f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f50:	485e      	ldr	r0, [pc, #376]	; (80080cc <_printf_i+0x244>)
 8007f52:	230a      	movs	r3, #10
 8007f54:	e019      	b.n	8007f8a <_printf_i+0x102>
 8007f56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f5a:	6805      	ldr	r5, [r0, #0]
 8007f5c:	600b      	str	r3, [r1, #0]
 8007f5e:	bf18      	it	ne
 8007f60:	b22d      	sxthne	r5, r5
 8007f62:	e7ef      	b.n	8007f44 <_printf_i+0xbc>
 8007f64:	680b      	ldr	r3, [r1, #0]
 8007f66:	6825      	ldr	r5, [r4, #0]
 8007f68:	1d18      	adds	r0, r3, #4
 8007f6a:	6008      	str	r0, [r1, #0]
 8007f6c:	0628      	lsls	r0, r5, #24
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0xec>
 8007f70:	681d      	ldr	r5, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <_printf_i+0xf2>
 8007f74:	0669      	lsls	r1, r5, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0xe8>
 8007f78:	881d      	ldrh	r5, [r3, #0]
 8007f7a:	4854      	ldr	r0, [pc, #336]	; (80080cc <_printf_i+0x244>)
 8007f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f7e:	bf0c      	ite	eq
 8007f80:	2308      	moveq	r3, #8
 8007f82:	230a      	movne	r3, #10
 8007f84:	2100      	movs	r1, #0
 8007f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f8a:	6866      	ldr	r6, [r4, #4]
 8007f8c:	60a6      	str	r6, [r4, #8]
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	bfa2      	ittt	ge
 8007f92:	6821      	ldrge	r1, [r4, #0]
 8007f94:	f021 0104 	bicge.w	r1, r1, #4
 8007f98:	6021      	strge	r1, [r4, #0]
 8007f9a:	b90d      	cbnz	r5, 8007fa0 <_printf_i+0x118>
 8007f9c:	2e00      	cmp	r6, #0
 8007f9e:	d04d      	beq.n	800803c <_printf_i+0x1b4>
 8007fa0:	4616      	mov	r6, r2
 8007fa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fa6:	fb03 5711 	mls	r7, r3, r1, r5
 8007faa:	5dc7      	ldrb	r7, [r0, r7]
 8007fac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fb0:	462f      	mov	r7, r5
 8007fb2:	42bb      	cmp	r3, r7
 8007fb4:	460d      	mov	r5, r1
 8007fb6:	d9f4      	bls.n	8007fa2 <_printf_i+0x11a>
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d10b      	bne.n	8007fd4 <_printf_i+0x14c>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	07df      	lsls	r7, r3, #31
 8007fc0:	d508      	bpl.n	8007fd4 <_printf_i+0x14c>
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	bfde      	ittt	le
 8007fca:	2330      	movle	r3, #48	; 0x30
 8007fcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fd4:	1b92      	subs	r2, r2, r6
 8007fd6:	6122      	str	r2, [r4, #16]
 8007fd8:	f8cd a000 	str.w	sl, [sp]
 8007fdc:	464b      	mov	r3, r9
 8007fde:	aa03      	add	r2, sp, #12
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	f7ff fee2 	bl	8007dac <_printf_common>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d14c      	bne.n	8008086 <_printf_i+0x1fe>
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	b004      	add	sp, #16
 8007ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff6:	4835      	ldr	r0, [pc, #212]	; (80080cc <_printf_i+0x244>)
 8007ff8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	680e      	ldr	r6, [r1, #0]
 8008000:	061f      	lsls	r7, r3, #24
 8008002:	f856 5b04 	ldr.w	r5, [r6], #4
 8008006:	600e      	str	r6, [r1, #0]
 8008008:	d514      	bpl.n	8008034 <_printf_i+0x1ac>
 800800a:	07d9      	lsls	r1, r3, #31
 800800c:	bf44      	itt	mi
 800800e:	f043 0320 	orrmi.w	r3, r3, #32
 8008012:	6023      	strmi	r3, [r4, #0]
 8008014:	b91d      	cbnz	r5, 800801e <_printf_i+0x196>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	f023 0320 	bic.w	r3, r3, #32
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	2310      	movs	r3, #16
 8008020:	e7b0      	b.n	8007f84 <_printf_i+0xfc>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	f043 0320 	orr.w	r3, r3, #32
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	2378      	movs	r3, #120	; 0x78
 800802c:	4828      	ldr	r0, [pc, #160]	; (80080d0 <_printf_i+0x248>)
 800802e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008032:	e7e3      	b.n	8007ffc <_printf_i+0x174>
 8008034:	065e      	lsls	r6, r3, #25
 8008036:	bf48      	it	mi
 8008038:	b2ad      	uxthmi	r5, r5
 800803a:	e7e6      	b.n	800800a <_printf_i+0x182>
 800803c:	4616      	mov	r6, r2
 800803e:	e7bb      	b.n	8007fb8 <_printf_i+0x130>
 8008040:	680b      	ldr	r3, [r1, #0]
 8008042:	6826      	ldr	r6, [r4, #0]
 8008044:	6960      	ldr	r0, [r4, #20]
 8008046:	1d1d      	adds	r5, r3, #4
 8008048:	600d      	str	r5, [r1, #0]
 800804a:	0635      	lsls	r5, r6, #24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	d501      	bpl.n	8008054 <_printf_i+0x1cc>
 8008050:	6018      	str	r0, [r3, #0]
 8008052:	e002      	b.n	800805a <_printf_i+0x1d2>
 8008054:	0671      	lsls	r1, r6, #25
 8008056:	d5fb      	bpl.n	8008050 <_printf_i+0x1c8>
 8008058:	8018      	strh	r0, [r3, #0]
 800805a:	2300      	movs	r3, #0
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	4616      	mov	r6, r2
 8008060:	e7ba      	b.n	8007fd8 <_printf_i+0x150>
 8008062:	680b      	ldr	r3, [r1, #0]
 8008064:	1d1a      	adds	r2, r3, #4
 8008066:	600a      	str	r2, [r1, #0]
 8008068:	681e      	ldr	r6, [r3, #0]
 800806a:	6862      	ldr	r2, [r4, #4]
 800806c:	2100      	movs	r1, #0
 800806e:	4630      	mov	r0, r6
 8008070:	f7f8 f8ee 	bl	8000250 <memchr>
 8008074:	b108      	cbz	r0, 800807a <_printf_i+0x1f2>
 8008076:	1b80      	subs	r0, r0, r6
 8008078:	6060      	str	r0, [r4, #4]
 800807a:	6863      	ldr	r3, [r4, #4]
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	2300      	movs	r3, #0
 8008080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008084:	e7a8      	b.n	8007fd8 <_printf_i+0x150>
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	4632      	mov	r2, r6
 800808a:	4649      	mov	r1, r9
 800808c:	4640      	mov	r0, r8
 800808e:	47d0      	blx	sl
 8008090:	3001      	adds	r0, #1
 8008092:	d0ab      	beq.n	8007fec <_printf_i+0x164>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	079b      	lsls	r3, r3, #30
 8008098:	d413      	bmi.n	80080c2 <_printf_i+0x23a>
 800809a:	68e0      	ldr	r0, [r4, #12]
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	4298      	cmp	r0, r3
 80080a0:	bfb8      	it	lt
 80080a2:	4618      	movlt	r0, r3
 80080a4:	e7a4      	b.n	8007ff0 <_printf_i+0x168>
 80080a6:	2301      	movs	r3, #1
 80080a8:	4632      	mov	r2, r6
 80080aa:	4649      	mov	r1, r9
 80080ac:	4640      	mov	r0, r8
 80080ae:	47d0      	blx	sl
 80080b0:	3001      	adds	r0, #1
 80080b2:	d09b      	beq.n	8007fec <_printf_i+0x164>
 80080b4:	3501      	adds	r5, #1
 80080b6:	68e3      	ldr	r3, [r4, #12]
 80080b8:	9903      	ldr	r1, [sp, #12]
 80080ba:	1a5b      	subs	r3, r3, r1
 80080bc:	42ab      	cmp	r3, r5
 80080be:	dcf2      	bgt.n	80080a6 <_printf_i+0x21e>
 80080c0:	e7eb      	b.n	800809a <_printf_i+0x212>
 80080c2:	2500      	movs	r5, #0
 80080c4:	f104 0619 	add.w	r6, r4, #25
 80080c8:	e7f5      	b.n	80080b6 <_printf_i+0x22e>
 80080ca:	bf00      	nop
 80080cc:	0800a4c6 	.word	0x0800a4c6
 80080d0:	0800a4d7 	.word	0x0800a4d7

080080d4 <siprintf>:
 80080d4:	b40e      	push	{r1, r2, r3}
 80080d6:	b500      	push	{lr}
 80080d8:	b09c      	sub	sp, #112	; 0x70
 80080da:	ab1d      	add	r3, sp, #116	; 0x74
 80080dc:	9002      	str	r0, [sp, #8]
 80080de:	9006      	str	r0, [sp, #24]
 80080e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080e4:	4809      	ldr	r0, [pc, #36]	; (800810c <siprintf+0x38>)
 80080e6:	9107      	str	r1, [sp, #28]
 80080e8:	9104      	str	r1, [sp, #16]
 80080ea:	4909      	ldr	r1, [pc, #36]	; (8008110 <siprintf+0x3c>)
 80080ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f0:	9105      	str	r1, [sp, #20]
 80080f2:	6800      	ldr	r0, [r0, #0]
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	a902      	add	r1, sp, #8
 80080f8:	f001 faca 	bl	8009690 <_svfiprintf_r>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	b01c      	add	sp, #112	; 0x70
 8008104:	f85d eb04 	ldr.w	lr, [sp], #4
 8008108:	b003      	add	sp, #12
 800810a:	4770      	bx	lr
 800810c:	20000028 	.word	0x20000028
 8008110:	ffff0208 	.word	0xffff0208

08008114 <quorem>:
 8008114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	6903      	ldr	r3, [r0, #16]
 800811a:	690c      	ldr	r4, [r1, #16]
 800811c:	42a3      	cmp	r3, r4
 800811e:	4607      	mov	r7, r0
 8008120:	f2c0 8081 	blt.w	8008226 <quorem+0x112>
 8008124:	3c01      	subs	r4, #1
 8008126:	f101 0814 	add.w	r8, r1, #20
 800812a:	f100 0514 	add.w	r5, r0, #20
 800812e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800813c:	3301      	adds	r3, #1
 800813e:	429a      	cmp	r2, r3
 8008140:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008144:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008148:	fbb2 f6f3 	udiv	r6, r2, r3
 800814c:	d331      	bcc.n	80081b2 <quorem+0x9e>
 800814e:	f04f 0e00 	mov.w	lr, #0
 8008152:	4640      	mov	r0, r8
 8008154:	46ac      	mov	ip, r5
 8008156:	46f2      	mov	sl, lr
 8008158:	f850 2b04 	ldr.w	r2, [r0], #4
 800815c:	b293      	uxth	r3, r2
 800815e:	fb06 e303 	mla	r3, r6, r3, lr
 8008162:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008166:	b29b      	uxth	r3, r3
 8008168:	ebaa 0303 	sub.w	r3, sl, r3
 800816c:	0c12      	lsrs	r2, r2, #16
 800816e:	f8dc a000 	ldr.w	sl, [ip]
 8008172:	fb06 e202 	mla	r2, r6, r2, lr
 8008176:	fa13 f38a 	uxtah	r3, r3, sl
 800817a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800817e:	fa1f fa82 	uxth.w	sl, r2
 8008182:	f8dc 2000 	ldr.w	r2, [ip]
 8008186:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800818a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800818e:	b29b      	uxth	r3, r3
 8008190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008194:	4581      	cmp	r9, r0
 8008196:	f84c 3b04 	str.w	r3, [ip], #4
 800819a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800819e:	d2db      	bcs.n	8008158 <quorem+0x44>
 80081a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80081a4:	b92b      	cbnz	r3, 80081b2 <quorem+0x9e>
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	3b04      	subs	r3, #4
 80081aa:	429d      	cmp	r5, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	d32e      	bcc.n	800820e <quorem+0xfa>
 80081b0:	613c      	str	r4, [r7, #16]
 80081b2:	4638      	mov	r0, r7
 80081b4:	f001 f856 	bl	8009264 <__mcmp>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	db24      	blt.n	8008206 <quorem+0xf2>
 80081bc:	3601      	adds	r6, #1
 80081be:	4628      	mov	r0, r5
 80081c0:	f04f 0c00 	mov.w	ip, #0
 80081c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80081c8:	f8d0 e000 	ldr.w	lr, [r0]
 80081cc:	b293      	uxth	r3, r2
 80081ce:	ebac 0303 	sub.w	r3, ip, r3
 80081d2:	0c12      	lsrs	r2, r2, #16
 80081d4:	fa13 f38e 	uxtah	r3, r3, lr
 80081d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e6:	45c1      	cmp	r9, r8
 80081e8:	f840 3b04 	str.w	r3, [r0], #4
 80081ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081f0:	d2e8      	bcs.n	80081c4 <quorem+0xb0>
 80081f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081fa:	b922      	cbnz	r2, 8008206 <quorem+0xf2>
 80081fc:	3b04      	subs	r3, #4
 80081fe:	429d      	cmp	r5, r3
 8008200:	461a      	mov	r2, r3
 8008202:	d30a      	bcc.n	800821a <quorem+0x106>
 8008204:	613c      	str	r4, [r7, #16]
 8008206:	4630      	mov	r0, r6
 8008208:	b003      	add	sp, #12
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	3b04      	subs	r3, #4
 8008212:	2a00      	cmp	r2, #0
 8008214:	d1cc      	bne.n	80081b0 <quorem+0x9c>
 8008216:	3c01      	subs	r4, #1
 8008218:	e7c7      	b.n	80081aa <quorem+0x96>
 800821a:	6812      	ldr	r2, [r2, #0]
 800821c:	3b04      	subs	r3, #4
 800821e:	2a00      	cmp	r2, #0
 8008220:	d1f0      	bne.n	8008204 <quorem+0xf0>
 8008222:	3c01      	subs	r4, #1
 8008224:	e7eb      	b.n	80081fe <quorem+0xea>
 8008226:	2000      	movs	r0, #0
 8008228:	e7ee      	b.n	8008208 <quorem+0xf4>
 800822a:	0000      	movs	r0, r0
 800822c:	0000      	movs	r0, r0
	...

08008230 <_dtoa_r>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	ec59 8b10 	vmov	r8, r9, d0
 8008238:	b095      	sub	sp, #84	; 0x54
 800823a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800823c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800823e:	9107      	str	r1, [sp, #28]
 8008240:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008244:	4606      	mov	r6, r0
 8008246:	9209      	str	r2, [sp, #36]	; 0x24
 8008248:	9310      	str	r3, [sp, #64]	; 0x40
 800824a:	b975      	cbnz	r5, 800826a <_dtoa_r+0x3a>
 800824c:	2010      	movs	r0, #16
 800824e:	f000 fd75 	bl	8008d3c <malloc>
 8008252:	4602      	mov	r2, r0
 8008254:	6270      	str	r0, [r6, #36]	; 0x24
 8008256:	b920      	cbnz	r0, 8008262 <_dtoa_r+0x32>
 8008258:	4bab      	ldr	r3, [pc, #684]	; (8008508 <_dtoa_r+0x2d8>)
 800825a:	21ea      	movs	r1, #234	; 0xea
 800825c:	48ab      	ldr	r0, [pc, #684]	; (800850c <_dtoa_r+0x2dc>)
 800825e:	f001 fb27 	bl	80098b0 <__assert_func>
 8008262:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008266:	6005      	str	r5, [r0, #0]
 8008268:	60c5      	str	r5, [r0, #12]
 800826a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800826c:	6819      	ldr	r1, [r3, #0]
 800826e:	b151      	cbz	r1, 8008286 <_dtoa_r+0x56>
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	604a      	str	r2, [r1, #4]
 8008274:	2301      	movs	r3, #1
 8008276:	4093      	lsls	r3, r2
 8008278:	608b      	str	r3, [r1, #8]
 800827a:	4630      	mov	r0, r6
 800827c:	f000 fdb4 	bl	8008de8 <_Bfree>
 8008280:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	f1b9 0300 	subs.w	r3, r9, #0
 800828a:	bfbb      	ittet	lt
 800828c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008290:	9303      	strlt	r3, [sp, #12]
 8008292:	2300      	movge	r3, #0
 8008294:	2201      	movlt	r2, #1
 8008296:	bfac      	ite	ge
 8008298:	6023      	strge	r3, [r4, #0]
 800829a:	6022      	strlt	r2, [r4, #0]
 800829c:	4b9c      	ldr	r3, [pc, #624]	; (8008510 <_dtoa_r+0x2e0>)
 800829e:	9c03      	ldr	r4, [sp, #12]
 80082a0:	43a3      	bics	r3, r4
 80082a2:	d11a      	bne.n	80082da <_dtoa_r+0xaa>
 80082a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80082b0:	ea53 0308 	orrs.w	r3, r3, r8
 80082b4:	f000 8512 	beq.w	8008cdc <_dtoa_r+0xaac>
 80082b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082ba:	b953      	cbnz	r3, 80082d2 <_dtoa_r+0xa2>
 80082bc:	4b95      	ldr	r3, [pc, #596]	; (8008514 <_dtoa_r+0x2e4>)
 80082be:	e01f      	b.n	8008300 <_dtoa_r+0xd0>
 80082c0:	4b95      	ldr	r3, [pc, #596]	; (8008518 <_dtoa_r+0x2e8>)
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	9800      	ldr	r0, [sp, #0]
 80082cc:	b015      	add	sp, #84	; 0x54
 80082ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d2:	4b90      	ldr	r3, [pc, #576]	; (8008514 <_dtoa_r+0x2e4>)
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	3303      	adds	r3, #3
 80082d8:	e7f5      	b.n	80082c6 <_dtoa_r+0x96>
 80082da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80082ea:	d10b      	bne.n	8008304 <_dtoa_r+0xd4>
 80082ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082ee:	2301      	movs	r3, #1
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 84ee 	beq.w	8008cd6 <_dtoa_r+0xaa6>
 80082fa:	4888      	ldr	r0, [pc, #544]	; (800851c <_dtoa_r+0x2ec>)
 80082fc:	6018      	str	r0, [r3, #0]
 80082fe:	1e43      	subs	r3, r0, #1
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	e7e2      	b.n	80082ca <_dtoa_r+0x9a>
 8008304:	a913      	add	r1, sp, #76	; 0x4c
 8008306:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800830a:	aa12      	add	r2, sp, #72	; 0x48
 800830c:	4630      	mov	r0, r6
 800830e:	f001 f84d 	bl	80093ac <__d2b>
 8008312:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008316:	4605      	mov	r5, r0
 8008318:	9812      	ldr	r0, [sp, #72]	; 0x48
 800831a:	2900      	cmp	r1, #0
 800831c:	d047      	beq.n	80083ae <_dtoa_r+0x17e>
 800831e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008320:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008324:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008328:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800832c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008330:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008334:	2400      	movs	r4, #0
 8008336:	ec43 2b16 	vmov	d6, r2, r3
 800833a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800833e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80084f0 <_dtoa_r+0x2c0>
 8008342:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008346:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80084f8 <_dtoa_r+0x2c8>
 800834a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800834e:	eeb0 7b46 	vmov.f64	d7, d6
 8008352:	ee06 1a90 	vmov	s13, r1
 8008356:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800835a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008500 <_dtoa_r+0x2d0>
 800835e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008362:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008366:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800836a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800836e:	ee16 ba90 	vmov	fp, s13
 8008372:	9411      	str	r4, [sp, #68]	; 0x44
 8008374:	d508      	bpl.n	8008388 <_dtoa_r+0x158>
 8008376:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800837a:	eeb4 6b47 	vcmp.f64	d6, d7
 800837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008382:	bf18      	it	ne
 8008384:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008388:	f1bb 0f16 	cmp.w	fp, #22
 800838c:	d832      	bhi.n	80083f4 <_dtoa_r+0x1c4>
 800838e:	4b64      	ldr	r3, [pc, #400]	; (8008520 <_dtoa_r+0x2f0>)
 8008390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008394:	ed93 7b00 	vldr	d7, [r3]
 8008398:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800839c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a4:	d501      	bpl.n	80083aa <_dtoa_r+0x17a>
 80083a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083aa:	2300      	movs	r3, #0
 80083ac:	e023      	b.n	80083f6 <_dtoa_r+0x1c6>
 80083ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083b0:	4401      	add	r1, r0
 80083b2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	bfc3      	ittte	gt
 80083ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083be:	fa04 f303 	lslgt.w	r3, r4, r3
 80083c2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80083c6:	f1c3 0320 	rsble	r3, r3, #32
 80083ca:	bfc6      	itte	gt
 80083cc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80083d0:	ea43 0308 	orrgt.w	r3, r3, r8
 80083d4:	fa08 f303 	lslle.w	r3, r8, r3
 80083d8:	ee07 3a90 	vmov	s15, r3
 80083dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80083e0:	3901      	subs	r1, #1
 80083e2:	ed8d 7b00 	vstr	d7, [sp]
 80083e6:	9c01      	ldr	r4, [sp, #4]
 80083e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80083f0:	2401      	movs	r4, #1
 80083f2:	e7a0      	b.n	8008336 <_dtoa_r+0x106>
 80083f4:	2301      	movs	r3, #1
 80083f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083f8:	1a43      	subs	r3, r0, r1
 80083fa:	1e5a      	subs	r2, r3, #1
 80083fc:	bf45      	ittet	mi
 80083fe:	f1c3 0301 	rsbmi	r3, r3, #1
 8008402:	9305      	strmi	r3, [sp, #20]
 8008404:	2300      	movpl	r3, #0
 8008406:	2300      	movmi	r3, #0
 8008408:	9206      	str	r2, [sp, #24]
 800840a:	bf54      	ite	pl
 800840c:	9305      	strpl	r3, [sp, #20]
 800840e:	9306      	strmi	r3, [sp, #24]
 8008410:	f1bb 0f00 	cmp.w	fp, #0
 8008414:	db18      	blt.n	8008448 <_dtoa_r+0x218>
 8008416:	9b06      	ldr	r3, [sp, #24]
 8008418:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800841c:	445b      	add	r3, fp
 800841e:	9306      	str	r3, [sp, #24]
 8008420:	2300      	movs	r3, #0
 8008422:	9a07      	ldr	r2, [sp, #28]
 8008424:	2a09      	cmp	r2, #9
 8008426:	d849      	bhi.n	80084bc <_dtoa_r+0x28c>
 8008428:	2a05      	cmp	r2, #5
 800842a:	bfc4      	itt	gt
 800842c:	3a04      	subgt	r2, #4
 800842e:	9207      	strgt	r2, [sp, #28]
 8008430:	9a07      	ldr	r2, [sp, #28]
 8008432:	f1a2 0202 	sub.w	r2, r2, #2
 8008436:	bfcc      	ite	gt
 8008438:	2400      	movgt	r4, #0
 800843a:	2401      	movle	r4, #1
 800843c:	2a03      	cmp	r2, #3
 800843e:	d848      	bhi.n	80084d2 <_dtoa_r+0x2a2>
 8008440:	e8df f002 	tbb	[pc, r2]
 8008444:	3a2c2e0b 	.word	0x3a2c2e0b
 8008448:	9b05      	ldr	r3, [sp, #20]
 800844a:	2200      	movs	r2, #0
 800844c:	eba3 030b 	sub.w	r3, r3, fp
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	920e      	str	r2, [sp, #56]	; 0x38
 8008454:	f1cb 0300 	rsb	r3, fp, #0
 8008458:	e7e3      	b.n	8008422 <_dtoa_r+0x1f2>
 800845a:	2200      	movs	r2, #0
 800845c:	9208      	str	r2, [sp, #32]
 800845e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008460:	2a00      	cmp	r2, #0
 8008462:	dc39      	bgt.n	80084d8 <_dtoa_r+0x2a8>
 8008464:	f04f 0a01 	mov.w	sl, #1
 8008468:	46d1      	mov	r9, sl
 800846a:	4652      	mov	r2, sl
 800846c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008470:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008472:	2100      	movs	r1, #0
 8008474:	6079      	str	r1, [r7, #4]
 8008476:	2004      	movs	r0, #4
 8008478:	f100 0c14 	add.w	ip, r0, #20
 800847c:	4594      	cmp	ip, r2
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	d92f      	bls.n	80084e2 <_dtoa_r+0x2b2>
 8008482:	4630      	mov	r0, r6
 8008484:	930c      	str	r3, [sp, #48]	; 0x30
 8008486:	f000 fc6f 	bl	8008d68 <_Balloc>
 800848a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800848c:	9000      	str	r0, [sp, #0]
 800848e:	4602      	mov	r2, r0
 8008490:	2800      	cmp	r0, #0
 8008492:	d149      	bne.n	8008528 <_dtoa_r+0x2f8>
 8008494:	4b23      	ldr	r3, [pc, #140]	; (8008524 <_dtoa_r+0x2f4>)
 8008496:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800849a:	e6df      	b.n	800825c <_dtoa_r+0x2c>
 800849c:	2201      	movs	r2, #1
 800849e:	e7dd      	b.n	800845c <_dtoa_r+0x22c>
 80084a0:	2200      	movs	r2, #0
 80084a2:	9208      	str	r2, [sp, #32]
 80084a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a6:	eb0b 0a02 	add.w	sl, fp, r2
 80084aa:	f10a 0901 	add.w	r9, sl, #1
 80084ae:	464a      	mov	r2, r9
 80084b0:	2a01      	cmp	r2, #1
 80084b2:	bfb8      	it	lt
 80084b4:	2201      	movlt	r2, #1
 80084b6:	e7db      	b.n	8008470 <_dtoa_r+0x240>
 80084b8:	2201      	movs	r2, #1
 80084ba:	e7f2      	b.n	80084a2 <_dtoa_r+0x272>
 80084bc:	2401      	movs	r4, #1
 80084be:	2200      	movs	r2, #0
 80084c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80084c4:	f04f 3aff 	mov.w	sl, #4294967295
 80084c8:	2100      	movs	r1, #0
 80084ca:	46d1      	mov	r9, sl
 80084cc:	2212      	movs	r2, #18
 80084ce:	9109      	str	r1, [sp, #36]	; 0x24
 80084d0:	e7ce      	b.n	8008470 <_dtoa_r+0x240>
 80084d2:	2201      	movs	r2, #1
 80084d4:	9208      	str	r2, [sp, #32]
 80084d6:	e7f5      	b.n	80084c4 <_dtoa_r+0x294>
 80084d8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80084dc:	46d1      	mov	r9, sl
 80084de:	4652      	mov	r2, sl
 80084e0:	e7c6      	b.n	8008470 <_dtoa_r+0x240>
 80084e2:	3101      	adds	r1, #1
 80084e4:	6079      	str	r1, [r7, #4]
 80084e6:	0040      	lsls	r0, r0, #1
 80084e8:	e7c6      	b.n	8008478 <_dtoa_r+0x248>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	636f4361 	.word	0x636f4361
 80084f4:	3fd287a7 	.word	0x3fd287a7
 80084f8:	8b60c8b3 	.word	0x8b60c8b3
 80084fc:	3fc68a28 	.word	0x3fc68a28
 8008500:	509f79fb 	.word	0x509f79fb
 8008504:	3fd34413 	.word	0x3fd34413
 8008508:	0800a4f5 	.word	0x0800a4f5
 800850c:	0800a50c 	.word	0x0800a50c
 8008510:	7ff00000 	.word	0x7ff00000
 8008514:	0800a4f1 	.word	0x0800a4f1
 8008518:	0800a4e8 	.word	0x0800a4e8
 800851c:	0800a4c5 	.word	0x0800a4c5
 8008520:	0800a608 	.word	0x0800a608
 8008524:	0800a56b 	.word	0x0800a56b
 8008528:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800852a:	9900      	ldr	r1, [sp, #0]
 800852c:	6011      	str	r1, [r2, #0]
 800852e:	f1b9 0f0e 	cmp.w	r9, #14
 8008532:	d872      	bhi.n	800861a <_dtoa_r+0x3ea>
 8008534:	2c00      	cmp	r4, #0
 8008536:	d070      	beq.n	800861a <_dtoa_r+0x3ea>
 8008538:	f1bb 0f00 	cmp.w	fp, #0
 800853c:	f340 80a6 	ble.w	800868c <_dtoa_r+0x45c>
 8008540:	49ca      	ldr	r1, [pc, #808]	; (800886c <_dtoa_r+0x63c>)
 8008542:	f00b 020f 	and.w	r2, fp, #15
 8008546:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800854a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800854e:	ed92 7b00 	vldr	d7, [r2]
 8008552:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008556:	f000 808d 	beq.w	8008674 <_dtoa_r+0x444>
 800855a:	4ac5      	ldr	r2, [pc, #788]	; (8008870 <_dtoa_r+0x640>)
 800855c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008560:	ed92 6b08 	vldr	d6, [r2, #32]
 8008564:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008568:	ed8d 6b02 	vstr	d6, [sp, #8]
 800856c:	f001 010f 	and.w	r1, r1, #15
 8008570:	2203      	movs	r2, #3
 8008572:	48bf      	ldr	r0, [pc, #764]	; (8008870 <_dtoa_r+0x640>)
 8008574:	2900      	cmp	r1, #0
 8008576:	d17f      	bne.n	8008678 <_dtoa_r+0x448>
 8008578:	ed9d 6b02 	vldr	d6, [sp, #8]
 800857c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008580:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008584:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008586:	2900      	cmp	r1, #0
 8008588:	f000 80b2 	beq.w	80086f0 <_dtoa_r+0x4c0>
 800858c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008590:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008594:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	f140 80a8 	bpl.w	80086f0 <_dtoa_r+0x4c0>
 80085a0:	f1b9 0f00 	cmp.w	r9, #0
 80085a4:	f000 80a4 	beq.w	80086f0 <_dtoa_r+0x4c0>
 80085a8:	f1ba 0f00 	cmp.w	sl, #0
 80085ac:	dd31      	ble.n	8008612 <_dtoa_r+0x3e2>
 80085ae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80085b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085ba:	f10b 37ff 	add.w	r7, fp, #4294967295
 80085be:	3201      	adds	r2, #1
 80085c0:	4650      	mov	r0, sl
 80085c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80085c6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80085ca:	ee07 2a90 	vmov	s15, r2
 80085ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80085d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80085d6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80085da:	9c03      	ldr	r4, [sp, #12]
 80085dc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80085e0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f040 8086 	bne.w	80086f6 <_dtoa_r+0x4c6>
 80085ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80085ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80085f2:	ec42 1b17 	vmov	d7, r1, r2
 80085f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fe:	f300 8272 	bgt.w	8008ae6 <_dtoa_r+0x8b6>
 8008602:	eeb1 7b47 	vneg.f64	d7, d7
 8008606:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800860a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860e:	f100 8267 	bmi.w	8008ae0 <_dtoa_r+0x8b0>
 8008612:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008616:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800861a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800861c:	2a00      	cmp	r2, #0
 800861e:	f2c0 8129 	blt.w	8008874 <_dtoa_r+0x644>
 8008622:	f1bb 0f0e 	cmp.w	fp, #14
 8008626:	f300 8125 	bgt.w	8008874 <_dtoa_r+0x644>
 800862a:	4b90      	ldr	r3, [pc, #576]	; (800886c <_dtoa_r+0x63c>)
 800862c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008630:	ed93 6b00 	vldr	d6, [r3]
 8008634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	f280 80c3 	bge.w	80087c2 <_dtoa_r+0x592>
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	f300 80bf 	bgt.w	80087c2 <_dtoa_r+0x592>
 8008644:	f040 824c 	bne.w	8008ae0 <_dtoa_r+0x8b0>
 8008648:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800864c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008650:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008654:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865c:	464c      	mov	r4, r9
 800865e:	464f      	mov	r7, r9
 8008660:	f280 8222 	bge.w	8008aa8 <_dtoa_r+0x878>
 8008664:	f8dd 8000 	ldr.w	r8, [sp]
 8008668:	2331      	movs	r3, #49	; 0x31
 800866a:	f808 3b01 	strb.w	r3, [r8], #1
 800866e:	f10b 0b01 	add.w	fp, fp, #1
 8008672:	e21e      	b.n	8008ab2 <_dtoa_r+0x882>
 8008674:	2202      	movs	r2, #2
 8008676:	e77c      	b.n	8008572 <_dtoa_r+0x342>
 8008678:	07cc      	lsls	r4, r1, #31
 800867a:	d504      	bpl.n	8008686 <_dtoa_r+0x456>
 800867c:	ed90 6b00 	vldr	d6, [r0]
 8008680:	3201      	adds	r2, #1
 8008682:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008686:	1049      	asrs	r1, r1, #1
 8008688:	3008      	adds	r0, #8
 800868a:	e773      	b.n	8008574 <_dtoa_r+0x344>
 800868c:	d02e      	beq.n	80086ec <_dtoa_r+0x4bc>
 800868e:	f1cb 0100 	rsb	r1, fp, #0
 8008692:	4a76      	ldr	r2, [pc, #472]	; (800886c <_dtoa_r+0x63c>)
 8008694:	f001 000f 	and.w	r0, r1, #15
 8008698:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800869c:	ed92 7b00 	vldr	d7, [r2]
 80086a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80086a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80086ac:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80086b0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80086b4:	486e      	ldr	r0, [pc, #440]	; (8008870 <_dtoa_r+0x640>)
 80086b6:	1109      	asrs	r1, r1, #4
 80086b8:	2400      	movs	r4, #0
 80086ba:	2202      	movs	r2, #2
 80086bc:	b939      	cbnz	r1, 80086ce <_dtoa_r+0x49e>
 80086be:	2c00      	cmp	r4, #0
 80086c0:	f43f af60 	beq.w	8008584 <_dtoa_r+0x354>
 80086c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086cc:	e75a      	b.n	8008584 <_dtoa_r+0x354>
 80086ce:	07cf      	lsls	r7, r1, #31
 80086d0:	d509      	bpl.n	80086e6 <_dtoa_r+0x4b6>
 80086d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80086d6:	ed90 7b00 	vldr	d7, [r0]
 80086da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80086e2:	3201      	adds	r2, #1
 80086e4:	2401      	movs	r4, #1
 80086e6:	1049      	asrs	r1, r1, #1
 80086e8:	3008      	adds	r0, #8
 80086ea:	e7e7      	b.n	80086bc <_dtoa_r+0x48c>
 80086ec:	2202      	movs	r2, #2
 80086ee:	e749      	b.n	8008584 <_dtoa_r+0x354>
 80086f0:	465f      	mov	r7, fp
 80086f2:	4648      	mov	r0, r9
 80086f4:	e765      	b.n	80085c2 <_dtoa_r+0x392>
 80086f6:	ec42 1b17 	vmov	d7, r1, r2
 80086fa:	4a5c      	ldr	r2, [pc, #368]	; (800886c <_dtoa_r+0x63c>)
 80086fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008700:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008704:	9a00      	ldr	r2, [sp, #0]
 8008706:	1814      	adds	r4, r2, r0
 8008708:	9a08      	ldr	r2, [sp, #32]
 800870a:	b352      	cbz	r2, 8008762 <_dtoa_r+0x532>
 800870c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008710:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008714:	f8dd 8000 	ldr.w	r8, [sp]
 8008718:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800871c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008720:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008724:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008728:	ee14 2a90 	vmov	r2, s9
 800872c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008730:	3230      	adds	r2, #48	; 0x30
 8008732:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008736:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873e:	f808 2b01 	strb.w	r2, [r8], #1
 8008742:	d439      	bmi.n	80087b8 <_dtoa_r+0x588>
 8008744:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008748:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800874c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008750:	d472      	bmi.n	8008838 <_dtoa_r+0x608>
 8008752:	45a0      	cmp	r8, r4
 8008754:	f43f af5d 	beq.w	8008612 <_dtoa_r+0x3e2>
 8008758:	ee27 7b03 	vmul.f64	d7, d7, d3
 800875c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008760:	e7e0      	b.n	8008724 <_dtoa_r+0x4f4>
 8008762:	f8dd 8000 	ldr.w	r8, [sp]
 8008766:	ee27 7b04 	vmul.f64	d7, d7, d4
 800876a:	4621      	mov	r1, r4
 800876c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008770:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008774:	ee14 2a90 	vmov	r2, s9
 8008778:	3230      	adds	r2, #48	; 0x30
 800877a:	f808 2b01 	strb.w	r2, [r8], #1
 800877e:	45a0      	cmp	r8, r4
 8008780:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008784:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008788:	d118      	bne.n	80087bc <_dtoa_r+0x58c>
 800878a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800878e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008792:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879a:	dc4d      	bgt.n	8008838 <_dtoa_r+0x608>
 800879c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80087a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a8:	f57f af33 	bpl.w	8008612 <_dtoa_r+0x3e2>
 80087ac:	4688      	mov	r8, r1
 80087ae:	3901      	subs	r1, #1
 80087b0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80087b4:	2b30      	cmp	r3, #48	; 0x30
 80087b6:	d0f9      	beq.n	80087ac <_dtoa_r+0x57c>
 80087b8:	46bb      	mov	fp, r7
 80087ba:	e02a      	b.n	8008812 <_dtoa_r+0x5e2>
 80087bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80087c0:	e7d6      	b.n	8008770 <_dtoa_r+0x540>
 80087c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087c6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80087ca:	f8dd 8000 	ldr.w	r8, [sp]
 80087ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80087d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80087d6:	ee15 3a10 	vmov	r3, s10
 80087da:	3330      	adds	r3, #48	; 0x30
 80087dc:	f808 3b01 	strb.w	r3, [r8], #1
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	eba8 0303 	sub.w	r3, r8, r3
 80087e6:	4599      	cmp	r9, r3
 80087e8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80087ec:	eea3 7b46 	vfms.f64	d7, d3, d6
 80087f0:	d133      	bne.n	800885a <_dtoa_r+0x62a>
 80087f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80087f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80087fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fe:	dc1a      	bgt.n	8008836 <_dtoa_r+0x606>
 8008800:	eeb4 7b46 	vcmp.f64	d7, d6
 8008804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008808:	d103      	bne.n	8008812 <_dtoa_r+0x5e2>
 800880a:	ee15 3a10 	vmov	r3, s10
 800880e:	07d9      	lsls	r1, r3, #31
 8008810:	d411      	bmi.n	8008836 <_dtoa_r+0x606>
 8008812:	4629      	mov	r1, r5
 8008814:	4630      	mov	r0, r6
 8008816:	f000 fae7 	bl	8008de8 <_Bfree>
 800881a:	2300      	movs	r3, #0
 800881c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800881e:	f888 3000 	strb.w	r3, [r8]
 8008822:	f10b 0301 	add.w	r3, fp, #1
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800882a:	2b00      	cmp	r3, #0
 800882c:	f43f ad4d 	beq.w	80082ca <_dtoa_r+0x9a>
 8008830:	f8c3 8000 	str.w	r8, [r3]
 8008834:	e549      	b.n	80082ca <_dtoa_r+0x9a>
 8008836:	465f      	mov	r7, fp
 8008838:	4643      	mov	r3, r8
 800883a:	4698      	mov	r8, r3
 800883c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008840:	2a39      	cmp	r2, #57	; 0x39
 8008842:	d106      	bne.n	8008852 <_dtoa_r+0x622>
 8008844:	9a00      	ldr	r2, [sp, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d1f7      	bne.n	800883a <_dtoa_r+0x60a>
 800884a:	9900      	ldr	r1, [sp, #0]
 800884c:	2230      	movs	r2, #48	; 0x30
 800884e:	3701      	adds	r7, #1
 8008850:	700a      	strb	r2, [r1, #0]
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	3201      	adds	r2, #1
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	e7ae      	b.n	80087b8 <_dtoa_r+0x588>
 800885a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800885e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008866:	d1b2      	bne.n	80087ce <_dtoa_r+0x59e>
 8008868:	e7d3      	b.n	8008812 <_dtoa_r+0x5e2>
 800886a:	bf00      	nop
 800886c:	0800a608 	.word	0x0800a608
 8008870:	0800a5e0 	.word	0x0800a5e0
 8008874:	9908      	ldr	r1, [sp, #32]
 8008876:	2900      	cmp	r1, #0
 8008878:	f000 80d1 	beq.w	8008a1e <_dtoa_r+0x7ee>
 800887c:	9907      	ldr	r1, [sp, #28]
 800887e:	2901      	cmp	r1, #1
 8008880:	f300 80b4 	bgt.w	80089ec <_dtoa_r+0x7bc>
 8008884:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008886:	2900      	cmp	r1, #0
 8008888:	f000 80ac 	beq.w	80089e4 <_dtoa_r+0x7b4>
 800888c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008890:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008894:	461c      	mov	r4, r3
 8008896:	930a      	str	r3, [sp, #40]	; 0x28
 8008898:	9b05      	ldr	r3, [sp, #20]
 800889a:	4413      	add	r3, r2
 800889c:	9305      	str	r3, [sp, #20]
 800889e:	9b06      	ldr	r3, [sp, #24]
 80088a0:	2101      	movs	r1, #1
 80088a2:	4413      	add	r3, r2
 80088a4:	4630      	mov	r0, r6
 80088a6:	9306      	str	r3, [sp, #24]
 80088a8:	f000 fb5a 	bl	8008f60 <__i2b>
 80088ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ae:	4607      	mov	r7, r0
 80088b0:	f1b8 0f00 	cmp.w	r8, #0
 80088b4:	dd0d      	ble.n	80088d2 <_dtoa_r+0x6a2>
 80088b6:	9a06      	ldr	r2, [sp, #24]
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	dd0a      	ble.n	80088d2 <_dtoa_r+0x6a2>
 80088bc:	4542      	cmp	r2, r8
 80088be:	9905      	ldr	r1, [sp, #20]
 80088c0:	bfa8      	it	ge
 80088c2:	4642      	movge	r2, r8
 80088c4:	1a89      	subs	r1, r1, r2
 80088c6:	9105      	str	r1, [sp, #20]
 80088c8:	9906      	ldr	r1, [sp, #24]
 80088ca:	eba8 0802 	sub.w	r8, r8, r2
 80088ce:	1a8a      	subs	r2, r1, r2
 80088d0:	9206      	str	r2, [sp, #24]
 80088d2:	b303      	cbz	r3, 8008916 <_dtoa_r+0x6e6>
 80088d4:	9a08      	ldr	r2, [sp, #32]
 80088d6:	2a00      	cmp	r2, #0
 80088d8:	f000 80a6 	beq.w	8008a28 <_dtoa_r+0x7f8>
 80088dc:	2c00      	cmp	r4, #0
 80088de:	dd13      	ble.n	8008908 <_dtoa_r+0x6d8>
 80088e0:	4639      	mov	r1, r7
 80088e2:	4622      	mov	r2, r4
 80088e4:	4630      	mov	r0, r6
 80088e6:	930c      	str	r3, [sp, #48]	; 0x30
 80088e8:	f000 fbf6 	bl	80090d8 <__pow5mult>
 80088ec:	462a      	mov	r2, r5
 80088ee:	4601      	mov	r1, r0
 80088f0:	4607      	mov	r7, r0
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 fb4a 	bl	8008f8c <__multiply>
 80088f8:	4629      	mov	r1, r5
 80088fa:	900a      	str	r0, [sp, #40]	; 0x28
 80088fc:	4630      	mov	r0, r6
 80088fe:	f000 fa73 	bl	8008de8 <_Bfree>
 8008902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008906:	4615      	mov	r5, r2
 8008908:	1b1a      	subs	r2, r3, r4
 800890a:	d004      	beq.n	8008916 <_dtoa_r+0x6e6>
 800890c:	4629      	mov	r1, r5
 800890e:	4630      	mov	r0, r6
 8008910:	f000 fbe2 	bl	80090d8 <__pow5mult>
 8008914:	4605      	mov	r5, r0
 8008916:	2101      	movs	r1, #1
 8008918:	4630      	mov	r0, r6
 800891a:	f000 fb21 	bl	8008f60 <__i2b>
 800891e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008920:	2b00      	cmp	r3, #0
 8008922:	4604      	mov	r4, r0
 8008924:	f340 8082 	ble.w	8008a2c <_dtoa_r+0x7fc>
 8008928:	461a      	mov	r2, r3
 800892a:	4601      	mov	r1, r0
 800892c:	4630      	mov	r0, r6
 800892e:	f000 fbd3 	bl	80090d8 <__pow5mult>
 8008932:	9b07      	ldr	r3, [sp, #28]
 8008934:	2b01      	cmp	r3, #1
 8008936:	4604      	mov	r4, r0
 8008938:	dd7b      	ble.n	8008a32 <_dtoa_r+0x802>
 800893a:	2300      	movs	r3, #0
 800893c:	930a      	str	r3, [sp, #40]	; 0x28
 800893e:	6922      	ldr	r2, [r4, #16]
 8008940:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008944:	6910      	ldr	r0, [r2, #16]
 8008946:	f000 fabb 	bl	8008ec0 <__hi0bits>
 800894a:	f1c0 0020 	rsb	r0, r0, #32
 800894e:	9b06      	ldr	r3, [sp, #24]
 8008950:	4418      	add	r0, r3
 8008952:	f010 001f 	ands.w	r0, r0, #31
 8008956:	f000 808d 	beq.w	8008a74 <_dtoa_r+0x844>
 800895a:	f1c0 0220 	rsb	r2, r0, #32
 800895e:	2a04      	cmp	r2, #4
 8008960:	f340 8086 	ble.w	8008a70 <_dtoa_r+0x840>
 8008964:	f1c0 001c 	rsb	r0, r0, #28
 8008968:	9b05      	ldr	r3, [sp, #20]
 800896a:	4403      	add	r3, r0
 800896c:	9305      	str	r3, [sp, #20]
 800896e:	9b06      	ldr	r3, [sp, #24]
 8008970:	4403      	add	r3, r0
 8008972:	4480      	add	r8, r0
 8008974:	9306      	str	r3, [sp, #24]
 8008976:	9b05      	ldr	r3, [sp, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	dd05      	ble.n	8008988 <_dtoa_r+0x758>
 800897c:	4629      	mov	r1, r5
 800897e:	461a      	mov	r2, r3
 8008980:	4630      	mov	r0, r6
 8008982:	f000 fc03 	bl	800918c <__lshift>
 8008986:	4605      	mov	r5, r0
 8008988:	9b06      	ldr	r3, [sp, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	dd05      	ble.n	800899a <_dtoa_r+0x76a>
 800898e:	4621      	mov	r1, r4
 8008990:	461a      	mov	r2, r3
 8008992:	4630      	mov	r0, r6
 8008994:	f000 fbfa 	bl	800918c <__lshift>
 8008998:	4604      	mov	r4, r0
 800899a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d06b      	beq.n	8008a78 <_dtoa_r+0x848>
 80089a0:	4621      	mov	r1, r4
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 fc5e 	bl	8009264 <__mcmp>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	da65      	bge.n	8008a78 <_dtoa_r+0x848>
 80089ac:	2300      	movs	r3, #0
 80089ae:	4629      	mov	r1, r5
 80089b0:	220a      	movs	r2, #10
 80089b2:	4630      	mov	r0, r6
 80089b4:	f000 fa3a 	bl	8008e2c <__multadd>
 80089b8:	9b08      	ldr	r3, [sp, #32]
 80089ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089be:	4605      	mov	r5, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8192 	beq.w	8008cea <_dtoa_r+0xaba>
 80089c6:	4639      	mov	r1, r7
 80089c8:	2300      	movs	r3, #0
 80089ca:	220a      	movs	r2, #10
 80089cc:	4630      	mov	r0, r6
 80089ce:	f000 fa2d 	bl	8008e2c <__multadd>
 80089d2:	f1ba 0f00 	cmp.w	sl, #0
 80089d6:	4607      	mov	r7, r0
 80089d8:	f300 808e 	bgt.w	8008af8 <_dtoa_r+0x8c8>
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	dc51      	bgt.n	8008a86 <_dtoa_r+0x856>
 80089e2:	e089      	b.n	8008af8 <_dtoa_r+0x8c8>
 80089e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089ea:	e751      	b.n	8008890 <_dtoa_r+0x660>
 80089ec:	f109 34ff 	add.w	r4, r9, #4294967295
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	bfbf      	itttt	lt
 80089f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80089f6:	1ae3      	sublt	r3, r4, r3
 80089f8:	18d2      	addlt	r2, r2, r3
 80089fa:	4613      	movlt	r3, r2
 80089fc:	bfb7      	itett	lt
 80089fe:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a00:	1b1c      	subge	r4, r3, r4
 8008a02:	4623      	movlt	r3, r4
 8008a04:	2400      	movlt	r4, #0
 8008a06:	f1b9 0f00 	cmp.w	r9, #0
 8008a0a:	bfb5      	itete	lt
 8008a0c:	9a05      	ldrlt	r2, [sp, #20]
 8008a0e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008a12:	eba2 0809 	sublt.w	r8, r2, r9
 8008a16:	464a      	movge	r2, r9
 8008a18:	bfb8      	it	lt
 8008a1a:	2200      	movlt	r2, #0
 8008a1c:	e73b      	b.n	8008896 <_dtoa_r+0x666>
 8008a1e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008a22:	9f08      	ldr	r7, [sp, #32]
 8008a24:	461c      	mov	r4, r3
 8008a26:	e743      	b.n	80088b0 <_dtoa_r+0x680>
 8008a28:	461a      	mov	r2, r3
 8008a2a:	e76f      	b.n	800890c <_dtoa_r+0x6dc>
 8008a2c:	9b07      	ldr	r3, [sp, #28]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	dc18      	bgt.n	8008a64 <_dtoa_r+0x834>
 8008a32:	9b02      	ldr	r3, [sp, #8]
 8008a34:	b9b3      	cbnz	r3, 8008a64 <_dtoa_r+0x834>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008a3c:	b9a2      	cbnz	r2, 8008a68 <_dtoa_r+0x838>
 8008a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a42:	0d12      	lsrs	r2, r2, #20
 8008a44:	0512      	lsls	r2, r2, #20
 8008a46:	b18a      	cbz	r2, 8008a6c <_dtoa_r+0x83c>
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	9b06      	ldr	r3, [sp, #24]
 8008a50:	3301      	adds	r3, #1
 8008a52:	9306      	str	r3, [sp, #24]
 8008a54:	2301      	movs	r3, #1
 8008a56:	930a      	str	r3, [sp, #40]	; 0x28
 8008a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f47f af6f 	bne.w	800893e <_dtoa_r+0x70e>
 8008a60:	2001      	movs	r0, #1
 8008a62:	e774      	b.n	800894e <_dtoa_r+0x71e>
 8008a64:	2300      	movs	r3, #0
 8008a66:	e7f6      	b.n	8008a56 <_dtoa_r+0x826>
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	e7f4      	b.n	8008a56 <_dtoa_r+0x826>
 8008a6c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a6e:	e7f3      	b.n	8008a58 <_dtoa_r+0x828>
 8008a70:	d081      	beq.n	8008976 <_dtoa_r+0x746>
 8008a72:	4610      	mov	r0, r2
 8008a74:	301c      	adds	r0, #28
 8008a76:	e777      	b.n	8008968 <_dtoa_r+0x738>
 8008a78:	f1b9 0f00 	cmp.w	r9, #0
 8008a7c:	dc37      	bgt.n	8008aee <_dtoa_r+0x8be>
 8008a7e:	9b07      	ldr	r3, [sp, #28]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	dd34      	ble.n	8008aee <_dtoa_r+0x8be>
 8008a84:	46ca      	mov	sl, r9
 8008a86:	f1ba 0f00 	cmp.w	sl, #0
 8008a8a:	d10d      	bne.n	8008aa8 <_dtoa_r+0x878>
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4653      	mov	r3, sl
 8008a90:	2205      	movs	r2, #5
 8008a92:	4630      	mov	r0, r6
 8008a94:	f000 f9ca 	bl	8008e2c <__multadd>
 8008a98:	4601      	mov	r1, r0
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 fbe1 	bl	8009264 <__mcmp>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	f73f adde 	bgt.w	8008664 <_dtoa_r+0x434>
 8008aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aaa:	f8dd 8000 	ldr.w	r8, [sp]
 8008aae:	ea6f 0b03 	mvn.w	fp, r3
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 f995 	bl	8008de8 <_Bfree>
 8008abe:	2f00      	cmp	r7, #0
 8008ac0:	f43f aea7 	beq.w	8008812 <_dtoa_r+0x5e2>
 8008ac4:	f1b9 0f00 	cmp.w	r9, #0
 8008ac8:	d005      	beq.n	8008ad6 <_dtoa_r+0x8a6>
 8008aca:	45b9      	cmp	r9, r7
 8008acc:	d003      	beq.n	8008ad6 <_dtoa_r+0x8a6>
 8008ace:	4649      	mov	r1, r9
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 f989 	bl	8008de8 <_Bfree>
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f000 f985 	bl	8008de8 <_Bfree>
 8008ade:	e698      	b.n	8008812 <_dtoa_r+0x5e2>
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	4627      	mov	r7, r4
 8008ae4:	e7e0      	b.n	8008aa8 <_dtoa_r+0x878>
 8008ae6:	46bb      	mov	fp, r7
 8008ae8:	4604      	mov	r4, r0
 8008aea:	4607      	mov	r7, r0
 8008aec:	e5ba      	b.n	8008664 <_dtoa_r+0x434>
 8008aee:	9b08      	ldr	r3, [sp, #32]
 8008af0:	46ca      	mov	sl, r9
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8100 	beq.w	8008cf8 <_dtoa_r+0xac8>
 8008af8:	f1b8 0f00 	cmp.w	r8, #0
 8008afc:	dd05      	ble.n	8008b0a <_dtoa_r+0x8da>
 8008afe:	4639      	mov	r1, r7
 8008b00:	4642      	mov	r2, r8
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 fb42 	bl	800918c <__lshift>
 8008b08:	4607      	mov	r7, r0
 8008b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d05d      	beq.n	8008bcc <_dtoa_r+0x99c>
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4630      	mov	r0, r6
 8008b14:	f000 f928 	bl	8008d68 <_Balloc>
 8008b18:	4680      	mov	r8, r0
 8008b1a:	b928      	cbnz	r0, 8008b28 <_dtoa_r+0x8f8>
 8008b1c:	4b82      	ldr	r3, [pc, #520]	; (8008d28 <_dtoa_r+0xaf8>)
 8008b1e:	4602      	mov	r2, r0
 8008b20:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b24:	f7ff bb9a 	b.w	800825c <_dtoa_r+0x2c>
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	3202      	adds	r2, #2
 8008b2c:	0092      	lsls	r2, r2, #2
 8008b2e:	f107 010c 	add.w	r1, r7, #12
 8008b32:	300c      	adds	r0, #12
 8008b34:	f000 f90a 	bl	8008d4c <memcpy>
 8008b38:	2201      	movs	r2, #1
 8008b3a:	4641      	mov	r1, r8
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f000 fb25 	bl	800918c <__lshift>
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	9305      	str	r3, [sp, #20]
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	4453      	add	r3, sl
 8008b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4e:	9b02      	ldr	r3, [sp, #8]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	46b9      	mov	r9, r7
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	4607      	mov	r7, r0
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	4628      	mov	r0, r5
 8008b62:	9302      	str	r3, [sp, #8]
 8008b64:	f7ff fad6 	bl	8008114 <quorem>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	3330      	adds	r3, #48	; 0x30
 8008b6c:	9006      	str	r0, [sp, #24]
 8008b6e:	4649      	mov	r1, r9
 8008b70:	4628      	mov	r0, r5
 8008b72:	930a      	str	r3, [sp, #40]	; 0x28
 8008b74:	f000 fb76 	bl	8009264 <__mcmp>
 8008b78:	463a      	mov	r2, r7
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 fb8c 	bl	800929c <__mdiff>
 8008b84:	68c2      	ldr	r2, [r0, #12]
 8008b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b88:	4680      	mov	r8, r0
 8008b8a:	bb0a      	cbnz	r2, 8008bd0 <_dtoa_r+0x9a0>
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fb68 	bl	8009264 <__mcmp>
 8008b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b96:	4602      	mov	r2, r0
 8008b98:	4641      	mov	r1, r8
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	920e      	str	r2, [sp, #56]	; 0x38
 8008b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba0:	f000 f922 	bl	8008de8 <_Bfree>
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ba8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008bac:	ea43 0102 	orr.w	r1, r3, r2
 8008bb0:	9b08      	ldr	r3, [sp, #32]
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb6:	d10d      	bne.n	8008bd4 <_dtoa_r+0x9a4>
 8008bb8:	2b39      	cmp	r3, #57	; 0x39
 8008bba:	d029      	beq.n	8008c10 <_dtoa_r+0x9e0>
 8008bbc:	f1ba 0f00 	cmp.w	sl, #0
 8008bc0:	dd01      	ble.n	8008bc6 <_dtoa_r+0x996>
 8008bc2:	9b06      	ldr	r3, [sp, #24]
 8008bc4:	3331      	adds	r3, #49	; 0x31
 8008bc6:	9a02      	ldr	r2, [sp, #8]
 8008bc8:	7013      	strb	r3, [r2, #0]
 8008bca:	e774      	b.n	8008ab6 <_dtoa_r+0x886>
 8008bcc:	4638      	mov	r0, r7
 8008bce:	e7b8      	b.n	8008b42 <_dtoa_r+0x912>
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	e7e1      	b.n	8008b98 <_dtoa_r+0x968>
 8008bd4:	f1ba 0f00 	cmp.w	sl, #0
 8008bd8:	db06      	blt.n	8008be8 <_dtoa_r+0x9b8>
 8008bda:	9907      	ldr	r1, [sp, #28]
 8008bdc:	ea41 0a0a 	orr.w	sl, r1, sl
 8008be0:	9908      	ldr	r1, [sp, #32]
 8008be2:	ea5a 0101 	orrs.w	r1, sl, r1
 8008be6:	d120      	bne.n	8008c2a <_dtoa_r+0x9fa>
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	ddec      	ble.n	8008bc6 <_dtoa_r+0x996>
 8008bec:	4629      	mov	r1, r5
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	f000 faca 	bl	800918c <__lshift>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	f000 fb32 	bl	8009264 <__mcmp>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	9b05      	ldr	r3, [sp, #20]
 8008c04:	dc02      	bgt.n	8008c0c <_dtoa_r+0x9dc>
 8008c06:	d1de      	bne.n	8008bc6 <_dtoa_r+0x996>
 8008c08:	07da      	lsls	r2, r3, #31
 8008c0a:	d5dc      	bpl.n	8008bc6 <_dtoa_r+0x996>
 8008c0c:	2b39      	cmp	r3, #57	; 0x39
 8008c0e:	d1d8      	bne.n	8008bc2 <_dtoa_r+0x992>
 8008c10:	9a02      	ldr	r2, [sp, #8]
 8008c12:	2339      	movs	r3, #57	; 0x39
 8008c14:	7013      	strb	r3, [r2, #0]
 8008c16:	4643      	mov	r3, r8
 8008c18:	4698      	mov	r8, r3
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008c20:	2a39      	cmp	r2, #57	; 0x39
 8008c22:	d051      	beq.n	8008cc8 <_dtoa_r+0xa98>
 8008c24:	3201      	adds	r2, #1
 8008c26:	701a      	strb	r2, [r3, #0]
 8008c28:	e745      	b.n	8008ab6 <_dtoa_r+0x886>
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	dd03      	ble.n	8008c36 <_dtoa_r+0xa06>
 8008c2e:	2b39      	cmp	r3, #57	; 0x39
 8008c30:	d0ee      	beq.n	8008c10 <_dtoa_r+0x9e0>
 8008c32:	3301      	adds	r3, #1
 8008c34:	e7c7      	b.n	8008bc6 <_dtoa_r+0x996>
 8008c36:	9a05      	ldr	r2, [sp, #20]
 8008c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c3a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c3e:	428a      	cmp	r2, r1
 8008c40:	d02b      	beq.n	8008c9a <_dtoa_r+0xa6a>
 8008c42:	4629      	mov	r1, r5
 8008c44:	2300      	movs	r3, #0
 8008c46:	220a      	movs	r2, #10
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f000 f8ef 	bl	8008e2c <__multadd>
 8008c4e:	45b9      	cmp	r9, r7
 8008c50:	4605      	mov	r5, r0
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	f04f 020a 	mov.w	r2, #10
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	d107      	bne.n	8008c70 <_dtoa_r+0xa40>
 8008c60:	f000 f8e4 	bl	8008e2c <__multadd>
 8008c64:	4681      	mov	r9, r0
 8008c66:	4607      	mov	r7, r0
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	e774      	b.n	8008b5a <_dtoa_r+0x92a>
 8008c70:	f000 f8dc 	bl	8008e2c <__multadd>
 8008c74:	4639      	mov	r1, r7
 8008c76:	4681      	mov	r9, r0
 8008c78:	2300      	movs	r3, #0
 8008c7a:	220a      	movs	r2, #10
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f000 f8d5 	bl	8008e2c <__multadd>
 8008c82:	4607      	mov	r7, r0
 8008c84:	e7f0      	b.n	8008c68 <_dtoa_r+0xa38>
 8008c86:	f1ba 0f00 	cmp.w	sl, #0
 8008c8a:	9a00      	ldr	r2, [sp, #0]
 8008c8c:	bfcc      	ite	gt
 8008c8e:	46d0      	movgt	r8, sl
 8008c90:	f04f 0801 	movle.w	r8, #1
 8008c94:	4490      	add	r8, r2
 8008c96:	f04f 0900 	mov.w	r9, #0
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	9302      	str	r3, [sp, #8]
 8008ca2:	f000 fa73 	bl	800918c <__lshift>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4605      	mov	r5, r0
 8008caa:	f000 fadb 	bl	8009264 <__mcmp>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	dcb1      	bgt.n	8008c16 <_dtoa_r+0x9e6>
 8008cb2:	d102      	bne.n	8008cba <_dtoa_r+0xa8a>
 8008cb4:	9b02      	ldr	r3, [sp, #8]
 8008cb6:	07db      	lsls	r3, r3, #31
 8008cb8:	d4ad      	bmi.n	8008c16 <_dtoa_r+0x9e6>
 8008cba:	4643      	mov	r3, r8
 8008cbc:	4698      	mov	r8, r3
 8008cbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cc2:	2a30      	cmp	r2, #48	; 0x30
 8008cc4:	d0fa      	beq.n	8008cbc <_dtoa_r+0xa8c>
 8008cc6:	e6f6      	b.n	8008ab6 <_dtoa_r+0x886>
 8008cc8:	9a00      	ldr	r2, [sp, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d1a4      	bne.n	8008c18 <_dtoa_r+0x9e8>
 8008cce:	f10b 0b01 	add.w	fp, fp, #1
 8008cd2:	2331      	movs	r3, #49	; 0x31
 8008cd4:	e778      	b.n	8008bc8 <_dtoa_r+0x998>
 8008cd6:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <_dtoa_r+0xafc>)
 8008cd8:	f7ff bb12 	b.w	8008300 <_dtoa_r+0xd0>
 8008cdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f47f aaee 	bne.w	80082c0 <_dtoa_r+0x90>
 8008ce4:	4b12      	ldr	r3, [pc, #72]	; (8008d30 <_dtoa_r+0xb00>)
 8008ce6:	f7ff bb0b 	b.w	8008300 <_dtoa_r+0xd0>
 8008cea:	f1ba 0f00 	cmp.w	sl, #0
 8008cee:	dc03      	bgt.n	8008cf8 <_dtoa_r+0xac8>
 8008cf0:	9b07      	ldr	r3, [sp, #28]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	f73f aec7 	bgt.w	8008a86 <_dtoa_r+0x856>
 8008cf8:	f8dd 8000 	ldr.w	r8, [sp]
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7ff fa08 	bl	8008114 <quorem>
 8008d04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d08:	f808 3b01 	strb.w	r3, [r8], #1
 8008d0c:	9a00      	ldr	r2, [sp, #0]
 8008d0e:	eba8 0202 	sub.w	r2, r8, r2
 8008d12:	4592      	cmp	sl, r2
 8008d14:	ddb7      	ble.n	8008c86 <_dtoa_r+0xa56>
 8008d16:	4629      	mov	r1, r5
 8008d18:	2300      	movs	r3, #0
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f000 f885 	bl	8008e2c <__multadd>
 8008d22:	4605      	mov	r5, r0
 8008d24:	e7ea      	b.n	8008cfc <_dtoa_r+0xacc>
 8008d26:	bf00      	nop
 8008d28:	0800a56b 	.word	0x0800a56b
 8008d2c:	0800a4c4 	.word	0x0800a4c4
 8008d30:	0800a4e8 	.word	0x0800a4e8

08008d34 <_localeconv_r>:
 8008d34:	4800      	ldr	r0, [pc, #0]	; (8008d38 <_localeconv_r+0x4>)
 8008d36:	4770      	bx	lr
 8008d38:	2000017c 	.word	0x2000017c

08008d3c <malloc>:
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <malloc+0xc>)
 8008d3e:	4601      	mov	r1, r0
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	f000 bbef 	b.w	8009524 <_malloc_r>
 8008d46:	bf00      	nop
 8008d48:	20000028 	.word	0x20000028

08008d4c <memcpy>:
 8008d4c:	440a      	add	r2, r1
 8008d4e:	4291      	cmp	r1, r2
 8008d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d54:	d100      	bne.n	8008d58 <memcpy+0xc>
 8008d56:	4770      	bx	lr
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d62:	4291      	cmp	r1, r2
 8008d64:	d1f9      	bne.n	8008d5a <memcpy+0xe>
 8008d66:	bd10      	pop	{r4, pc}

08008d68 <_Balloc>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	460d      	mov	r5, r1
 8008d70:	b976      	cbnz	r6, 8008d90 <_Balloc+0x28>
 8008d72:	2010      	movs	r0, #16
 8008d74:	f7ff ffe2 	bl	8008d3c <malloc>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	6260      	str	r0, [r4, #36]	; 0x24
 8008d7c:	b920      	cbnz	r0, 8008d88 <_Balloc+0x20>
 8008d7e:	4b18      	ldr	r3, [pc, #96]	; (8008de0 <_Balloc+0x78>)
 8008d80:	4818      	ldr	r0, [pc, #96]	; (8008de4 <_Balloc+0x7c>)
 8008d82:	2166      	movs	r1, #102	; 0x66
 8008d84:	f000 fd94 	bl	80098b0 <__assert_func>
 8008d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d8c:	6006      	str	r6, [r0, #0]
 8008d8e:	60c6      	str	r6, [r0, #12]
 8008d90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d92:	68f3      	ldr	r3, [r6, #12]
 8008d94:	b183      	cbz	r3, 8008db8 <_Balloc+0x50>
 8008d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d9e:	b9b8      	cbnz	r0, 8008dd0 <_Balloc+0x68>
 8008da0:	2101      	movs	r1, #1
 8008da2:	fa01 f605 	lsl.w	r6, r1, r5
 8008da6:	1d72      	adds	r2, r6, #5
 8008da8:	0092      	lsls	r2, r2, #2
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fb5a 	bl	8009464 <_calloc_r>
 8008db0:	b160      	cbz	r0, 8008dcc <_Balloc+0x64>
 8008db2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008db6:	e00e      	b.n	8008dd6 <_Balloc+0x6e>
 8008db8:	2221      	movs	r2, #33	; 0x21
 8008dba:	2104      	movs	r1, #4
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fb51 	bl	8009464 <_calloc_r>
 8008dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc4:	60f0      	str	r0, [r6, #12]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e4      	bne.n	8008d96 <_Balloc+0x2e>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
 8008dd0:	6802      	ldr	r2, [r0, #0]
 8008dd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ddc:	e7f7      	b.n	8008dce <_Balloc+0x66>
 8008dde:	bf00      	nop
 8008de0:	0800a4f5 	.word	0x0800a4f5
 8008de4:	0800a57c 	.word	0x0800a57c

08008de8 <_Bfree>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dec:	4605      	mov	r5, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	b976      	cbnz	r6, 8008e10 <_Bfree+0x28>
 8008df2:	2010      	movs	r0, #16
 8008df4:	f7ff ffa2 	bl	8008d3c <malloc>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	6268      	str	r0, [r5, #36]	; 0x24
 8008dfc:	b920      	cbnz	r0, 8008e08 <_Bfree+0x20>
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <_Bfree+0x3c>)
 8008e00:	4809      	ldr	r0, [pc, #36]	; (8008e28 <_Bfree+0x40>)
 8008e02:	218a      	movs	r1, #138	; 0x8a
 8008e04:	f000 fd54 	bl	80098b0 <__assert_func>
 8008e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e0c:	6006      	str	r6, [r0, #0]
 8008e0e:	60c6      	str	r6, [r0, #12]
 8008e10:	b13c      	cbz	r4, 8008e22 <_Bfree+0x3a>
 8008e12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e14:	6862      	ldr	r2, [r4, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e1c:	6021      	str	r1, [r4, #0]
 8008e1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	0800a4f5 	.word	0x0800a4f5
 8008e28:	0800a57c 	.word	0x0800a57c

08008e2c <__multadd>:
 8008e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e30:	690e      	ldr	r6, [r1, #16]
 8008e32:	4607      	mov	r7, r0
 8008e34:	4698      	mov	r8, r3
 8008e36:	460c      	mov	r4, r1
 8008e38:	f101 0014 	add.w	r0, r1, #20
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	6805      	ldr	r5, [r0, #0]
 8008e40:	b2a9      	uxth	r1, r5
 8008e42:	fb02 8101 	mla	r1, r2, r1, r8
 8008e46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e4a:	0c2d      	lsrs	r5, r5, #16
 8008e4c:	fb02 c505 	mla	r5, r2, r5, ip
 8008e50:	b289      	uxth	r1, r1
 8008e52:	3301      	adds	r3, #1
 8008e54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e58:	429e      	cmp	r6, r3
 8008e5a:	f840 1b04 	str.w	r1, [r0], #4
 8008e5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e62:	dcec      	bgt.n	8008e3e <__multadd+0x12>
 8008e64:	f1b8 0f00 	cmp.w	r8, #0
 8008e68:	d022      	beq.n	8008eb0 <__multadd+0x84>
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	42b3      	cmp	r3, r6
 8008e6e:	dc19      	bgt.n	8008ea4 <__multadd+0x78>
 8008e70:	6861      	ldr	r1, [r4, #4]
 8008e72:	4638      	mov	r0, r7
 8008e74:	3101      	adds	r1, #1
 8008e76:	f7ff ff77 	bl	8008d68 <_Balloc>
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	b928      	cbnz	r0, 8008e8a <__multadd+0x5e>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <__multadd+0x8c>)
 8008e82:	480e      	ldr	r0, [pc, #56]	; (8008ebc <__multadd+0x90>)
 8008e84:	21b5      	movs	r1, #181	; 0xb5
 8008e86:	f000 fd13 	bl	80098b0 <__assert_func>
 8008e8a:	6922      	ldr	r2, [r4, #16]
 8008e8c:	3202      	adds	r2, #2
 8008e8e:	f104 010c 	add.w	r1, r4, #12
 8008e92:	0092      	lsls	r2, r2, #2
 8008e94:	300c      	adds	r0, #12
 8008e96:	f7ff ff59 	bl	8008d4c <memcpy>
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f7ff ffa3 	bl	8008de8 <_Bfree>
 8008ea2:	462c      	mov	r4, r5
 8008ea4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008ea8:	3601      	adds	r6, #1
 8008eaa:	f8c3 8014 	str.w	r8, [r3, #20]
 8008eae:	6126      	str	r6, [r4, #16]
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb6:	bf00      	nop
 8008eb8:	0800a56b 	.word	0x0800a56b
 8008ebc:	0800a57c 	.word	0x0800a57c

08008ec0 <__hi0bits>:
 8008ec0:	0c03      	lsrs	r3, r0, #16
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	b9d3      	cbnz	r3, 8008efc <__hi0bits+0x3c>
 8008ec6:	0400      	lsls	r0, r0, #16
 8008ec8:	2310      	movs	r3, #16
 8008eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ece:	bf04      	itt	eq
 8008ed0:	0200      	lsleq	r0, r0, #8
 8008ed2:	3308      	addeq	r3, #8
 8008ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ed8:	bf04      	itt	eq
 8008eda:	0100      	lsleq	r0, r0, #4
 8008edc:	3304      	addeq	r3, #4
 8008ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ee2:	bf04      	itt	eq
 8008ee4:	0080      	lsleq	r0, r0, #2
 8008ee6:	3302      	addeq	r3, #2
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	db05      	blt.n	8008ef8 <__hi0bits+0x38>
 8008eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ef0:	f103 0301 	add.w	r3, r3, #1
 8008ef4:	bf08      	it	eq
 8008ef6:	2320      	moveq	r3, #32
 8008ef8:	4618      	mov	r0, r3
 8008efa:	4770      	bx	lr
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7e4      	b.n	8008eca <__hi0bits+0xa>

08008f00 <__lo0bits>:
 8008f00:	6803      	ldr	r3, [r0, #0]
 8008f02:	f013 0207 	ands.w	r2, r3, #7
 8008f06:	4601      	mov	r1, r0
 8008f08:	d00b      	beq.n	8008f22 <__lo0bits+0x22>
 8008f0a:	07da      	lsls	r2, r3, #31
 8008f0c:	d424      	bmi.n	8008f58 <__lo0bits+0x58>
 8008f0e:	0798      	lsls	r0, r3, #30
 8008f10:	bf49      	itett	mi
 8008f12:	085b      	lsrmi	r3, r3, #1
 8008f14:	089b      	lsrpl	r3, r3, #2
 8008f16:	2001      	movmi	r0, #1
 8008f18:	600b      	strmi	r3, [r1, #0]
 8008f1a:	bf5c      	itt	pl
 8008f1c:	600b      	strpl	r3, [r1, #0]
 8008f1e:	2002      	movpl	r0, #2
 8008f20:	4770      	bx	lr
 8008f22:	b298      	uxth	r0, r3
 8008f24:	b9b0      	cbnz	r0, 8008f54 <__lo0bits+0x54>
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	2010      	movs	r0, #16
 8008f2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f2e:	bf04      	itt	eq
 8008f30:	0a1b      	lsreq	r3, r3, #8
 8008f32:	3008      	addeq	r0, #8
 8008f34:	071a      	lsls	r2, r3, #28
 8008f36:	bf04      	itt	eq
 8008f38:	091b      	lsreq	r3, r3, #4
 8008f3a:	3004      	addeq	r0, #4
 8008f3c:	079a      	lsls	r2, r3, #30
 8008f3e:	bf04      	itt	eq
 8008f40:	089b      	lsreq	r3, r3, #2
 8008f42:	3002      	addeq	r0, #2
 8008f44:	07da      	lsls	r2, r3, #31
 8008f46:	d403      	bmi.n	8008f50 <__lo0bits+0x50>
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	f100 0001 	add.w	r0, r0, #1
 8008f4e:	d005      	beq.n	8008f5c <__lo0bits+0x5c>
 8008f50:	600b      	str	r3, [r1, #0]
 8008f52:	4770      	bx	lr
 8008f54:	4610      	mov	r0, r2
 8008f56:	e7e8      	b.n	8008f2a <__lo0bits+0x2a>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	4770      	bx	lr
 8008f5c:	2020      	movs	r0, #32
 8008f5e:	4770      	bx	lr

08008f60 <__i2b>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	460c      	mov	r4, r1
 8008f64:	2101      	movs	r1, #1
 8008f66:	f7ff feff 	bl	8008d68 <_Balloc>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	b928      	cbnz	r0, 8008f7a <__i2b+0x1a>
 8008f6e:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <__i2b+0x24>)
 8008f70:	4805      	ldr	r0, [pc, #20]	; (8008f88 <__i2b+0x28>)
 8008f72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f76:	f000 fc9b 	bl	80098b0 <__assert_func>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	6144      	str	r4, [r0, #20]
 8008f7e:	6103      	str	r3, [r0, #16]
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	bf00      	nop
 8008f84:	0800a56b 	.word	0x0800a56b
 8008f88:	0800a57c 	.word	0x0800a57c

08008f8c <__multiply>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	4614      	mov	r4, r2
 8008f92:	690a      	ldr	r2, [r1, #16]
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	bfb8      	it	lt
 8008f9a:	460b      	movlt	r3, r1
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	bfbc      	itt	lt
 8008fa0:	4625      	movlt	r5, r4
 8008fa2:	461c      	movlt	r4, r3
 8008fa4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008fa8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008fac:	68ab      	ldr	r3, [r5, #8]
 8008fae:	6869      	ldr	r1, [r5, #4]
 8008fb0:	eb0a 0709 	add.w	r7, sl, r9
 8008fb4:	42bb      	cmp	r3, r7
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	bfb8      	it	lt
 8008fba:	3101      	addlt	r1, #1
 8008fbc:	f7ff fed4 	bl	8008d68 <_Balloc>
 8008fc0:	b930      	cbnz	r0, 8008fd0 <__multiply+0x44>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b42      	ldr	r3, [pc, #264]	; (80090d0 <__multiply+0x144>)
 8008fc6:	4843      	ldr	r0, [pc, #268]	; (80090d4 <__multiply+0x148>)
 8008fc8:	f240 115d 	movw	r1, #349	; 0x15d
 8008fcc:	f000 fc70 	bl	80098b0 <__assert_func>
 8008fd0:	f100 0614 	add.w	r6, r0, #20
 8008fd4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fd8:	4633      	mov	r3, r6
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4543      	cmp	r3, r8
 8008fde:	d31e      	bcc.n	800901e <__multiply+0x92>
 8008fe0:	f105 0c14 	add.w	ip, r5, #20
 8008fe4:	f104 0314 	add.w	r3, r4, #20
 8008fe8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ff0:	9202      	str	r2, [sp, #8]
 8008ff2:	ebac 0205 	sub.w	r2, ip, r5
 8008ff6:	3a15      	subs	r2, #21
 8008ff8:	f022 0203 	bic.w	r2, r2, #3
 8008ffc:	3204      	adds	r2, #4
 8008ffe:	f105 0115 	add.w	r1, r5, #21
 8009002:	458c      	cmp	ip, r1
 8009004:	bf38      	it	cc
 8009006:	2204      	movcc	r2, #4
 8009008:	9201      	str	r2, [sp, #4]
 800900a:	9a02      	ldr	r2, [sp, #8]
 800900c:	9303      	str	r3, [sp, #12]
 800900e:	429a      	cmp	r2, r3
 8009010:	d808      	bhi.n	8009024 <__multiply+0x98>
 8009012:	2f00      	cmp	r7, #0
 8009014:	dc55      	bgt.n	80090c2 <__multiply+0x136>
 8009016:	6107      	str	r7, [r0, #16]
 8009018:	b005      	add	sp, #20
 800901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901e:	f843 2b04 	str.w	r2, [r3], #4
 8009022:	e7db      	b.n	8008fdc <__multiply+0x50>
 8009024:	f8b3 a000 	ldrh.w	sl, [r3]
 8009028:	f1ba 0f00 	cmp.w	sl, #0
 800902c:	d020      	beq.n	8009070 <__multiply+0xe4>
 800902e:	f105 0e14 	add.w	lr, r5, #20
 8009032:	46b1      	mov	r9, r6
 8009034:	2200      	movs	r2, #0
 8009036:	f85e 4b04 	ldr.w	r4, [lr], #4
 800903a:	f8d9 b000 	ldr.w	fp, [r9]
 800903e:	b2a1      	uxth	r1, r4
 8009040:	fa1f fb8b 	uxth.w	fp, fp
 8009044:	fb0a b101 	mla	r1, sl, r1, fp
 8009048:	4411      	add	r1, r2
 800904a:	f8d9 2000 	ldr.w	r2, [r9]
 800904e:	0c24      	lsrs	r4, r4, #16
 8009050:	0c12      	lsrs	r2, r2, #16
 8009052:	fb0a 2404 	mla	r4, sl, r4, r2
 8009056:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800905a:	b289      	uxth	r1, r1
 800905c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009060:	45f4      	cmp	ip, lr
 8009062:	f849 1b04 	str.w	r1, [r9], #4
 8009066:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800906a:	d8e4      	bhi.n	8009036 <__multiply+0xaa>
 800906c:	9901      	ldr	r1, [sp, #4]
 800906e:	5072      	str	r2, [r6, r1]
 8009070:	9a03      	ldr	r2, [sp, #12]
 8009072:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009076:	3304      	adds	r3, #4
 8009078:	f1b9 0f00 	cmp.w	r9, #0
 800907c:	d01f      	beq.n	80090be <__multiply+0x132>
 800907e:	6834      	ldr	r4, [r6, #0]
 8009080:	f105 0114 	add.w	r1, r5, #20
 8009084:	46b6      	mov	lr, r6
 8009086:	f04f 0a00 	mov.w	sl, #0
 800908a:	880a      	ldrh	r2, [r1, #0]
 800908c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009090:	fb09 b202 	mla	r2, r9, r2, fp
 8009094:	4492      	add	sl, r2
 8009096:	b2a4      	uxth	r4, r4
 8009098:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800909c:	f84e 4b04 	str.w	r4, [lr], #4
 80090a0:	f851 4b04 	ldr.w	r4, [r1], #4
 80090a4:	f8be 2000 	ldrh.w	r2, [lr]
 80090a8:	0c24      	lsrs	r4, r4, #16
 80090aa:	fb09 2404 	mla	r4, r9, r4, r2
 80090ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80090b2:	458c      	cmp	ip, r1
 80090b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090b8:	d8e7      	bhi.n	800908a <__multiply+0xfe>
 80090ba:	9a01      	ldr	r2, [sp, #4]
 80090bc:	50b4      	str	r4, [r6, r2]
 80090be:	3604      	adds	r6, #4
 80090c0:	e7a3      	b.n	800900a <__multiply+0x7e>
 80090c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1a5      	bne.n	8009016 <__multiply+0x8a>
 80090ca:	3f01      	subs	r7, #1
 80090cc:	e7a1      	b.n	8009012 <__multiply+0x86>
 80090ce:	bf00      	nop
 80090d0:	0800a56b 	.word	0x0800a56b
 80090d4:	0800a57c 	.word	0x0800a57c

080090d8 <__pow5mult>:
 80090d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090dc:	4615      	mov	r5, r2
 80090de:	f012 0203 	ands.w	r2, r2, #3
 80090e2:	4606      	mov	r6, r0
 80090e4:	460f      	mov	r7, r1
 80090e6:	d007      	beq.n	80090f8 <__pow5mult+0x20>
 80090e8:	4c25      	ldr	r4, [pc, #148]	; (8009180 <__pow5mult+0xa8>)
 80090ea:	3a01      	subs	r2, #1
 80090ec:	2300      	movs	r3, #0
 80090ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090f2:	f7ff fe9b 	bl	8008e2c <__multadd>
 80090f6:	4607      	mov	r7, r0
 80090f8:	10ad      	asrs	r5, r5, #2
 80090fa:	d03d      	beq.n	8009178 <__pow5mult+0xa0>
 80090fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090fe:	b97c      	cbnz	r4, 8009120 <__pow5mult+0x48>
 8009100:	2010      	movs	r0, #16
 8009102:	f7ff fe1b 	bl	8008d3c <malloc>
 8009106:	4602      	mov	r2, r0
 8009108:	6270      	str	r0, [r6, #36]	; 0x24
 800910a:	b928      	cbnz	r0, 8009118 <__pow5mult+0x40>
 800910c:	4b1d      	ldr	r3, [pc, #116]	; (8009184 <__pow5mult+0xac>)
 800910e:	481e      	ldr	r0, [pc, #120]	; (8009188 <__pow5mult+0xb0>)
 8009110:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009114:	f000 fbcc 	bl	80098b0 <__assert_func>
 8009118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800911c:	6004      	str	r4, [r0, #0]
 800911e:	60c4      	str	r4, [r0, #12]
 8009120:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009124:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009128:	b94c      	cbnz	r4, 800913e <__pow5mult+0x66>
 800912a:	f240 2171 	movw	r1, #625	; 0x271
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ff16 	bl	8008f60 <__i2b>
 8009134:	2300      	movs	r3, #0
 8009136:	f8c8 0008 	str.w	r0, [r8, #8]
 800913a:	4604      	mov	r4, r0
 800913c:	6003      	str	r3, [r0, #0]
 800913e:	f04f 0900 	mov.w	r9, #0
 8009142:	07eb      	lsls	r3, r5, #31
 8009144:	d50a      	bpl.n	800915c <__pow5mult+0x84>
 8009146:	4639      	mov	r1, r7
 8009148:	4622      	mov	r2, r4
 800914a:	4630      	mov	r0, r6
 800914c:	f7ff ff1e 	bl	8008f8c <__multiply>
 8009150:	4639      	mov	r1, r7
 8009152:	4680      	mov	r8, r0
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fe47 	bl	8008de8 <_Bfree>
 800915a:	4647      	mov	r7, r8
 800915c:	106d      	asrs	r5, r5, #1
 800915e:	d00b      	beq.n	8009178 <__pow5mult+0xa0>
 8009160:	6820      	ldr	r0, [r4, #0]
 8009162:	b938      	cbnz	r0, 8009174 <__pow5mult+0x9c>
 8009164:	4622      	mov	r2, r4
 8009166:	4621      	mov	r1, r4
 8009168:	4630      	mov	r0, r6
 800916a:	f7ff ff0f 	bl	8008f8c <__multiply>
 800916e:	6020      	str	r0, [r4, #0]
 8009170:	f8c0 9000 	str.w	r9, [r0]
 8009174:	4604      	mov	r4, r0
 8009176:	e7e4      	b.n	8009142 <__pow5mult+0x6a>
 8009178:	4638      	mov	r0, r7
 800917a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917e:	bf00      	nop
 8009180:	0800a6d0 	.word	0x0800a6d0
 8009184:	0800a4f5 	.word	0x0800a4f5
 8009188:	0800a57c 	.word	0x0800a57c

0800918c <__lshift>:
 800918c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	460c      	mov	r4, r1
 8009192:	6849      	ldr	r1, [r1, #4]
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	4607      	mov	r7, r0
 800919e:	4691      	mov	r9, r2
 80091a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091a4:	f108 0601 	add.w	r6, r8, #1
 80091a8:	42b3      	cmp	r3, r6
 80091aa:	db0b      	blt.n	80091c4 <__lshift+0x38>
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff fddb 	bl	8008d68 <_Balloc>
 80091b2:	4605      	mov	r5, r0
 80091b4:	b948      	cbnz	r0, 80091ca <__lshift+0x3e>
 80091b6:	4602      	mov	r2, r0
 80091b8:	4b28      	ldr	r3, [pc, #160]	; (800925c <__lshift+0xd0>)
 80091ba:	4829      	ldr	r0, [pc, #164]	; (8009260 <__lshift+0xd4>)
 80091bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091c0:	f000 fb76 	bl	80098b0 <__assert_func>
 80091c4:	3101      	adds	r1, #1
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	e7ee      	b.n	80091a8 <__lshift+0x1c>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f100 0114 	add.w	r1, r0, #20
 80091d0:	f100 0210 	add.w	r2, r0, #16
 80091d4:	4618      	mov	r0, r3
 80091d6:	4553      	cmp	r3, sl
 80091d8:	db33      	blt.n	8009242 <__lshift+0xb6>
 80091da:	6920      	ldr	r0, [r4, #16]
 80091dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091e0:	f104 0314 	add.w	r3, r4, #20
 80091e4:	f019 091f 	ands.w	r9, r9, #31
 80091e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091f0:	d02b      	beq.n	800924a <__lshift+0xbe>
 80091f2:	f1c9 0e20 	rsb	lr, r9, #32
 80091f6:	468a      	mov	sl, r1
 80091f8:	2200      	movs	r2, #0
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009200:	4302      	orrs	r2, r0
 8009202:	f84a 2b04 	str.w	r2, [sl], #4
 8009206:	f853 2b04 	ldr.w	r2, [r3], #4
 800920a:	459c      	cmp	ip, r3
 800920c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009210:	d8f3      	bhi.n	80091fa <__lshift+0x6e>
 8009212:	ebac 0304 	sub.w	r3, ip, r4
 8009216:	3b15      	subs	r3, #21
 8009218:	f023 0303 	bic.w	r3, r3, #3
 800921c:	3304      	adds	r3, #4
 800921e:	f104 0015 	add.w	r0, r4, #21
 8009222:	4584      	cmp	ip, r0
 8009224:	bf38      	it	cc
 8009226:	2304      	movcc	r3, #4
 8009228:	50ca      	str	r2, [r1, r3]
 800922a:	b10a      	cbz	r2, 8009230 <__lshift+0xa4>
 800922c:	f108 0602 	add.w	r6, r8, #2
 8009230:	3e01      	subs	r6, #1
 8009232:	4638      	mov	r0, r7
 8009234:	612e      	str	r6, [r5, #16]
 8009236:	4621      	mov	r1, r4
 8009238:	f7ff fdd6 	bl	8008de8 <_Bfree>
 800923c:	4628      	mov	r0, r5
 800923e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009242:	f842 0f04 	str.w	r0, [r2, #4]!
 8009246:	3301      	adds	r3, #1
 8009248:	e7c5      	b.n	80091d6 <__lshift+0x4a>
 800924a:	3904      	subs	r1, #4
 800924c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009250:	f841 2f04 	str.w	r2, [r1, #4]!
 8009254:	459c      	cmp	ip, r3
 8009256:	d8f9      	bhi.n	800924c <__lshift+0xc0>
 8009258:	e7ea      	b.n	8009230 <__lshift+0xa4>
 800925a:	bf00      	nop
 800925c:	0800a56b 	.word	0x0800a56b
 8009260:	0800a57c 	.word	0x0800a57c

08009264 <__mcmp>:
 8009264:	b530      	push	{r4, r5, lr}
 8009266:	6902      	ldr	r2, [r0, #16]
 8009268:	690c      	ldr	r4, [r1, #16]
 800926a:	1b12      	subs	r2, r2, r4
 800926c:	d10e      	bne.n	800928c <__mcmp+0x28>
 800926e:	f100 0314 	add.w	r3, r0, #20
 8009272:	3114      	adds	r1, #20
 8009274:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009278:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800927c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009280:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009284:	42a5      	cmp	r5, r4
 8009286:	d003      	beq.n	8009290 <__mcmp+0x2c>
 8009288:	d305      	bcc.n	8009296 <__mcmp+0x32>
 800928a:	2201      	movs	r2, #1
 800928c:	4610      	mov	r0, r2
 800928e:	bd30      	pop	{r4, r5, pc}
 8009290:	4283      	cmp	r3, r0
 8009292:	d3f3      	bcc.n	800927c <__mcmp+0x18>
 8009294:	e7fa      	b.n	800928c <__mcmp+0x28>
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	e7f7      	b.n	800928c <__mcmp+0x28>

0800929c <__mdiff>:
 800929c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	460c      	mov	r4, r1
 80092a2:	4606      	mov	r6, r0
 80092a4:	4611      	mov	r1, r2
 80092a6:	4620      	mov	r0, r4
 80092a8:	4617      	mov	r7, r2
 80092aa:	f7ff ffdb 	bl	8009264 <__mcmp>
 80092ae:	1e05      	subs	r5, r0, #0
 80092b0:	d110      	bne.n	80092d4 <__mdiff+0x38>
 80092b2:	4629      	mov	r1, r5
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7ff fd57 	bl	8008d68 <_Balloc>
 80092ba:	b930      	cbnz	r0, 80092ca <__mdiff+0x2e>
 80092bc:	4b39      	ldr	r3, [pc, #228]	; (80093a4 <__mdiff+0x108>)
 80092be:	4602      	mov	r2, r0
 80092c0:	f240 2132 	movw	r1, #562	; 0x232
 80092c4:	4838      	ldr	r0, [pc, #224]	; (80093a8 <__mdiff+0x10c>)
 80092c6:	f000 faf3 	bl	80098b0 <__assert_func>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d4:	bfa4      	itt	ge
 80092d6:	463b      	movge	r3, r7
 80092d8:	4627      	movge	r7, r4
 80092da:	4630      	mov	r0, r6
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	bfa6      	itte	ge
 80092e0:	461c      	movge	r4, r3
 80092e2:	2500      	movge	r5, #0
 80092e4:	2501      	movlt	r5, #1
 80092e6:	f7ff fd3f 	bl	8008d68 <_Balloc>
 80092ea:	b920      	cbnz	r0, 80092f6 <__mdiff+0x5a>
 80092ec:	4b2d      	ldr	r3, [pc, #180]	; (80093a4 <__mdiff+0x108>)
 80092ee:	4602      	mov	r2, r0
 80092f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092f4:	e7e6      	b.n	80092c4 <__mdiff+0x28>
 80092f6:	693e      	ldr	r6, [r7, #16]
 80092f8:	60c5      	str	r5, [r0, #12]
 80092fa:	6925      	ldr	r5, [r4, #16]
 80092fc:	f107 0114 	add.w	r1, r7, #20
 8009300:	f104 0914 	add.w	r9, r4, #20
 8009304:	f100 0e14 	add.w	lr, r0, #20
 8009308:	f107 0210 	add.w	r2, r7, #16
 800930c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009310:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009314:	46f2      	mov	sl, lr
 8009316:	2700      	movs	r7, #0
 8009318:	f859 3b04 	ldr.w	r3, [r9], #4
 800931c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009320:	fa1f f883 	uxth.w	r8, r3
 8009324:	fa17 f78b 	uxtah	r7, r7, fp
 8009328:	0c1b      	lsrs	r3, r3, #16
 800932a:	eba7 0808 	sub.w	r8, r7, r8
 800932e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009332:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009336:	fa1f f888 	uxth.w	r8, r8
 800933a:	141f      	asrs	r7, r3, #16
 800933c:	454d      	cmp	r5, r9
 800933e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009342:	f84a 3b04 	str.w	r3, [sl], #4
 8009346:	d8e7      	bhi.n	8009318 <__mdiff+0x7c>
 8009348:	1b2b      	subs	r3, r5, r4
 800934a:	3b15      	subs	r3, #21
 800934c:	f023 0303 	bic.w	r3, r3, #3
 8009350:	3304      	adds	r3, #4
 8009352:	3415      	adds	r4, #21
 8009354:	42a5      	cmp	r5, r4
 8009356:	bf38      	it	cc
 8009358:	2304      	movcc	r3, #4
 800935a:	4419      	add	r1, r3
 800935c:	4473      	add	r3, lr
 800935e:	469e      	mov	lr, r3
 8009360:	460d      	mov	r5, r1
 8009362:	4565      	cmp	r5, ip
 8009364:	d30e      	bcc.n	8009384 <__mdiff+0xe8>
 8009366:	f10c 0203 	add.w	r2, ip, #3
 800936a:	1a52      	subs	r2, r2, r1
 800936c:	f022 0203 	bic.w	r2, r2, #3
 8009370:	3903      	subs	r1, #3
 8009372:	458c      	cmp	ip, r1
 8009374:	bf38      	it	cc
 8009376:	2200      	movcc	r2, #0
 8009378:	441a      	add	r2, r3
 800937a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800937e:	b17b      	cbz	r3, 80093a0 <__mdiff+0x104>
 8009380:	6106      	str	r6, [r0, #16]
 8009382:	e7a5      	b.n	80092d0 <__mdiff+0x34>
 8009384:	f855 8b04 	ldr.w	r8, [r5], #4
 8009388:	fa17 f488 	uxtah	r4, r7, r8
 800938c:	1422      	asrs	r2, r4, #16
 800938e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009392:	b2a4      	uxth	r4, r4
 8009394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009398:	f84e 4b04 	str.w	r4, [lr], #4
 800939c:	1417      	asrs	r7, r2, #16
 800939e:	e7e0      	b.n	8009362 <__mdiff+0xc6>
 80093a0:	3e01      	subs	r6, #1
 80093a2:	e7ea      	b.n	800937a <__mdiff+0xde>
 80093a4:	0800a56b 	.word	0x0800a56b
 80093a8:	0800a57c 	.word	0x0800a57c

080093ac <__d2b>:
 80093ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	4689      	mov	r9, r1
 80093b2:	2101      	movs	r1, #1
 80093b4:	ec57 6b10 	vmov	r6, r7, d0
 80093b8:	4690      	mov	r8, r2
 80093ba:	f7ff fcd5 	bl	8008d68 <_Balloc>
 80093be:	4604      	mov	r4, r0
 80093c0:	b930      	cbnz	r0, 80093d0 <__d2b+0x24>
 80093c2:	4602      	mov	r2, r0
 80093c4:	4b25      	ldr	r3, [pc, #148]	; (800945c <__d2b+0xb0>)
 80093c6:	4826      	ldr	r0, [pc, #152]	; (8009460 <__d2b+0xb4>)
 80093c8:	f240 310a 	movw	r1, #778	; 0x30a
 80093cc:	f000 fa70 	bl	80098b0 <__assert_func>
 80093d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093d8:	bb35      	cbnz	r5, 8009428 <__d2b+0x7c>
 80093da:	2e00      	cmp	r6, #0
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	d028      	beq.n	8009432 <__d2b+0x86>
 80093e0:	4668      	mov	r0, sp
 80093e2:	9600      	str	r6, [sp, #0]
 80093e4:	f7ff fd8c 	bl	8008f00 <__lo0bits>
 80093e8:	9900      	ldr	r1, [sp, #0]
 80093ea:	b300      	cbz	r0, 800942e <__d2b+0x82>
 80093ec:	9a01      	ldr	r2, [sp, #4]
 80093ee:	f1c0 0320 	rsb	r3, r0, #32
 80093f2:	fa02 f303 	lsl.w	r3, r2, r3
 80093f6:	430b      	orrs	r3, r1
 80093f8:	40c2      	lsrs	r2, r0
 80093fa:	6163      	str	r3, [r4, #20]
 80093fc:	9201      	str	r2, [sp, #4]
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	61a3      	str	r3, [r4, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	bf14      	ite	ne
 8009406:	2202      	movne	r2, #2
 8009408:	2201      	moveq	r2, #1
 800940a:	6122      	str	r2, [r4, #16]
 800940c:	b1d5      	cbz	r5, 8009444 <__d2b+0x98>
 800940e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009412:	4405      	add	r5, r0
 8009414:	f8c9 5000 	str.w	r5, [r9]
 8009418:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800941c:	f8c8 0000 	str.w	r0, [r8]
 8009420:	4620      	mov	r0, r4
 8009422:	b003      	add	sp, #12
 8009424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800942c:	e7d5      	b.n	80093da <__d2b+0x2e>
 800942e:	6161      	str	r1, [r4, #20]
 8009430:	e7e5      	b.n	80093fe <__d2b+0x52>
 8009432:	a801      	add	r0, sp, #4
 8009434:	f7ff fd64 	bl	8008f00 <__lo0bits>
 8009438:	9b01      	ldr	r3, [sp, #4]
 800943a:	6163      	str	r3, [r4, #20]
 800943c:	2201      	movs	r2, #1
 800943e:	6122      	str	r2, [r4, #16]
 8009440:	3020      	adds	r0, #32
 8009442:	e7e3      	b.n	800940c <__d2b+0x60>
 8009444:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009448:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800944c:	f8c9 0000 	str.w	r0, [r9]
 8009450:	6918      	ldr	r0, [r3, #16]
 8009452:	f7ff fd35 	bl	8008ec0 <__hi0bits>
 8009456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800945a:	e7df      	b.n	800941c <__d2b+0x70>
 800945c:	0800a56b 	.word	0x0800a56b
 8009460:	0800a57c 	.word	0x0800a57c

08009464 <_calloc_r>:
 8009464:	b513      	push	{r0, r1, r4, lr}
 8009466:	434a      	muls	r2, r1
 8009468:	4611      	mov	r1, r2
 800946a:	9201      	str	r2, [sp, #4]
 800946c:	f000 f85a 	bl	8009524 <_malloc_r>
 8009470:	4604      	mov	r4, r0
 8009472:	b118      	cbz	r0, 800947c <_calloc_r+0x18>
 8009474:	9a01      	ldr	r2, [sp, #4]
 8009476:	2100      	movs	r1, #0
 8009478:	f7fe f9e2 	bl	8007840 <memset>
 800947c:	4620      	mov	r0, r4
 800947e:	b002      	add	sp, #8
 8009480:	bd10      	pop	{r4, pc}
	...

08009484 <_free_r>:
 8009484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009486:	2900      	cmp	r1, #0
 8009488:	d048      	beq.n	800951c <_free_r+0x98>
 800948a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948e:	9001      	str	r0, [sp, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	f1a1 0404 	sub.w	r4, r1, #4
 8009496:	bfb8      	it	lt
 8009498:	18e4      	addlt	r4, r4, r3
 800949a:	f000 fa65 	bl	8009968 <__malloc_lock>
 800949e:	4a20      	ldr	r2, [pc, #128]	; (8009520 <_free_r+0x9c>)
 80094a0:	9801      	ldr	r0, [sp, #4]
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	4615      	mov	r5, r2
 80094a6:	b933      	cbnz	r3, 80094b6 <_free_r+0x32>
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	6014      	str	r4, [r2, #0]
 80094ac:	b003      	add	sp, #12
 80094ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094b2:	f000 ba5f 	b.w	8009974 <__malloc_unlock>
 80094b6:	42a3      	cmp	r3, r4
 80094b8:	d90b      	bls.n	80094d2 <_free_r+0x4e>
 80094ba:	6821      	ldr	r1, [r4, #0]
 80094bc:	1862      	adds	r2, r4, r1
 80094be:	4293      	cmp	r3, r2
 80094c0:	bf04      	itt	eq
 80094c2:	681a      	ldreq	r2, [r3, #0]
 80094c4:	685b      	ldreq	r3, [r3, #4]
 80094c6:	6063      	str	r3, [r4, #4]
 80094c8:	bf04      	itt	eq
 80094ca:	1852      	addeq	r2, r2, r1
 80094cc:	6022      	streq	r2, [r4, #0]
 80094ce:	602c      	str	r4, [r5, #0]
 80094d0:	e7ec      	b.n	80094ac <_free_r+0x28>
 80094d2:	461a      	mov	r2, r3
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	b10b      	cbz	r3, 80094dc <_free_r+0x58>
 80094d8:	42a3      	cmp	r3, r4
 80094da:	d9fa      	bls.n	80094d2 <_free_r+0x4e>
 80094dc:	6811      	ldr	r1, [r2, #0]
 80094de:	1855      	adds	r5, r2, r1
 80094e0:	42a5      	cmp	r5, r4
 80094e2:	d10b      	bne.n	80094fc <_free_r+0x78>
 80094e4:	6824      	ldr	r4, [r4, #0]
 80094e6:	4421      	add	r1, r4
 80094e8:	1854      	adds	r4, r2, r1
 80094ea:	42a3      	cmp	r3, r4
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	d1dd      	bne.n	80094ac <_free_r+0x28>
 80094f0:	681c      	ldr	r4, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	6053      	str	r3, [r2, #4]
 80094f6:	4421      	add	r1, r4
 80094f8:	6011      	str	r1, [r2, #0]
 80094fa:	e7d7      	b.n	80094ac <_free_r+0x28>
 80094fc:	d902      	bls.n	8009504 <_free_r+0x80>
 80094fe:	230c      	movs	r3, #12
 8009500:	6003      	str	r3, [r0, #0]
 8009502:	e7d3      	b.n	80094ac <_free_r+0x28>
 8009504:	6825      	ldr	r5, [r4, #0]
 8009506:	1961      	adds	r1, r4, r5
 8009508:	428b      	cmp	r3, r1
 800950a:	bf04      	itt	eq
 800950c:	6819      	ldreq	r1, [r3, #0]
 800950e:	685b      	ldreq	r3, [r3, #4]
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	bf04      	itt	eq
 8009514:	1949      	addeq	r1, r1, r5
 8009516:	6021      	streq	r1, [r4, #0]
 8009518:	6054      	str	r4, [r2, #4]
 800951a:	e7c7      	b.n	80094ac <_free_r+0x28>
 800951c:	b003      	add	sp, #12
 800951e:	bd30      	pop	{r4, r5, pc}
 8009520:	20000220 	.word	0x20000220

08009524 <_malloc_r>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	1ccd      	adds	r5, r1, #3
 8009528:	f025 0503 	bic.w	r5, r5, #3
 800952c:	3508      	adds	r5, #8
 800952e:	2d0c      	cmp	r5, #12
 8009530:	bf38      	it	cc
 8009532:	250c      	movcc	r5, #12
 8009534:	2d00      	cmp	r5, #0
 8009536:	4606      	mov	r6, r0
 8009538:	db01      	blt.n	800953e <_malloc_r+0x1a>
 800953a:	42a9      	cmp	r1, r5
 800953c:	d903      	bls.n	8009546 <_malloc_r+0x22>
 800953e:	230c      	movs	r3, #12
 8009540:	6033      	str	r3, [r6, #0]
 8009542:	2000      	movs	r0, #0
 8009544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009546:	f000 fa0f 	bl	8009968 <__malloc_lock>
 800954a:	4921      	ldr	r1, [pc, #132]	; (80095d0 <_malloc_r+0xac>)
 800954c:	680a      	ldr	r2, [r1, #0]
 800954e:	4614      	mov	r4, r2
 8009550:	b99c      	cbnz	r4, 800957a <_malloc_r+0x56>
 8009552:	4f20      	ldr	r7, [pc, #128]	; (80095d4 <_malloc_r+0xb0>)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	b923      	cbnz	r3, 8009562 <_malloc_r+0x3e>
 8009558:	4621      	mov	r1, r4
 800955a:	4630      	mov	r0, r6
 800955c:	f000 f998 	bl	8009890 <_sbrk_r>
 8009560:	6038      	str	r0, [r7, #0]
 8009562:	4629      	mov	r1, r5
 8009564:	4630      	mov	r0, r6
 8009566:	f000 f993 	bl	8009890 <_sbrk_r>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d123      	bne.n	80095b6 <_malloc_r+0x92>
 800956e:	230c      	movs	r3, #12
 8009570:	6033      	str	r3, [r6, #0]
 8009572:	4630      	mov	r0, r6
 8009574:	f000 f9fe 	bl	8009974 <__malloc_unlock>
 8009578:	e7e3      	b.n	8009542 <_malloc_r+0x1e>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	1b5b      	subs	r3, r3, r5
 800957e:	d417      	bmi.n	80095b0 <_malloc_r+0x8c>
 8009580:	2b0b      	cmp	r3, #11
 8009582:	d903      	bls.n	800958c <_malloc_r+0x68>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	441c      	add	r4, r3
 8009588:	6025      	str	r5, [r4, #0]
 800958a:	e004      	b.n	8009596 <_malloc_r+0x72>
 800958c:	6863      	ldr	r3, [r4, #4]
 800958e:	42a2      	cmp	r2, r4
 8009590:	bf0c      	ite	eq
 8009592:	600b      	streq	r3, [r1, #0]
 8009594:	6053      	strne	r3, [r2, #4]
 8009596:	4630      	mov	r0, r6
 8009598:	f000 f9ec 	bl	8009974 <__malloc_unlock>
 800959c:	f104 000b 	add.w	r0, r4, #11
 80095a0:	1d23      	adds	r3, r4, #4
 80095a2:	f020 0007 	bic.w	r0, r0, #7
 80095a6:	1ac2      	subs	r2, r0, r3
 80095a8:	d0cc      	beq.n	8009544 <_malloc_r+0x20>
 80095aa:	1a1b      	subs	r3, r3, r0
 80095ac:	50a3      	str	r3, [r4, r2]
 80095ae:	e7c9      	b.n	8009544 <_malloc_r+0x20>
 80095b0:	4622      	mov	r2, r4
 80095b2:	6864      	ldr	r4, [r4, #4]
 80095b4:	e7cc      	b.n	8009550 <_malloc_r+0x2c>
 80095b6:	1cc4      	adds	r4, r0, #3
 80095b8:	f024 0403 	bic.w	r4, r4, #3
 80095bc:	42a0      	cmp	r0, r4
 80095be:	d0e3      	beq.n	8009588 <_malloc_r+0x64>
 80095c0:	1a21      	subs	r1, r4, r0
 80095c2:	4630      	mov	r0, r6
 80095c4:	f000 f964 	bl	8009890 <_sbrk_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d1dd      	bne.n	8009588 <_malloc_r+0x64>
 80095cc:	e7cf      	b.n	800956e <_malloc_r+0x4a>
 80095ce:	bf00      	nop
 80095d0:	20000220 	.word	0x20000220
 80095d4:	20000224 	.word	0x20000224

080095d8 <__ssputs_r>:
 80095d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	688e      	ldr	r6, [r1, #8]
 80095de:	429e      	cmp	r6, r3
 80095e0:	4682      	mov	sl, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	4690      	mov	r8, r2
 80095e6:	461f      	mov	r7, r3
 80095e8:	d838      	bhi.n	800965c <__ssputs_r+0x84>
 80095ea:	898a      	ldrh	r2, [r1, #12]
 80095ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095f0:	d032      	beq.n	8009658 <__ssputs_r+0x80>
 80095f2:	6825      	ldr	r5, [r4, #0]
 80095f4:	6909      	ldr	r1, [r1, #16]
 80095f6:	eba5 0901 	sub.w	r9, r5, r1
 80095fa:	6965      	ldr	r5, [r4, #20]
 80095fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009604:	3301      	adds	r3, #1
 8009606:	444b      	add	r3, r9
 8009608:	106d      	asrs	r5, r5, #1
 800960a:	429d      	cmp	r5, r3
 800960c:	bf38      	it	cc
 800960e:	461d      	movcc	r5, r3
 8009610:	0553      	lsls	r3, r2, #21
 8009612:	d531      	bpl.n	8009678 <__ssputs_r+0xa0>
 8009614:	4629      	mov	r1, r5
 8009616:	f7ff ff85 	bl	8009524 <_malloc_r>
 800961a:	4606      	mov	r6, r0
 800961c:	b950      	cbnz	r0, 8009634 <__ssputs_r+0x5c>
 800961e:	230c      	movs	r3, #12
 8009620:	f8ca 3000 	str.w	r3, [sl]
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009634:	6921      	ldr	r1, [r4, #16]
 8009636:	464a      	mov	r2, r9
 8009638:	f7ff fb88 	bl	8008d4c <memcpy>
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009646:	81a3      	strh	r3, [r4, #12]
 8009648:	6126      	str	r6, [r4, #16]
 800964a:	6165      	str	r5, [r4, #20]
 800964c:	444e      	add	r6, r9
 800964e:	eba5 0509 	sub.w	r5, r5, r9
 8009652:	6026      	str	r6, [r4, #0]
 8009654:	60a5      	str	r5, [r4, #8]
 8009656:	463e      	mov	r6, r7
 8009658:	42be      	cmp	r6, r7
 800965a:	d900      	bls.n	800965e <__ssputs_r+0x86>
 800965c:	463e      	mov	r6, r7
 800965e:	4632      	mov	r2, r6
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	4641      	mov	r1, r8
 8009664:	f000 f966 	bl	8009934 <memmove>
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	6822      	ldr	r2, [r4, #0]
 800966c:	1b9b      	subs	r3, r3, r6
 800966e:	4432      	add	r2, r6
 8009670:	60a3      	str	r3, [r4, #8]
 8009672:	6022      	str	r2, [r4, #0]
 8009674:	2000      	movs	r0, #0
 8009676:	e7db      	b.n	8009630 <__ssputs_r+0x58>
 8009678:	462a      	mov	r2, r5
 800967a:	f000 f981 	bl	8009980 <_realloc_r>
 800967e:	4606      	mov	r6, r0
 8009680:	2800      	cmp	r0, #0
 8009682:	d1e1      	bne.n	8009648 <__ssputs_r+0x70>
 8009684:	6921      	ldr	r1, [r4, #16]
 8009686:	4650      	mov	r0, sl
 8009688:	f7ff fefc 	bl	8009484 <_free_r>
 800968c:	e7c7      	b.n	800961e <__ssputs_r+0x46>
	...

08009690 <_svfiprintf_r>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	4698      	mov	r8, r3
 8009696:	898b      	ldrh	r3, [r1, #12]
 8009698:	061b      	lsls	r3, r3, #24
 800969a:	b09d      	sub	sp, #116	; 0x74
 800969c:	4607      	mov	r7, r0
 800969e:	460d      	mov	r5, r1
 80096a0:	4614      	mov	r4, r2
 80096a2:	d50e      	bpl.n	80096c2 <_svfiprintf_r+0x32>
 80096a4:	690b      	ldr	r3, [r1, #16]
 80096a6:	b963      	cbnz	r3, 80096c2 <_svfiprintf_r+0x32>
 80096a8:	2140      	movs	r1, #64	; 0x40
 80096aa:	f7ff ff3b 	bl	8009524 <_malloc_r>
 80096ae:	6028      	str	r0, [r5, #0]
 80096b0:	6128      	str	r0, [r5, #16]
 80096b2:	b920      	cbnz	r0, 80096be <_svfiprintf_r+0x2e>
 80096b4:	230c      	movs	r3, #12
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	e0d1      	b.n	8009862 <_svfiprintf_r+0x1d2>
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	616b      	str	r3, [r5, #20]
 80096c2:	2300      	movs	r3, #0
 80096c4:	9309      	str	r3, [sp, #36]	; 0x24
 80096c6:	2320      	movs	r3, #32
 80096c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80096d0:	2330      	movs	r3, #48	; 0x30
 80096d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800987c <_svfiprintf_r+0x1ec>
 80096d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096da:	f04f 0901 	mov.w	r9, #1
 80096de:	4623      	mov	r3, r4
 80096e0:	469a      	mov	sl, r3
 80096e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e6:	b10a      	cbz	r2, 80096ec <_svfiprintf_r+0x5c>
 80096e8:	2a25      	cmp	r2, #37	; 0x25
 80096ea:	d1f9      	bne.n	80096e0 <_svfiprintf_r+0x50>
 80096ec:	ebba 0b04 	subs.w	fp, sl, r4
 80096f0:	d00b      	beq.n	800970a <_svfiprintf_r+0x7a>
 80096f2:	465b      	mov	r3, fp
 80096f4:	4622      	mov	r2, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7ff ff6d 	bl	80095d8 <__ssputs_r>
 80096fe:	3001      	adds	r0, #1
 8009700:	f000 80aa 	beq.w	8009858 <_svfiprintf_r+0x1c8>
 8009704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009706:	445a      	add	r2, fp
 8009708:	9209      	str	r2, [sp, #36]	; 0x24
 800970a:	f89a 3000 	ldrb.w	r3, [sl]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 80a2 	beq.w	8009858 <_svfiprintf_r+0x1c8>
 8009714:	2300      	movs	r3, #0
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800971e:	f10a 0a01 	add.w	sl, sl, #1
 8009722:	9304      	str	r3, [sp, #16]
 8009724:	9307      	str	r3, [sp, #28]
 8009726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800972a:	931a      	str	r3, [sp, #104]	; 0x68
 800972c:	4654      	mov	r4, sl
 800972e:	2205      	movs	r2, #5
 8009730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009734:	4851      	ldr	r0, [pc, #324]	; (800987c <_svfiprintf_r+0x1ec>)
 8009736:	f7f6 fd8b 	bl	8000250 <memchr>
 800973a:	9a04      	ldr	r2, [sp, #16]
 800973c:	b9d8      	cbnz	r0, 8009776 <_svfiprintf_r+0xe6>
 800973e:	06d0      	lsls	r0, r2, #27
 8009740:	bf44      	itt	mi
 8009742:	2320      	movmi	r3, #32
 8009744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009748:	0711      	lsls	r1, r2, #28
 800974a:	bf44      	itt	mi
 800974c:	232b      	movmi	r3, #43	; 0x2b
 800974e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b2a      	cmp	r3, #42	; 0x2a
 8009758:	d015      	beq.n	8009786 <_svfiprintf_r+0xf6>
 800975a:	9a07      	ldr	r2, [sp, #28]
 800975c:	4654      	mov	r4, sl
 800975e:	2000      	movs	r0, #0
 8009760:	f04f 0c0a 	mov.w	ip, #10
 8009764:	4621      	mov	r1, r4
 8009766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800976a:	3b30      	subs	r3, #48	; 0x30
 800976c:	2b09      	cmp	r3, #9
 800976e:	d94e      	bls.n	800980e <_svfiprintf_r+0x17e>
 8009770:	b1b0      	cbz	r0, 80097a0 <_svfiprintf_r+0x110>
 8009772:	9207      	str	r2, [sp, #28]
 8009774:	e014      	b.n	80097a0 <_svfiprintf_r+0x110>
 8009776:	eba0 0308 	sub.w	r3, r0, r8
 800977a:	fa09 f303 	lsl.w	r3, r9, r3
 800977e:	4313      	orrs	r3, r2
 8009780:	9304      	str	r3, [sp, #16]
 8009782:	46a2      	mov	sl, r4
 8009784:	e7d2      	b.n	800972c <_svfiprintf_r+0x9c>
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	1d19      	adds	r1, r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	9103      	str	r1, [sp, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfbb      	ittet	lt
 8009792:	425b      	neglt	r3, r3
 8009794:	f042 0202 	orrlt.w	r2, r2, #2
 8009798:	9307      	strge	r3, [sp, #28]
 800979a:	9307      	strlt	r3, [sp, #28]
 800979c:	bfb8      	it	lt
 800979e:	9204      	strlt	r2, [sp, #16]
 80097a0:	7823      	ldrb	r3, [r4, #0]
 80097a2:	2b2e      	cmp	r3, #46	; 0x2e
 80097a4:	d10c      	bne.n	80097c0 <_svfiprintf_r+0x130>
 80097a6:	7863      	ldrb	r3, [r4, #1]
 80097a8:	2b2a      	cmp	r3, #42	; 0x2a
 80097aa:	d135      	bne.n	8009818 <_svfiprintf_r+0x188>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	1d1a      	adds	r2, r3, #4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	9203      	str	r2, [sp, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bfb8      	it	lt
 80097b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80097bc:	3402      	adds	r4, #2
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800988c <_svfiprintf_r+0x1fc>
 80097c4:	7821      	ldrb	r1, [r4, #0]
 80097c6:	2203      	movs	r2, #3
 80097c8:	4650      	mov	r0, sl
 80097ca:	f7f6 fd41 	bl	8000250 <memchr>
 80097ce:	b140      	cbz	r0, 80097e2 <_svfiprintf_r+0x152>
 80097d0:	2340      	movs	r3, #64	; 0x40
 80097d2:	eba0 000a 	sub.w	r0, r0, sl
 80097d6:	fa03 f000 	lsl.w	r0, r3, r0
 80097da:	9b04      	ldr	r3, [sp, #16]
 80097dc:	4303      	orrs	r3, r0
 80097de:	3401      	adds	r4, #1
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e6:	4826      	ldr	r0, [pc, #152]	; (8009880 <_svfiprintf_r+0x1f0>)
 80097e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097ec:	2206      	movs	r2, #6
 80097ee:	f7f6 fd2f 	bl	8000250 <memchr>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d038      	beq.n	8009868 <_svfiprintf_r+0x1d8>
 80097f6:	4b23      	ldr	r3, [pc, #140]	; (8009884 <_svfiprintf_r+0x1f4>)
 80097f8:	bb1b      	cbnz	r3, 8009842 <_svfiprintf_r+0x1b2>
 80097fa:	9b03      	ldr	r3, [sp, #12]
 80097fc:	3307      	adds	r3, #7
 80097fe:	f023 0307 	bic.w	r3, r3, #7
 8009802:	3308      	adds	r3, #8
 8009804:	9303      	str	r3, [sp, #12]
 8009806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009808:	4433      	add	r3, r6
 800980a:	9309      	str	r3, [sp, #36]	; 0x24
 800980c:	e767      	b.n	80096de <_svfiprintf_r+0x4e>
 800980e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009812:	460c      	mov	r4, r1
 8009814:	2001      	movs	r0, #1
 8009816:	e7a5      	b.n	8009764 <_svfiprintf_r+0xd4>
 8009818:	2300      	movs	r3, #0
 800981a:	3401      	adds	r4, #1
 800981c:	9305      	str	r3, [sp, #20]
 800981e:	4619      	mov	r1, r3
 8009820:	f04f 0c0a 	mov.w	ip, #10
 8009824:	4620      	mov	r0, r4
 8009826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800982a:	3a30      	subs	r2, #48	; 0x30
 800982c:	2a09      	cmp	r2, #9
 800982e:	d903      	bls.n	8009838 <_svfiprintf_r+0x1a8>
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0c5      	beq.n	80097c0 <_svfiprintf_r+0x130>
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	e7c3      	b.n	80097c0 <_svfiprintf_r+0x130>
 8009838:	fb0c 2101 	mla	r1, ip, r1, r2
 800983c:	4604      	mov	r4, r0
 800983e:	2301      	movs	r3, #1
 8009840:	e7f0      	b.n	8009824 <_svfiprintf_r+0x194>
 8009842:	ab03      	add	r3, sp, #12
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	462a      	mov	r2, r5
 8009848:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <_svfiprintf_r+0x1f8>)
 800984a:	a904      	add	r1, sp, #16
 800984c:	4638      	mov	r0, r7
 800984e:	f7fe f88f 	bl	8007970 <_printf_float>
 8009852:	1c42      	adds	r2, r0, #1
 8009854:	4606      	mov	r6, r0
 8009856:	d1d6      	bne.n	8009806 <_svfiprintf_r+0x176>
 8009858:	89ab      	ldrh	r3, [r5, #12]
 800985a:	065b      	lsls	r3, r3, #25
 800985c:	f53f af2c 	bmi.w	80096b8 <_svfiprintf_r+0x28>
 8009860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009862:	b01d      	add	sp, #116	; 0x74
 8009864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009868:	ab03      	add	r3, sp, #12
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	462a      	mov	r2, r5
 800986e:	4b06      	ldr	r3, [pc, #24]	; (8009888 <_svfiprintf_r+0x1f8>)
 8009870:	a904      	add	r1, sp, #16
 8009872:	4638      	mov	r0, r7
 8009874:	f7fe fb08 	bl	8007e88 <_printf_i>
 8009878:	e7eb      	b.n	8009852 <_svfiprintf_r+0x1c2>
 800987a:	bf00      	nop
 800987c:	0800a6dc 	.word	0x0800a6dc
 8009880:	0800a6e6 	.word	0x0800a6e6
 8009884:	08007971 	.word	0x08007971
 8009888:	080095d9 	.word	0x080095d9
 800988c:	0800a6e2 	.word	0x0800a6e2

08009890 <_sbrk_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4d06      	ldr	r5, [pc, #24]	; (80098ac <_sbrk_r+0x1c>)
 8009894:	2300      	movs	r3, #0
 8009896:	4604      	mov	r4, r0
 8009898:	4608      	mov	r0, r1
 800989a:	602b      	str	r3, [r5, #0]
 800989c:	f7f8 fad0 	bl	8001e40 <_sbrk>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d102      	bne.n	80098aa <_sbrk_r+0x1a>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	b103      	cbz	r3, 80098aa <_sbrk_r+0x1a>
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	200007e8 	.word	0x200007e8

080098b0 <__assert_func>:
 80098b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098b2:	4614      	mov	r4, r2
 80098b4:	461a      	mov	r2, r3
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <__assert_func+0x2c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4605      	mov	r5, r0
 80098bc:	68d8      	ldr	r0, [r3, #12]
 80098be:	b14c      	cbz	r4, 80098d4 <__assert_func+0x24>
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <__assert_func+0x30>)
 80098c2:	9100      	str	r1, [sp, #0]
 80098c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098c8:	4906      	ldr	r1, [pc, #24]	; (80098e4 <__assert_func+0x34>)
 80098ca:	462b      	mov	r3, r5
 80098cc:	f000 f80e 	bl	80098ec <fiprintf>
 80098d0:	f000 faa4 	bl	8009e1c <abort>
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <__assert_func+0x38>)
 80098d6:	461c      	mov	r4, r3
 80098d8:	e7f3      	b.n	80098c2 <__assert_func+0x12>
 80098da:	bf00      	nop
 80098dc:	20000028 	.word	0x20000028
 80098e0:	0800a6ed 	.word	0x0800a6ed
 80098e4:	0800a6fa 	.word	0x0800a6fa
 80098e8:	0800a728 	.word	0x0800a728

080098ec <fiprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b503      	push	{r0, r1, lr}
 80098f0:	4601      	mov	r1, r0
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <fiprintf+0x20>)
 80098f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f000 f88f 	bl	8009a20 <_vfiprintf_r>
 8009902:	b002      	add	sp, #8
 8009904:	f85d eb04 	ldr.w	lr, [sp], #4
 8009908:	b003      	add	sp, #12
 800990a:	4770      	bx	lr
 800990c:	20000028 	.word	0x20000028

08009910 <__ascii_mbtowc>:
 8009910:	b082      	sub	sp, #8
 8009912:	b901      	cbnz	r1, 8009916 <__ascii_mbtowc+0x6>
 8009914:	a901      	add	r1, sp, #4
 8009916:	b142      	cbz	r2, 800992a <__ascii_mbtowc+0x1a>
 8009918:	b14b      	cbz	r3, 800992e <__ascii_mbtowc+0x1e>
 800991a:	7813      	ldrb	r3, [r2, #0]
 800991c:	600b      	str	r3, [r1, #0]
 800991e:	7812      	ldrb	r2, [r2, #0]
 8009920:	1e10      	subs	r0, r2, #0
 8009922:	bf18      	it	ne
 8009924:	2001      	movne	r0, #1
 8009926:	b002      	add	sp, #8
 8009928:	4770      	bx	lr
 800992a:	4610      	mov	r0, r2
 800992c:	e7fb      	b.n	8009926 <__ascii_mbtowc+0x16>
 800992e:	f06f 0001 	mvn.w	r0, #1
 8009932:	e7f8      	b.n	8009926 <__ascii_mbtowc+0x16>

08009934 <memmove>:
 8009934:	4288      	cmp	r0, r1
 8009936:	b510      	push	{r4, lr}
 8009938:	eb01 0402 	add.w	r4, r1, r2
 800993c:	d902      	bls.n	8009944 <memmove+0x10>
 800993e:	4284      	cmp	r4, r0
 8009940:	4623      	mov	r3, r4
 8009942:	d807      	bhi.n	8009954 <memmove+0x20>
 8009944:	1e43      	subs	r3, r0, #1
 8009946:	42a1      	cmp	r1, r4
 8009948:	d008      	beq.n	800995c <memmove+0x28>
 800994a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800994e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009952:	e7f8      	b.n	8009946 <memmove+0x12>
 8009954:	4402      	add	r2, r0
 8009956:	4601      	mov	r1, r0
 8009958:	428a      	cmp	r2, r1
 800995a:	d100      	bne.n	800995e <memmove+0x2a>
 800995c:	bd10      	pop	{r4, pc}
 800995e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009966:	e7f7      	b.n	8009958 <memmove+0x24>

08009968 <__malloc_lock>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__malloc_lock+0x8>)
 800996a:	f000 bc17 	b.w	800a19c <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	200007f0 	.word	0x200007f0

08009974 <__malloc_unlock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_unlock+0x8>)
 8009976:	f000 bc12 	b.w	800a19e <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	200007f0 	.word	0x200007f0

08009980 <_realloc_r>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	4607      	mov	r7, r0
 8009984:	4614      	mov	r4, r2
 8009986:	460e      	mov	r6, r1
 8009988:	b921      	cbnz	r1, 8009994 <_realloc_r+0x14>
 800998a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800998e:	4611      	mov	r1, r2
 8009990:	f7ff bdc8 	b.w	8009524 <_malloc_r>
 8009994:	b922      	cbnz	r2, 80099a0 <_realloc_r+0x20>
 8009996:	f7ff fd75 	bl	8009484 <_free_r>
 800999a:	4625      	mov	r5, r4
 800999c:	4628      	mov	r0, r5
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a0:	f000 fc62 	bl	800a268 <_malloc_usable_size_r>
 80099a4:	42a0      	cmp	r0, r4
 80099a6:	d20f      	bcs.n	80099c8 <_realloc_r+0x48>
 80099a8:	4621      	mov	r1, r4
 80099aa:	4638      	mov	r0, r7
 80099ac:	f7ff fdba 	bl	8009524 <_malloc_r>
 80099b0:	4605      	mov	r5, r0
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0f2      	beq.n	800999c <_realloc_r+0x1c>
 80099b6:	4631      	mov	r1, r6
 80099b8:	4622      	mov	r2, r4
 80099ba:	f7ff f9c7 	bl	8008d4c <memcpy>
 80099be:	4631      	mov	r1, r6
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7ff fd5f 	bl	8009484 <_free_r>
 80099c6:	e7e9      	b.n	800999c <_realloc_r+0x1c>
 80099c8:	4635      	mov	r5, r6
 80099ca:	e7e7      	b.n	800999c <_realloc_r+0x1c>

080099cc <__sfputc_r>:
 80099cc:	6893      	ldr	r3, [r2, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	b410      	push	{r4}
 80099d4:	6093      	str	r3, [r2, #8]
 80099d6:	da08      	bge.n	80099ea <__sfputc_r+0x1e>
 80099d8:	6994      	ldr	r4, [r2, #24]
 80099da:	42a3      	cmp	r3, r4
 80099dc:	db01      	blt.n	80099e2 <__sfputc_r+0x16>
 80099de:	290a      	cmp	r1, #10
 80099e0:	d103      	bne.n	80099ea <__sfputc_r+0x1e>
 80099e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e6:	f000 b94b 	b.w	8009c80 <__swbuf_r>
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	1c58      	adds	r0, r3, #1
 80099ee:	6010      	str	r0, [r2, #0]
 80099f0:	7019      	strb	r1, [r3, #0]
 80099f2:	4608      	mov	r0, r1
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <__sfputs_r>:
 80099fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	4614      	mov	r4, r2
 8009a02:	18d5      	adds	r5, r2, r3
 8009a04:	42ac      	cmp	r4, r5
 8009a06:	d101      	bne.n	8009a0c <__sfputs_r+0x12>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e007      	b.n	8009a1c <__sfputs_r+0x22>
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	463a      	mov	r2, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ffda 	bl	80099cc <__sfputc_r>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d1f3      	bne.n	8009a04 <__sfputs_r+0xa>
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a20 <_vfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460d      	mov	r5, r1
 8009a26:	b09d      	sub	sp, #116	; 0x74
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4698      	mov	r8, r3
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	b118      	cbz	r0, 8009a38 <_vfiprintf_r+0x18>
 8009a30:	6983      	ldr	r3, [r0, #24]
 8009a32:	b90b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x18>
 8009a34:	f000 fb14 	bl	800a060 <__sinit>
 8009a38:	4b89      	ldr	r3, [pc, #548]	; (8009c60 <_vfiprintf_r+0x240>)
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	d11b      	bne.n	8009a76 <_vfiprintf_r+0x56>
 8009a3e:	6875      	ldr	r5, [r6, #4]
 8009a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a42:	07d9      	lsls	r1, r3, #31
 8009a44:	d405      	bmi.n	8009a52 <_vfiprintf_r+0x32>
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	059a      	lsls	r2, r3, #22
 8009a4a:	d402      	bmi.n	8009a52 <_vfiprintf_r+0x32>
 8009a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a4e:	f000 fba5 	bl	800a19c <__retarget_lock_acquire_recursive>
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	071b      	lsls	r3, r3, #28
 8009a56:	d501      	bpl.n	8009a5c <_vfiprintf_r+0x3c>
 8009a58:	692b      	ldr	r3, [r5, #16]
 8009a5a:	b9eb      	cbnz	r3, 8009a98 <_vfiprintf_r+0x78>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f000 f96e 	bl	8009d40 <__swsetup_r>
 8009a64:	b1c0      	cbz	r0, 8009a98 <_vfiprintf_r+0x78>
 8009a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a68:	07dc      	lsls	r4, r3, #31
 8009a6a:	d50e      	bpl.n	8009a8a <_vfiprintf_r+0x6a>
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b01d      	add	sp, #116	; 0x74
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	4b7b      	ldr	r3, [pc, #492]	; (8009c64 <_vfiprintf_r+0x244>)
 8009a78:	429d      	cmp	r5, r3
 8009a7a:	d101      	bne.n	8009a80 <_vfiprintf_r+0x60>
 8009a7c:	68b5      	ldr	r5, [r6, #8]
 8009a7e:	e7df      	b.n	8009a40 <_vfiprintf_r+0x20>
 8009a80:	4b79      	ldr	r3, [pc, #484]	; (8009c68 <_vfiprintf_r+0x248>)
 8009a82:	429d      	cmp	r5, r3
 8009a84:	bf08      	it	eq
 8009a86:	68f5      	ldreq	r5, [r6, #12]
 8009a88:	e7da      	b.n	8009a40 <_vfiprintf_r+0x20>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	0598      	lsls	r0, r3, #22
 8009a8e:	d4ed      	bmi.n	8009a6c <_vfiprintf_r+0x4c>
 8009a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a92:	f000 fb84 	bl	800a19e <__retarget_lock_release_recursive>
 8009a96:	e7e9      	b.n	8009a6c <_vfiprintf_r+0x4c>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa6:	2330      	movs	r3, #48	; 0x30
 8009aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c6c <_vfiprintf_r+0x24c>
 8009aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab0:	f04f 0901 	mov.w	r9, #1
 8009ab4:	4623      	mov	r3, r4
 8009ab6:	469a      	mov	sl, r3
 8009ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009abc:	b10a      	cbz	r2, 8009ac2 <_vfiprintf_r+0xa2>
 8009abe:	2a25      	cmp	r2, #37	; 0x25
 8009ac0:	d1f9      	bne.n	8009ab6 <_vfiprintf_r+0x96>
 8009ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac6:	d00b      	beq.n	8009ae0 <_vfiprintf_r+0xc0>
 8009ac8:	465b      	mov	r3, fp
 8009aca:	4622      	mov	r2, r4
 8009acc:	4629      	mov	r1, r5
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff ff93 	bl	80099fa <__sfputs_r>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f000 80aa 	beq.w	8009c2e <_vfiprintf_r+0x20e>
 8009ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009adc:	445a      	add	r2, fp
 8009ade:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 80a2 	beq.w	8009c2e <_vfiprintf_r+0x20e>
 8009aea:	2300      	movs	r3, #0
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af4:	f10a 0a01 	add.w	sl, sl, #1
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	9307      	str	r3, [sp, #28]
 8009afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b00:	931a      	str	r3, [sp, #104]	; 0x68
 8009b02:	4654      	mov	r4, sl
 8009b04:	2205      	movs	r2, #5
 8009b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0a:	4858      	ldr	r0, [pc, #352]	; (8009c6c <_vfiprintf_r+0x24c>)
 8009b0c:	f7f6 fba0 	bl	8000250 <memchr>
 8009b10:	9a04      	ldr	r2, [sp, #16]
 8009b12:	b9d8      	cbnz	r0, 8009b4c <_vfiprintf_r+0x12c>
 8009b14:	06d1      	lsls	r1, r2, #27
 8009b16:	bf44      	itt	mi
 8009b18:	2320      	movmi	r3, #32
 8009b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b1e:	0713      	lsls	r3, r2, #28
 8009b20:	bf44      	itt	mi
 8009b22:	232b      	movmi	r3, #43	; 0x2b
 8009b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b28:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2e:	d015      	beq.n	8009b5c <_vfiprintf_r+0x13c>
 8009b30:	9a07      	ldr	r2, [sp, #28]
 8009b32:	4654      	mov	r4, sl
 8009b34:	2000      	movs	r0, #0
 8009b36:	f04f 0c0a 	mov.w	ip, #10
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b40:	3b30      	subs	r3, #48	; 0x30
 8009b42:	2b09      	cmp	r3, #9
 8009b44:	d94e      	bls.n	8009be4 <_vfiprintf_r+0x1c4>
 8009b46:	b1b0      	cbz	r0, 8009b76 <_vfiprintf_r+0x156>
 8009b48:	9207      	str	r2, [sp, #28]
 8009b4a:	e014      	b.n	8009b76 <_vfiprintf_r+0x156>
 8009b4c:	eba0 0308 	sub.w	r3, r0, r8
 8009b50:	fa09 f303 	lsl.w	r3, r9, r3
 8009b54:	4313      	orrs	r3, r2
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	46a2      	mov	sl, r4
 8009b5a:	e7d2      	b.n	8009b02 <_vfiprintf_r+0xe2>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	1d19      	adds	r1, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9103      	str	r1, [sp, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bfbb      	ittet	lt
 8009b68:	425b      	neglt	r3, r3
 8009b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b6e:	9307      	strge	r3, [sp, #28]
 8009b70:	9307      	strlt	r3, [sp, #28]
 8009b72:	bfb8      	it	lt
 8009b74:	9204      	strlt	r2, [sp, #16]
 8009b76:	7823      	ldrb	r3, [r4, #0]
 8009b78:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7a:	d10c      	bne.n	8009b96 <_vfiprintf_r+0x176>
 8009b7c:	7863      	ldrb	r3, [r4, #1]
 8009b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b80:	d135      	bne.n	8009bee <_vfiprintf_r+0x1ce>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	1d1a      	adds	r2, r3, #4
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	9203      	str	r2, [sp, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfb8      	it	lt
 8009b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b92:	3402      	adds	r4, #2
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c7c <_vfiprintf_r+0x25c>
 8009b9a:	7821      	ldrb	r1, [r4, #0]
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	4650      	mov	r0, sl
 8009ba0:	f7f6 fb56 	bl	8000250 <memchr>
 8009ba4:	b140      	cbz	r0, 8009bb8 <_vfiprintf_r+0x198>
 8009ba6:	2340      	movs	r3, #64	; 0x40
 8009ba8:	eba0 000a 	sub.w	r0, r0, sl
 8009bac:	fa03 f000 	lsl.w	r0, r3, r0
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	4303      	orrs	r3, r0
 8009bb4:	3401      	adds	r4, #1
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbc:	482c      	ldr	r0, [pc, #176]	; (8009c70 <_vfiprintf_r+0x250>)
 8009bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc2:	2206      	movs	r2, #6
 8009bc4:	f7f6 fb44 	bl	8000250 <memchr>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d03f      	beq.n	8009c4c <_vfiprintf_r+0x22c>
 8009bcc:	4b29      	ldr	r3, [pc, #164]	; (8009c74 <_vfiprintf_r+0x254>)
 8009bce:	bb1b      	cbnz	r3, 8009c18 <_vfiprintf_r+0x1f8>
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	3307      	adds	r3, #7
 8009bd4:	f023 0307 	bic.w	r3, r3, #7
 8009bd8:	3308      	adds	r3, #8
 8009bda:	9303      	str	r3, [sp, #12]
 8009bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bde:	443b      	add	r3, r7
 8009be0:	9309      	str	r3, [sp, #36]	; 0x24
 8009be2:	e767      	b.n	8009ab4 <_vfiprintf_r+0x94>
 8009be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be8:	460c      	mov	r4, r1
 8009bea:	2001      	movs	r0, #1
 8009bec:	e7a5      	b.n	8009b3a <_vfiprintf_r+0x11a>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f04f 0c0a 	mov.w	ip, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c00:	3a30      	subs	r2, #48	; 0x30
 8009c02:	2a09      	cmp	r2, #9
 8009c04:	d903      	bls.n	8009c0e <_vfiprintf_r+0x1ee>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0c5      	beq.n	8009b96 <_vfiprintf_r+0x176>
 8009c0a:	9105      	str	r1, [sp, #20]
 8009c0c:	e7c3      	b.n	8009b96 <_vfiprintf_r+0x176>
 8009c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c12:	4604      	mov	r4, r0
 8009c14:	2301      	movs	r3, #1
 8009c16:	e7f0      	b.n	8009bfa <_vfiprintf_r+0x1da>
 8009c18:	ab03      	add	r3, sp, #12
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	462a      	mov	r2, r5
 8009c1e:	4b16      	ldr	r3, [pc, #88]	; (8009c78 <_vfiprintf_r+0x258>)
 8009c20:	a904      	add	r1, sp, #16
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7fd fea4 	bl	8007970 <_printf_float>
 8009c28:	4607      	mov	r7, r0
 8009c2a:	1c78      	adds	r0, r7, #1
 8009c2c:	d1d6      	bne.n	8009bdc <_vfiprintf_r+0x1bc>
 8009c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c30:	07d9      	lsls	r1, r3, #31
 8009c32:	d405      	bmi.n	8009c40 <_vfiprintf_r+0x220>
 8009c34:	89ab      	ldrh	r3, [r5, #12]
 8009c36:	059a      	lsls	r2, r3, #22
 8009c38:	d402      	bmi.n	8009c40 <_vfiprintf_r+0x220>
 8009c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3c:	f000 faaf 	bl	800a19e <__retarget_lock_release_recursive>
 8009c40:	89ab      	ldrh	r3, [r5, #12]
 8009c42:	065b      	lsls	r3, r3, #25
 8009c44:	f53f af12 	bmi.w	8009a6c <_vfiprintf_r+0x4c>
 8009c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c4a:	e711      	b.n	8009a70 <_vfiprintf_r+0x50>
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <_vfiprintf_r+0x258>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7fe f916 	bl	8007e88 <_printf_i>
 8009c5c:	e7e4      	b.n	8009c28 <_vfiprintf_r+0x208>
 8009c5e:	bf00      	nop
 8009c60:	0800a854 	.word	0x0800a854
 8009c64:	0800a874 	.word	0x0800a874
 8009c68:	0800a834 	.word	0x0800a834
 8009c6c:	0800a6dc 	.word	0x0800a6dc
 8009c70:	0800a6e6 	.word	0x0800a6e6
 8009c74:	08007971 	.word	0x08007971
 8009c78:	080099fb 	.word	0x080099fb
 8009c7c:	0800a6e2 	.word	0x0800a6e2

08009c80 <__swbuf_r>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	460e      	mov	r6, r1
 8009c84:	4614      	mov	r4, r2
 8009c86:	4605      	mov	r5, r0
 8009c88:	b118      	cbz	r0, 8009c92 <__swbuf_r+0x12>
 8009c8a:	6983      	ldr	r3, [r0, #24]
 8009c8c:	b90b      	cbnz	r3, 8009c92 <__swbuf_r+0x12>
 8009c8e:	f000 f9e7 	bl	800a060 <__sinit>
 8009c92:	4b21      	ldr	r3, [pc, #132]	; (8009d18 <__swbuf_r+0x98>)
 8009c94:	429c      	cmp	r4, r3
 8009c96:	d12b      	bne.n	8009cf0 <__swbuf_r+0x70>
 8009c98:	686c      	ldr	r4, [r5, #4]
 8009c9a:	69a3      	ldr	r3, [r4, #24]
 8009c9c:	60a3      	str	r3, [r4, #8]
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	071a      	lsls	r2, r3, #28
 8009ca2:	d52f      	bpl.n	8009d04 <__swbuf_r+0x84>
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	b36b      	cbz	r3, 8009d04 <__swbuf_r+0x84>
 8009ca8:	6923      	ldr	r3, [r4, #16]
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	1ac0      	subs	r0, r0, r3
 8009cae:	6963      	ldr	r3, [r4, #20]
 8009cb0:	b2f6      	uxtb	r6, r6
 8009cb2:	4283      	cmp	r3, r0
 8009cb4:	4637      	mov	r7, r6
 8009cb6:	dc04      	bgt.n	8009cc2 <__swbuf_r+0x42>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f000 f93c 	bl	8009f38 <_fflush_r>
 8009cc0:	bb30      	cbnz	r0, 8009d10 <__swbuf_r+0x90>
 8009cc2:	68a3      	ldr	r3, [r4, #8]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	60a3      	str	r3, [r4, #8]
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	6022      	str	r2, [r4, #0]
 8009cce:	701e      	strb	r6, [r3, #0]
 8009cd0:	6963      	ldr	r3, [r4, #20]
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	4283      	cmp	r3, r0
 8009cd6:	d004      	beq.n	8009ce2 <__swbuf_r+0x62>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	07db      	lsls	r3, r3, #31
 8009cdc:	d506      	bpl.n	8009cec <__swbuf_r+0x6c>
 8009cde:	2e0a      	cmp	r6, #10
 8009ce0:	d104      	bne.n	8009cec <__swbuf_r+0x6c>
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f000 f927 	bl	8009f38 <_fflush_r>
 8009cea:	b988      	cbnz	r0, 8009d10 <__swbuf_r+0x90>
 8009cec:	4638      	mov	r0, r7
 8009cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <__swbuf_r+0x9c>)
 8009cf2:	429c      	cmp	r4, r3
 8009cf4:	d101      	bne.n	8009cfa <__swbuf_r+0x7a>
 8009cf6:	68ac      	ldr	r4, [r5, #8]
 8009cf8:	e7cf      	b.n	8009c9a <__swbuf_r+0x1a>
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <__swbuf_r+0xa0>)
 8009cfc:	429c      	cmp	r4, r3
 8009cfe:	bf08      	it	eq
 8009d00:	68ec      	ldreq	r4, [r5, #12]
 8009d02:	e7ca      	b.n	8009c9a <__swbuf_r+0x1a>
 8009d04:	4621      	mov	r1, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 f81a 	bl	8009d40 <__swsetup_r>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d0cb      	beq.n	8009ca8 <__swbuf_r+0x28>
 8009d10:	f04f 37ff 	mov.w	r7, #4294967295
 8009d14:	e7ea      	b.n	8009cec <__swbuf_r+0x6c>
 8009d16:	bf00      	nop
 8009d18:	0800a854 	.word	0x0800a854
 8009d1c:	0800a874 	.word	0x0800a874
 8009d20:	0800a834 	.word	0x0800a834

08009d24 <__ascii_wctomb>:
 8009d24:	b149      	cbz	r1, 8009d3a <__ascii_wctomb+0x16>
 8009d26:	2aff      	cmp	r2, #255	; 0xff
 8009d28:	bf85      	ittet	hi
 8009d2a:	238a      	movhi	r3, #138	; 0x8a
 8009d2c:	6003      	strhi	r3, [r0, #0]
 8009d2e:	700a      	strbls	r2, [r1, #0]
 8009d30:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d34:	bf98      	it	ls
 8009d36:	2001      	movls	r0, #1
 8009d38:	4770      	bx	lr
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4770      	bx	lr
	...

08009d40 <__swsetup_r>:
 8009d40:	4b32      	ldr	r3, [pc, #200]	; (8009e0c <__swsetup_r+0xcc>)
 8009d42:	b570      	push	{r4, r5, r6, lr}
 8009d44:	681d      	ldr	r5, [r3, #0]
 8009d46:	4606      	mov	r6, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	b125      	cbz	r5, 8009d56 <__swsetup_r+0x16>
 8009d4c:	69ab      	ldr	r3, [r5, #24]
 8009d4e:	b913      	cbnz	r3, 8009d56 <__swsetup_r+0x16>
 8009d50:	4628      	mov	r0, r5
 8009d52:	f000 f985 	bl	800a060 <__sinit>
 8009d56:	4b2e      	ldr	r3, [pc, #184]	; (8009e10 <__swsetup_r+0xd0>)
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	d10f      	bne.n	8009d7c <__swsetup_r+0x3c>
 8009d5c:	686c      	ldr	r4, [r5, #4]
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d64:	0719      	lsls	r1, r3, #28
 8009d66:	d42c      	bmi.n	8009dc2 <__swsetup_r+0x82>
 8009d68:	06dd      	lsls	r5, r3, #27
 8009d6a:	d411      	bmi.n	8009d90 <__swsetup_r+0x50>
 8009d6c:	2309      	movs	r3, #9
 8009d6e:	6033      	str	r3, [r6, #0]
 8009d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7a:	e03e      	b.n	8009dfa <__swsetup_r+0xba>
 8009d7c:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <__swsetup_r+0xd4>)
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	d101      	bne.n	8009d86 <__swsetup_r+0x46>
 8009d82:	68ac      	ldr	r4, [r5, #8]
 8009d84:	e7eb      	b.n	8009d5e <__swsetup_r+0x1e>
 8009d86:	4b24      	ldr	r3, [pc, #144]	; (8009e18 <__swsetup_r+0xd8>)
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	bf08      	it	eq
 8009d8c:	68ec      	ldreq	r4, [r5, #12]
 8009d8e:	e7e6      	b.n	8009d5e <__swsetup_r+0x1e>
 8009d90:	0758      	lsls	r0, r3, #29
 8009d92:	d512      	bpl.n	8009dba <__swsetup_r+0x7a>
 8009d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d96:	b141      	cbz	r1, 8009daa <__swsetup_r+0x6a>
 8009d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	d002      	beq.n	8009da6 <__swsetup_r+0x66>
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7ff fb6f 	bl	8009484 <_free_r>
 8009da6:	2300      	movs	r3, #0
 8009da8:	6363      	str	r3, [r4, #52]	; 0x34
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	2300      	movs	r3, #0
 8009db4:	6063      	str	r3, [r4, #4]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f043 0308 	orr.w	r3, r3, #8
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	b94b      	cbnz	r3, 8009dda <__swsetup_r+0x9a>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd0:	d003      	beq.n	8009dda <__swsetup_r+0x9a>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f000 fa07 	bl	800a1e8 <__smakebuf_r>
 8009dda:	89a0      	ldrh	r0, [r4, #12]
 8009ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de0:	f010 0301 	ands.w	r3, r0, #1
 8009de4:	d00a      	beq.n	8009dfc <__swsetup_r+0xbc>
 8009de6:	2300      	movs	r3, #0
 8009de8:	60a3      	str	r3, [r4, #8]
 8009dea:	6963      	ldr	r3, [r4, #20]
 8009dec:	425b      	negs	r3, r3
 8009dee:	61a3      	str	r3, [r4, #24]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	b943      	cbnz	r3, 8009e06 <__swsetup_r+0xc6>
 8009df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009df8:	d1ba      	bne.n	8009d70 <__swsetup_r+0x30>
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	0781      	lsls	r1, r0, #30
 8009dfe:	bf58      	it	pl
 8009e00:	6963      	ldrpl	r3, [r4, #20]
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	e7f4      	b.n	8009df0 <__swsetup_r+0xb0>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7f7      	b.n	8009dfa <__swsetup_r+0xba>
 8009e0a:	bf00      	nop
 8009e0c:	20000028 	.word	0x20000028
 8009e10:	0800a854 	.word	0x0800a854
 8009e14:	0800a874 	.word	0x0800a874
 8009e18:	0800a834 	.word	0x0800a834

08009e1c <abort>:
 8009e1c:	b508      	push	{r3, lr}
 8009e1e:	2006      	movs	r0, #6
 8009e20:	f000 fa52 	bl	800a2c8 <raise>
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7f7 ff93 	bl	8001d50 <_exit>
	...

08009e2c <__sflush_r>:
 8009e2c:	898a      	ldrh	r2, [r1, #12]
 8009e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e32:	4605      	mov	r5, r0
 8009e34:	0710      	lsls	r0, r2, #28
 8009e36:	460c      	mov	r4, r1
 8009e38:	d458      	bmi.n	8009eec <__sflush_r+0xc0>
 8009e3a:	684b      	ldr	r3, [r1, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dc05      	bgt.n	8009e4c <__sflush_r+0x20>
 8009e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	dc02      	bgt.n	8009e4c <__sflush_r+0x20>
 8009e46:	2000      	movs	r0, #0
 8009e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	d0f9      	beq.n	8009e46 <__sflush_r+0x1a>
 8009e52:	2300      	movs	r3, #0
 8009e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e58:	682f      	ldr	r7, [r5, #0]
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	d032      	beq.n	8009ec4 <__sflush_r+0x98>
 8009e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	075a      	lsls	r2, r3, #29
 8009e64:	d505      	bpl.n	8009e72 <__sflush_r+0x46>
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	1ac0      	subs	r0, r0, r3
 8009e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e6c:	b10b      	cbz	r3, 8009e72 <__sflush_r+0x46>
 8009e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e70:	1ac0      	subs	r0, r0, r3
 8009e72:	2300      	movs	r3, #0
 8009e74:	4602      	mov	r2, r0
 8009e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e78:	6a21      	ldr	r1, [r4, #32]
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	47b0      	blx	r6
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	d106      	bne.n	8009e92 <__sflush_r+0x66>
 8009e84:	6829      	ldr	r1, [r5, #0]
 8009e86:	291d      	cmp	r1, #29
 8009e88:	d82c      	bhi.n	8009ee4 <__sflush_r+0xb8>
 8009e8a:	4a2a      	ldr	r2, [pc, #168]	; (8009f34 <__sflush_r+0x108>)
 8009e8c:	40ca      	lsrs	r2, r1
 8009e8e:	07d6      	lsls	r6, r2, #31
 8009e90:	d528      	bpl.n	8009ee4 <__sflush_r+0xb8>
 8009e92:	2200      	movs	r2, #0
 8009e94:	6062      	str	r2, [r4, #4]
 8009e96:	04d9      	lsls	r1, r3, #19
 8009e98:	6922      	ldr	r2, [r4, #16]
 8009e9a:	6022      	str	r2, [r4, #0]
 8009e9c:	d504      	bpl.n	8009ea8 <__sflush_r+0x7c>
 8009e9e:	1c42      	adds	r2, r0, #1
 8009ea0:	d101      	bne.n	8009ea6 <__sflush_r+0x7a>
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	b903      	cbnz	r3, 8009ea8 <__sflush_r+0x7c>
 8009ea6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eaa:	602f      	str	r7, [r5, #0]
 8009eac:	2900      	cmp	r1, #0
 8009eae:	d0ca      	beq.n	8009e46 <__sflush_r+0x1a>
 8009eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	d002      	beq.n	8009ebe <__sflush_r+0x92>
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f7ff fae3 	bl	8009484 <_free_r>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ec2:	e7c1      	b.n	8009e48 <__sflush_r+0x1c>
 8009ec4:	6a21      	ldr	r1, [r4, #32]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b0      	blx	r6
 8009ecc:	1c41      	adds	r1, r0, #1
 8009ece:	d1c7      	bne.n	8009e60 <__sflush_r+0x34>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0c4      	beq.n	8009e60 <__sflush_r+0x34>
 8009ed6:	2b1d      	cmp	r3, #29
 8009ed8:	d001      	beq.n	8009ede <__sflush_r+0xb2>
 8009eda:	2b16      	cmp	r3, #22
 8009edc:	d101      	bne.n	8009ee2 <__sflush_r+0xb6>
 8009ede:	602f      	str	r7, [r5, #0]
 8009ee0:	e7b1      	b.n	8009e46 <__sflush_r+0x1a>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	e7ad      	b.n	8009e48 <__sflush_r+0x1c>
 8009eec:	690f      	ldr	r7, [r1, #16]
 8009eee:	2f00      	cmp	r7, #0
 8009ef0:	d0a9      	beq.n	8009e46 <__sflush_r+0x1a>
 8009ef2:	0793      	lsls	r3, r2, #30
 8009ef4:	680e      	ldr	r6, [r1, #0]
 8009ef6:	bf08      	it	eq
 8009ef8:	694b      	ldreq	r3, [r1, #20]
 8009efa:	600f      	str	r7, [r1, #0]
 8009efc:	bf18      	it	ne
 8009efe:	2300      	movne	r3, #0
 8009f00:	eba6 0807 	sub.w	r8, r6, r7
 8009f04:	608b      	str	r3, [r1, #8]
 8009f06:	f1b8 0f00 	cmp.w	r8, #0
 8009f0a:	dd9c      	ble.n	8009e46 <__sflush_r+0x1a>
 8009f0c:	6a21      	ldr	r1, [r4, #32]
 8009f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f10:	4643      	mov	r3, r8
 8009f12:	463a      	mov	r2, r7
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b0      	blx	r6
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	dc06      	bgt.n	8009f2a <__sflush_r+0xfe>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e78e      	b.n	8009e48 <__sflush_r+0x1c>
 8009f2a:	4407      	add	r7, r0
 8009f2c:	eba8 0800 	sub.w	r8, r8, r0
 8009f30:	e7e9      	b.n	8009f06 <__sflush_r+0xda>
 8009f32:	bf00      	nop
 8009f34:	20400001 	.word	0x20400001

08009f38 <_fflush_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	690b      	ldr	r3, [r1, #16]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	460c      	mov	r4, r1
 8009f40:	b913      	cbnz	r3, 8009f48 <_fflush_r+0x10>
 8009f42:	2500      	movs	r5, #0
 8009f44:	4628      	mov	r0, r5
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	b118      	cbz	r0, 8009f52 <_fflush_r+0x1a>
 8009f4a:	6983      	ldr	r3, [r0, #24]
 8009f4c:	b90b      	cbnz	r3, 8009f52 <_fflush_r+0x1a>
 8009f4e:	f000 f887 	bl	800a060 <__sinit>
 8009f52:	4b14      	ldr	r3, [pc, #80]	; (8009fa4 <_fflush_r+0x6c>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	d11b      	bne.n	8009f90 <_fflush_r+0x58>
 8009f58:	686c      	ldr	r4, [r5, #4]
 8009f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0ef      	beq.n	8009f42 <_fflush_r+0xa>
 8009f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f64:	07d0      	lsls	r0, r2, #31
 8009f66:	d404      	bmi.n	8009f72 <_fflush_r+0x3a>
 8009f68:	0599      	lsls	r1, r3, #22
 8009f6a:	d402      	bmi.n	8009f72 <_fflush_r+0x3a>
 8009f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f6e:	f000 f915 	bl	800a19c <__retarget_lock_acquire_recursive>
 8009f72:	4628      	mov	r0, r5
 8009f74:	4621      	mov	r1, r4
 8009f76:	f7ff ff59 	bl	8009e2c <__sflush_r>
 8009f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f7c:	07da      	lsls	r2, r3, #31
 8009f7e:	4605      	mov	r5, r0
 8009f80:	d4e0      	bmi.n	8009f44 <_fflush_r+0xc>
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	059b      	lsls	r3, r3, #22
 8009f86:	d4dd      	bmi.n	8009f44 <_fflush_r+0xc>
 8009f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f8a:	f000 f908 	bl	800a19e <__retarget_lock_release_recursive>
 8009f8e:	e7d9      	b.n	8009f44 <_fflush_r+0xc>
 8009f90:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <_fflush_r+0x70>)
 8009f92:	429c      	cmp	r4, r3
 8009f94:	d101      	bne.n	8009f9a <_fflush_r+0x62>
 8009f96:	68ac      	ldr	r4, [r5, #8]
 8009f98:	e7df      	b.n	8009f5a <_fflush_r+0x22>
 8009f9a:	4b04      	ldr	r3, [pc, #16]	; (8009fac <_fflush_r+0x74>)
 8009f9c:	429c      	cmp	r4, r3
 8009f9e:	bf08      	it	eq
 8009fa0:	68ec      	ldreq	r4, [r5, #12]
 8009fa2:	e7da      	b.n	8009f5a <_fflush_r+0x22>
 8009fa4:	0800a854 	.word	0x0800a854
 8009fa8:	0800a874 	.word	0x0800a874
 8009fac:	0800a834 	.word	0x0800a834

08009fb0 <std>:
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	b510      	push	{r4, lr}
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fbe:	6083      	str	r3, [r0, #8]
 8009fc0:	8181      	strh	r1, [r0, #12]
 8009fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fc4:	81c2      	strh	r2, [r0, #14]
 8009fc6:	6183      	str	r3, [r0, #24]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	2208      	movs	r2, #8
 8009fcc:	305c      	adds	r0, #92	; 0x5c
 8009fce:	f7fd fc37 	bl	8007840 <memset>
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <std+0x38>)
 8009fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8009fd6:	4b05      	ldr	r3, [pc, #20]	; (8009fec <std+0x3c>)
 8009fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fda:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <std+0x40>)
 8009fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fde:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <std+0x44>)
 8009fe0:	6224      	str	r4, [r4, #32]
 8009fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8009fe4:	bd10      	pop	{r4, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800a301 	.word	0x0800a301
 8009fec:	0800a323 	.word	0x0800a323
 8009ff0:	0800a35b 	.word	0x0800a35b
 8009ff4:	0800a37f 	.word	0x0800a37f

08009ff8 <_cleanup_r>:
 8009ff8:	4901      	ldr	r1, [pc, #4]	; (800a000 <_cleanup_r+0x8>)
 8009ffa:	f000 b8af 	b.w	800a15c <_fwalk_reent>
 8009ffe:	bf00      	nop
 800a000:	08009f39 	.word	0x08009f39

0800a004 <__sfmoreglue>:
 800a004:	b570      	push	{r4, r5, r6, lr}
 800a006:	1e4a      	subs	r2, r1, #1
 800a008:	2568      	movs	r5, #104	; 0x68
 800a00a:	4355      	muls	r5, r2
 800a00c:	460e      	mov	r6, r1
 800a00e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a012:	f7ff fa87 	bl	8009524 <_malloc_r>
 800a016:	4604      	mov	r4, r0
 800a018:	b140      	cbz	r0, 800a02c <__sfmoreglue+0x28>
 800a01a:	2100      	movs	r1, #0
 800a01c:	e9c0 1600 	strd	r1, r6, [r0]
 800a020:	300c      	adds	r0, #12
 800a022:	60a0      	str	r0, [r4, #8]
 800a024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a028:	f7fd fc0a 	bl	8007840 <memset>
 800a02c:	4620      	mov	r0, r4
 800a02e:	bd70      	pop	{r4, r5, r6, pc}

0800a030 <__sfp_lock_acquire>:
 800a030:	4801      	ldr	r0, [pc, #4]	; (800a038 <__sfp_lock_acquire+0x8>)
 800a032:	f000 b8b3 	b.w	800a19c <__retarget_lock_acquire_recursive>
 800a036:	bf00      	nop
 800a038:	200007f4 	.word	0x200007f4

0800a03c <__sfp_lock_release>:
 800a03c:	4801      	ldr	r0, [pc, #4]	; (800a044 <__sfp_lock_release+0x8>)
 800a03e:	f000 b8ae 	b.w	800a19e <__retarget_lock_release_recursive>
 800a042:	bf00      	nop
 800a044:	200007f4 	.word	0x200007f4

0800a048 <__sinit_lock_acquire>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sinit_lock_acquire+0x8>)
 800a04a:	f000 b8a7 	b.w	800a19c <__retarget_lock_acquire_recursive>
 800a04e:	bf00      	nop
 800a050:	200007ef 	.word	0x200007ef

0800a054 <__sinit_lock_release>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__sinit_lock_release+0x8>)
 800a056:	f000 b8a2 	b.w	800a19e <__retarget_lock_release_recursive>
 800a05a:	bf00      	nop
 800a05c:	200007ef 	.word	0x200007ef

0800a060 <__sinit>:
 800a060:	b510      	push	{r4, lr}
 800a062:	4604      	mov	r4, r0
 800a064:	f7ff fff0 	bl	800a048 <__sinit_lock_acquire>
 800a068:	69a3      	ldr	r3, [r4, #24]
 800a06a:	b11b      	cbz	r3, 800a074 <__sinit+0x14>
 800a06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a070:	f7ff bff0 	b.w	800a054 <__sinit_lock_release>
 800a074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a078:	6523      	str	r3, [r4, #80]	; 0x50
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <__sinit+0x68>)
 800a07c:	4a13      	ldr	r2, [pc, #76]	; (800a0cc <__sinit+0x6c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	62a2      	str	r2, [r4, #40]	; 0x28
 800a082:	42a3      	cmp	r3, r4
 800a084:	bf04      	itt	eq
 800a086:	2301      	moveq	r3, #1
 800a088:	61a3      	streq	r3, [r4, #24]
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 f820 	bl	800a0d0 <__sfp>
 800a090:	6060      	str	r0, [r4, #4]
 800a092:	4620      	mov	r0, r4
 800a094:	f000 f81c 	bl	800a0d0 <__sfp>
 800a098:	60a0      	str	r0, [r4, #8]
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 f818 	bl	800a0d0 <__sfp>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	60e0      	str	r0, [r4, #12]
 800a0a4:	2104      	movs	r1, #4
 800a0a6:	6860      	ldr	r0, [r4, #4]
 800a0a8:	f7ff ff82 	bl	8009fb0 <std>
 800a0ac:	68a0      	ldr	r0, [r4, #8]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	2109      	movs	r1, #9
 800a0b2:	f7ff ff7d 	bl	8009fb0 <std>
 800a0b6:	68e0      	ldr	r0, [r4, #12]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	2112      	movs	r1, #18
 800a0bc:	f7ff ff78 	bl	8009fb0 <std>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	61a3      	str	r3, [r4, #24]
 800a0c4:	e7d2      	b.n	800a06c <__sinit+0xc>
 800a0c6:	bf00      	nop
 800a0c8:	0800a4b0 	.word	0x0800a4b0
 800a0cc:	08009ff9 	.word	0x08009ff9

0800a0d0 <__sfp>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	f7ff ffac 	bl	800a030 <__sfp_lock_acquire>
 800a0d8:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <__sfp+0x84>)
 800a0da:	681e      	ldr	r6, [r3, #0]
 800a0dc:	69b3      	ldr	r3, [r6, #24]
 800a0de:	b913      	cbnz	r3, 800a0e6 <__sfp+0x16>
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff ffbd 	bl	800a060 <__sinit>
 800a0e6:	3648      	adds	r6, #72	; 0x48
 800a0e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	d503      	bpl.n	800a0f8 <__sfp+0x28>
 800a0f0:	6833      	ldr	r3, [r6, #0]
 800a0f2:	b30b      	cbz	r3, 800a138 <__sfp+0x68>
 800a0f4:	6836      	ldr	r6, [r6, #0]
 800a0f6:	e7f7      	b.n	800a0e8 <__sfp+0x18>
 800a0f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0fc:	b9d5      	cbnz	r5, 800a134 <__sfp+0x64>
 800a0fe:	4b16      	ldr	r3, [pc, #88]	; (800a158 <__sfp+0x88>)
 800a100:	60e3      	str	r3, [r4, #12]
 800a102:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a106:	6665      	str	r5, [r4, #100]	; 0x64
 800a108:	f000 f847 	bl	800a19a <__retarget_lock_init_recursive>
 800a10c:	f7ff ff96 	bl	800a03c <__sfp_lock_release>
 800a110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a118:	6025      	str	r5, [r4, #0]
 800a11a:	61a5      	str	r5, [r4, #24]
 800a11c:	2208      	movs	r2, #8
 800a11e:	4629      	mov	r1, r5
 800a120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a124:	f7fd fb8c 	bl	8007840 <memset>
 800a128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a12c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a130:	4620      	mov	r0, r4
 800a132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a134:	3468      	adds	r4, #104	; 0x68
 800a136:	e7d9      	b.n	800a0ec <__sfp+0x1c>
 800a138:	2104      	movs	r1, #4
 800a13a:	4638      	mov	r0, r7
 800a13c:	f7ff ff62 	bl	800a004 <__sfmoreglue>
 800a140:	4604      	mov	r4, r0
 800a142:	6030      	str	r0, [r6, #0]
 800a144:	2800      	cmp	r0, #0
 800a146:	d1d5      	bne.n	800a0f4 <__sfp+0x24>
 800a148:	f7ff ff78 	bl	800a03c <__sfp_lock_release>
 800a14c:	230c      	movs	r3, #12
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	e7ee      	b.n	800a130 <__sfp+0x60>
 800a152:	bf00      	nop
 800a154:	0800a4b0 	.word	0x0800a4b0
 800a158:	ffff0001 	.word	0xffff0001

0800a15c <_fwalk_reent>:
 800a15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a160:	4606      	mov	r6, r0
 800a162:	4688      	mov	r8, r1
 800a164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a168:	2700      	movs	r7, #0
 800a16a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a16e:	f1b9 0901 	subs.w	r9, r9, #1
 800a172:	d505      	bpl.n	800a180 <_fwalk_reent+0x24>
 800a174:	6824      	ldr	r4, [r4, #0]
 800a176:	2c00      	cmp	r4, #0
 800a178:	d1f7      	bne.n	800a16a <_fwalk_reent+0xe>
 800a17a:	4638      	mov	r0, r7
 800a17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a180:	89ab      	ldrh	r3, [r5, #12]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d907      	bls.n	800a196 <_fwalk_reent+0x3a>
 800a186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a18a:	3301      	adds	r3, #1
 800a18c:	d003      	beq.n	800a196 <_fwalk_reent+0x3a>
 800a18e:	4629      	mov	r1, r5
 800a190:	4630      	mov	r0, r6
 800a192:	47c0      	blx	r8
 800a194:	4307      	orrs	r7, r0
 800a196:	3568      	adds	r5, #104	; 0x68
 800a198:	e7e9      	b.n	800a16e <_fwalk_reent+0x12>

0800a19a <__retarget_lock_init_recursive>:
 800a19a:	4770      	bx	lr

0800a19c <__retarget_lock_acquire_recursive>:
 800a19c:	4770      	bx	lr

0800a19e <__retarget_lock_release_recursive>:
 800a19e:	4770      	bx	lr

0800a1a0 <__swhatbuf_r>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	460e      	mov	r6, r1
 800a1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a8:	2900      	cmp	r1, #0
 800a1aa:	b096      	sub	sp, #88	; 0x58
 800a1ac:	4614      	mov	r4, r2
 800a1ae:	461d      	mov	r5, r3
 800a1b0:	da07      	bge.n	800a1c2 <__swhatbuf_r+0x22>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	89b3      	ldrh	r3, [r6, #12]
 800a1b8:	061a      	lsls	r2, r3, #24
 800a1ba:	d410      	bmi.n	800a1de <__swhatbuf_r+0x3e>
 800a1bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1c0:	e00e      	b.n	800a1e0 <__swhatbuf_r+0x40>
 800a1c2:	466a      	mov	r2, sp
 800a1c4:	f000 f902 	bl	800a3cc <_fstat_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	dbf2      	blt.n	800a1b2 <__swhatbuf_r+0x12>
 800a1cc:	9a01      	ldr	r2, [sp, #4]
 800a1ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1d6:	425a      	negs	r2, r3
 800a1d8:	415a      	adcs	r2, r3
 800a1da:	602a      	str	r2, [r5, #0]
 800a1dc:	e7ee      	b.n	800a1bc <__swhatbuf_r+0x1c>
 800a1de:	2340      	movs	r3, #64	; 0x40
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	b016      	add	sp, #88	; 0x58
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}

0800a1e8 <__smakebuf_r>:
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1ec:	079d      	lsls	r5, r3, #30
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	d507      	bpl.n	800a204 <__smakebuf_r+0x1c>
 800a1f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	6163      	str	r3, [r4, #20]
 800a200:	b002      	add	sp, #8
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	ab01      	add	r3, sp, #4
 800a206:	466a      	mov	r2, sp
 800a208:	f7ff ffca 	bl	800a1a0 <__swhatbuf_r>
 800a20c:	9900      	ldr	r1, [sp, #0]
 800a20e:	4605      	mov	r5, r0
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff f987 	bl	8009524 <_malloc_r>
 800a216:	b948      	cbnz	r0, 800a22c <__smakebuf_r+0x44>
 800a218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21c:	059a      	lsls	r2, r3, #22
 800a21e:	d4ef      	bmi.n	800a200 <__smakebuf_r+0x18>
 800a220:	f023 0303 	bic.w	r3, r3, #3
 800a224:	f043 0302 	orr.w	r3, r3, #2
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	e7e3      	b.n	800a1f4 <__smakebuf_r+0xc>
 800a22c:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <__smakebuf_r+0x7c>)
 800a22e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	6163      	str	r3, [r4, #20]
 800a23e:	9b01      	ldr	r3, [sp, #4]
 800a240:	6120      	str	r0, [r4, #16]
 800a242:	b15b      	cbz	r3, 800a25c <__smakebuf_r+0x74>
 800a244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a248:	4630      	mov	r0, r6
 800a24a:	f000 f8d1 	bl	800a3f0 <_isatty_r>
 800a24e:	b128      	cbz	r0, 800a25c <__smakebuf_r+0x74>
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	f023 0303 	bic.w	r3, r3, #3
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	89a0      	ldrh	r0, [r4, #12]
 800a25e:	4305      	orrs	r5, r0
 800a260:	81a5      	strh	r5, [r4, #12]
 800a262:	e7cd      	b.n	800a200 <__smakebuf_r+0x18>
 800a264:	08009ff9 	.word	0x08009ff9

0800a268 <_malloc_usable_size_r>:
 800a268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a26c:	1f18      	subs	r0, r3, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bfbc      	itt	lt
 800a272:	580b      	ldrlt	r3, [r1, r0]
 800a274:	18c0      	addlt	r0, r0, r3
 800a276:	4770      	bx	lr

0800a278 <_raise_r>:
 800a278:	291f      	cmp	r1, #31
 800a27a:	b538      	push	{r3, r4, r5, lr}
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	d904      	bls.n	800a28c <_raise_r+0x14>
 800a282:	2316      	movs	r3, #22
 800a284:	6003      	str	r3, [r0, #0]
 800a286:	f04f 30ff 	mov.w	r0, #4294967295
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a28e:	b112      	cbz	r2, 800a296 <_raise_r+0x1e>
 800a290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a294:	b94b      	cbnz	r3, 800a2aa <_raise_r+0x32>
 800a296:	4620      	mov	r0, r4
 800a298:	f000 f830 	bl	800a2fc <_getpid_r>
 800a29c:	462a      	mov	r2, r5
 800a29e:	4601      	mov	r1, r0
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a6:	f000 b817 	b.w	800a2d8 <_kill_r>
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d00a      	beq.n	800a2c4 <_raise_r+0x4c>
 800a2ae:	1c59      	adds	r1, r3, #1
 800a2b0:	d103      	bne.n	800a2ba <_raise_r+0x42>
 800a2b2:	2316      	movs	r3, #22
 800a2b4:	6003      	str	r3, [r0, #0]
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	e7e7      	b.n	800a28a <_raise_r+0x12>
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	4798      	blx	r3
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	e7e0      	b.n	800a28a <_raise_r+0x12>

0800a2c8 <raise>:
 800a2c8:	4b02      	ldr	r3, [pc, #8]	; (800a2d4 <raise+0xc>)
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	f7ff bfd3 	b.w	800a278 <_raise_r>
 800a2d2:	bf00      	nop
 800a2d4:	20000028 	.word	0x20000028

0800a2d8 <_kill_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	; (800a2f8 <_kill_r+0x20>)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	602b      	str	r3, [r5, #0]
 800a2e6:	f7f7 fd23 	bl	8001d30 <_kill>
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	d102      	bne.n	800a2f4 <_kill_r+0x1c>
 800a2ee:	682b      	ldr	r3, [r5, #0]
 800a2f0:	b103      	cbz	r3, 800a2f4 <_kill_r+0x1c>
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	bd38      	pop	{r3, r4, r5, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200007e8 	.word	0x200007e8

0800a2fc <_getpid_r>:
 800a2fc:	f7f7 bd10 	b.w	8001d20 <_getpid>

0800a300 <__sread>:
 800a300:	b510      	push	{r4, lr}
 800a302:	460c      	mov	r4, r1
 800a304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a308:	f000 f894 	bl	800a434 <_read_r>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	bfab      	itete	ge
 800a310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a312:	89a3      	ldrhlt	r3, [r4, #12]
 800a314:	181b      	addge	r3, r3, r0
 800a316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a31a:	bfac      	ite	ge
 800a31c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a31e:	81a3      	strhlt	r3, [r4, #12]
 800a320:	bd10      	pop	{r4, pc}

0800a322 <__swrite>:
 800a322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a326:	461f      	mov	r7, r3
 800a328:	898b      	ldrh	r3, [r1, #12]
 800a32a:	05db      	lsls	r3, r3, #23
 800a32c:	4605      	mov	r5, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	4616      	mov	r6, r2
 800a332:	d505      	bpl.n	800a340 <__swrite+0x1e>
 800a334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a338:	2302      	movs	r3, #2
 800a33a:	2200      	movs	r2, #0
 800a33c:	f000 f868 	bl	800a410 <_lseek_r>
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a34a:	81a3      	strh	r3, [r4, #12]
 800a34c:	4632      	mov	r2, r6
 800a34e:	463b      	mov	r3, r7
 800a350:	4628      	mov	r0, r5
 800a352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a356:	f000 b817 	b.w	800a388 <_write_r>

0800a35a <__sseek>:
 800a35a:	b510      	push	{r4, lr}
 800a35c:	460c      	mov	r4, r1
 800a35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a362:	f000 f855 	bl	800a410 <_lseek_r>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	bf15      	itete	ne
 800a36c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a36e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a376:	81a3      	strheq	r3, [r4, #12]
 800a378:	bf18      	it	ne
 800a37a:	81a3      	strhne	r3, [r4, #12]
 800a37c:	bd10      	pop	{r4, pc}

0800a37e <__sclose>:
 800a37e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a382:	f000 b813 	b.w	800a3ac <_close_r>
	...

0800a388 <_write_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <_write_r+0x20>)
 800a38c:	4604      	mov	r4, r0
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	2200      	movs	r2, #0
 800a394:	602a      	str	r2, [r5, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f7f7 fd01 	bl	8001d9e <_write>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_write_r+0x1e>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_write_r+0x1e>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	200007e8 	.word	0x200007e8

0800a3ac <_close_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d06      	ldr	r5, [pc, #24]	; (800a3c8 <_close_r+0x1c>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	f7f7 fd0d 	bl	8001dd6 <_close>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_close_r+0x1a>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_close_r+0x1a>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	200007e8 	.word	0x200007e8

0800a3cc <_fstat_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4d07      	ldr	r5, [pc, #28]	; (800a3ec <_fstat_r+0x20>)
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	602b      	str	r3, [r5, #0]
 800a3da:	f7f7 fd08 	bl	8001dee <_fstat>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	d102      	bne.n	800a3e8 <_fstat_r+0x1c>
 800a3e2:	682b      	ldr	r3, [r5, #0]
 800a3e4:	b103      	cbz	r3, 800a3e8 <_fstat_r+0x1c>
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ea:	bf00      	nop
 800a3ec:	200007e8 	.word	0x200007e8

0800a3f0 <_isatty_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4d06      	ldr	r5, [pc, #24]	; (800a40c <_isatty_r+0x1c>)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	602b      	str	r3, [r5, #0]
 800a3fc:	f7f7 fd07 	bl	8001e0e <_isatty>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_isatty_r+0x1a>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	b103      	cbz	r3, 800a40a <_isatty_r+0x1a>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	200007e8 	.word	0x200007e8

0800a410 <_lseek_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4d07      	ldr	r5, [pc, #28]	; (800a430 <_lseek_r+0x20>)
 800a414:	4604      	mov	r4, r0
 800a416:	4608      	mov	r0, r1
 800a418:	4611      	mov	r1, r2
 800a41a:	2200      	movs	r2, #0
 800a41c:	602a      	str	r2, [r5, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	f7f7 fd00 	bl	8001e24 <_lseek>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_lseek_r+0x1e>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_lseek_r+0x1e>
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	200007e8 	.word	0x200007e8

0800a434 <_read_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4d07      	ldr	r5, [pc, #28]	; (800a454 <_read_r+0x20>)
 800a438:	4604      	mov	r4, r0
 800a43a:	4608      	mov	r0, r1
 800a43c:	4611      	mov	r1, r2
 800a43e:	2200      	movs	r2, #0
 800a440:	602a      	str	r2, [r5, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	f7f7 fc8e 	bl	8001d64 <_read>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_read_r+0x1e>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_read_r+0x1e>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	200007e8 	.word	0x200007e8

0800a458 <_init>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr

0800a464 <_fini>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr
